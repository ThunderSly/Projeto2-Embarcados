
RTOS-BLUETOOTH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000066c8  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004066c8  004066c8  000166c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  004066d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000358  204009c0  00407090  000209c0  2**2
                  ALLOC
  4 .stack        00002000  20400d18  004073e8  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20402d18  004093e8  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   000227fc  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000046f1  00000000  00000000  00043243  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009d4f  00000000  00000000  00047934  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000f80  00000000  00000000  00051683  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001118  00000000  00000000  00052603  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00022c77  00000000  00000000  0005371b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00012be1  00000000  00000000  00076392  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009e666  00000000  00000000  00088f73  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003200  00000000  00000000  001275dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	18 2d 40 20 ed 0d 40 00 eb 0d 40 00 eb 0d 40 00     .-@ ..@...@...@.
  400010:	eb 0d 40 00 eb 0d 40 00 eb 0d 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	9d 11 40 00 eb 0d 40 00 00 00 00 00 f9 11 40 00     ..@...@.......@.
  40003c:	61 12 40 00 eb 0d 40 00 eb 0d 40 00 eb 0d 40 00     a.@...@...@...@.
  40004c:	eb 0d 40 00 eb 0d 40 00 eb 0d 40 00 eb 0d 40 00     ..@...@...@...@.
  40005c:	eb 0d 40 00 eb 0d 40 00 00 00 00 00 d5 0a 40 00     ..@...@.......@.
  40006c:	e9 0a 40 00 fd 0a 40 00 eb 0d 40 00 eb 0d 40 00     ..@...@...@...@.
  40007c:	eb 0d 40 00 11 0b 40 00 25 0b 40 00 eb 0d 40 00     ..@...@.%.@...@.
  40008c:	eb 0d 40 00 eb 0d 40 00 eb 0d 40 00 eb 0d 40 00     ..@...@...@...@.
  40009c:	eb 0d 40 00 eb 0d 40 00 eb 0d 40 00 eb 0d 40 00     ..@...@...@...@.
  4000ac:	eb 0d 40 00 eb 0d 40 00 8d 07 40 00 eb 0d 40 00     ..@...@...@...@.
  4000bc:	eb 0d 40 00 eb 0d 40 00 eb 0d 40 00 eb 0d 40 00     ..@...@...@...@.
  4000cc:	eb 0d 40 00 00 00 00 00 eb 0d 40 00 00 00 00 00     ..@.......@.....
  4000dc:	eb 0d 40 00 a1 07 40 00 eb 0d 40 00 eb 0d 40 00     ..@...@...@...@.
  4000ec:	eb 0d 40 00 eb 0d 40 00 eb 0d 40 00 eb 0d 40 00     ..@...@...@...@.
  4000fc:	eb 0d 40 00 eb 0d 40 00 eb 0d 40 00 eb 0d 40 00     ..@...@...@...@.
  40010c:	eb 0d 40 00 eb 0d 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 eb 0d 40 00 eb 0d 40 00 eb 0d 40 00     ......@...@...@.
  40012c:	eb 0d 40 00 eb 0d 40 00 00 00 00 00 eb 0d 40 00     ..@...@.......@.
  40013c:	eb 0d 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009c0 	.word	0x204009c0
  40015c:	00000000 	.word	0x00000000
  400160:	004066d0 	.word	0x004066d0

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	004066d0 	.word	0x004066d0
  4001a0:	204009c4 	.word	0x204009c4
  4001a4:	004066d0 	.word	0x004066d0
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	00400fc1 	.word	0x00400fc1
  4001f8:	00400bd5 	.word	0x00400bd5
  4001fc:	00400c29 	.word	0x00400c29
  400200:	00400c39 	.word	0x00400c39
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	00400c49 	.word	0x00400c49
  400210:	00400b39 	.word	0x00400b39
  400214:	00400b71 	.word	0x00400b71
  400218:	00400eb5 	.word	0x00400eb5

0040021c <usart_serial_write_packet>:
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
  40021c:	2a00      	cmp	r2, #0
  40021e:	d054      	beq.n	4002ca <usart_serial_write_packet+0xae>
{
  400220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400224:	4692      	mov	sl, r2
  400226:	4606      	mov	r6, r0
  400228:	460f      	mov	r7, r1
  40022a:	448a      	add	sl, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40022c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4002e8 <usart_serial_write_packet+0xcc>
		while (uart_write((Uart*)p_usart, c)!=0);
  400230:	4d27      	ldr	r5, [pc, #156]	; (4002d0 <usart_serial_write_packet+0xb4>)
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400232:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 4002ec <usart_serial_write_packet+0xd0>
  400236:	e006      	b.n	400246 <usart_serial_write_packet+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  400238:	4621      	mov	r1, r4
  40023a:	4640      	mov	r0, r8
  40023c:	47a8      	blx	r5
  40023e:	2800      	cmp	r0, #0
  400240:	d1fa      	bne.n	400238 <usart_serial_write_packet+0x1c>
	while (len) {
  400242:	45ba      	cmp	sl, r7
  400244:	d03e      	beq.n	4002c4 <usart_serial_write_packet+0xa8>
		usart_serial_putchar(usart, *data);
  400246:	f817 4b01 	ldrb.w	r4, [r7], #1
	if (UART0 == (Uart*)p_usart) {
  40024a:	4546      	cmp	r6, r8
  40024c:	d0f4      	beq.n	400238 <usart_serial_write_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  40024e:	454e      	cmp	r6, r9
  400250:	d016      	beq.n	400280 <usart_serial_write_packet+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400252:	4b20      	ldr	r3, [pc, #128]	; (4002d4 <usart_serial_write_packet+0xb8>)
  400254:	429e      	cmp	r6, r3
  400256:	d019      	beq.n	40028c <usart_serial_write_packet+0x70>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400258:	4b1f      	ldr	r3, [pc, #124]	; (4002d8 <usart_serial_write_packet+0xbc>)
  40025a:	429e      	cmp	r6, r3
  40025c:	d01c      	beq.n	400298 <usart_serial_write_packet+0x7c>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40025e:	4b1f      	ldr	r3, [pc, #124]	; (4002dc <usart_serial_write_packet+0xc0>)
  400260:	429e      	cmp	r6, r3
  400262:	d01f      	beq.n	4002a4 <usart_serial_write_packet+0x88>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400264:	4b1e      	ldr	r3, [pc, #120]	; (4002e0 <usart_serial_write_packet+0xc4>)
  400266:	429e      	cmp	r6, r3
  400268:	d024      	beq.n	4002b4 <usart_serial_write_packet+0x98>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40026a:	4b1e      	ldr	r3, [pc, #120]	; (4002e4 <usart_serial_write_packet+0xc8>)
  40026c:	429e      	cmp	r6, r3
  40026e:	d1e8      	bne.n	400242 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  400270:	f8df b07c 	ldr.w	fp, [pc, #124]	; 4002f0 <usart_serial_write_packet+0xd4>
  400274:	4621      	mov	r1, r4
  400276:	481b      	ldr	r0, [pc, #108]	; (4002e4 <usart_serial_write_packet+0xc8>)
  400278:	47d8      	blx	fp
  40027a:	2800      	cmp	r0, #0
  40027c:	d1fa      	bne.n	400274 <usart_serial_write_packet+0x58>
  40027e:	e7e0      	b.n	400242 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  400280:	4621      	mov	r1, r4
  400282:	4648      	mov	r0, r9
  400284:	47a8      	blx	r5
  400286:	2800      	cmp	r0, #0
  400288:	d1fa      	bne.n	400280 <usart_serial_write_packet+0x64>
  40028a:	e7da      	b.n	400242 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  40028c:	4621      	mov	r1, r4
  40028e:	4811      	ldr	r0, [pc, #68]	; (4002d4 <usart_serial_write_packet+0xb8>)
  400290:	47a8      	blx	r5
  400292:	2800      	cmp	r0, #0
  400294:	d1fa      	bne.n	40028c <usart_serial_write_packet+0x70>
  400296:	e7d4      	b.n	400242 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  400298:	4621      	mov	r1, r4
  40029a:	480f      	ldr	r0, [pc, #60]	; (4002d8 <usart_serial_write_packet+0xbc>)
  40029c:	47a8      	blx	r5
  40029e:	2800      	cmp	r0, #0
  4002a0:	d1fa      	bne.n	400298 <usart_serial_write_packet+0x7c>
  4002a2:	e7ce      	b.n	400242 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  4002a4:	f8df b048 	ldr.w	fp, [pc, #72]	; 4002f0 <usart_serial_write_packet+0xd4>
  4002a8:	4621      	mov	r1, r4
  4002aa:	480c      	ldr	r0, [pc, #48]	; (4002dc <usart_serial_write_packet+0xc0>)
  4002ac:	47d8      	blx	fp
  4002ae:	2800      	cmp	r0, #0
  4002b0:	d1fa      	bne.n	4002a8 <usart_serial_write_packet+0x8c>
  4002b2:	e7c6      	b.n	400242 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  4002b4:	f8df b038 	ldr.w	fp, [pc, #56]	; 4002f0 <usart_serial_write_packet+0xd4>
  4002b8:	4621      	mov	r1, r4
  4002ba:	4809      	ldr	r0, [pc, #36]	; (4002e0 <usart_serial_write_packet+0xc4>)
  4002bc:	47d8      	blx	fp
  4002be:	2800      	cmp	r0, #0
  4002c0:	d1fa      	bne.n	4002b8 <usart_serial_write_packet+0x9c>
  4002c2:	e7be      	b.n	400242 <usart_serial_write_packet+0x26>
		len--;
		data++;
	}
	return STATUS_OK;
}
  4002c4:	2000      	movs	r0, #0
  4002c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4002ca:	2000      	movs	r0, #0
  4002cc:	4770      	bx	lr
  4002ce:	bf00      	nop
  4002d0:	00400cad 	.word	0x00400cad
  4002d4:	400e1a00 	.word	0x400e1a00
  4002d8:	400e1c00 	.word	0x400e1c00
  4002dc:	40024000 	.word	0x40024000
  4002e0:	40028000 	.word	0x40028000
  4002e4:	4002c000 	.word	0x4002c000
  4002e8:	400e0800 	.word	0x400e0800
  4002ec:	400e0a00 	.word	0x400e0a00
  4002f0:	00400dbd 	.word	0x00400dbd

004002f4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4002f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4002f8:	b980      	cbnz	r0, 40031c <_read+0x28>
  4002fa:	460c      	mov	r4, r1
  4002fc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4002fe:	2a00      	cmp	r2, #0
  400300:	dd0f      	ble.n	400322 <_read+0x2e>
  400302:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400304:	4e08      	ldr	r6, [pc, #32]	; (400328 <_read+0x34>)
  400306:	4d09      	ldr	r5, [pc, #36]	; (40032c <_read+0x38>)
  400308:	6830      	ldr	r0, [r6, #0]
  40030a:	4621      	mov	r1, r4
  40030c:	682b      	ldr	r3, [r5, #0]
  40030e:	4798      	blx	r3
		ptr++;
  400310:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400312:	42bc      	cmp	r4, r7
  400314:	d1f8      	bne.n	400308 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400316:	4640      	mov	r0, r8
  400318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40031c:	f04f 38ff 	mov.w	r8, #4294967295
  400320:	e7f9      	b.n	400316 <_read+0x22>
	for (; len > 0; --len) {
  400322:	4680      	mov	r8, r0
  400324:	e7f7      	b.n	400316 <_read+0x22>
  400326:	bf00      	nop
  400328:	20400c24 	.word	0x20400c24
  40032c:	20400c1c 	.word	0x20400c1c

00400330 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400330:	3801      	subs	r0, #1
  400332:	2802      	cmp	r0, #2
  400334:	d815      	bhi.n	400362 <_write+0x32>
{
  400336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40033a:	460e      	mov	r6, r1
  40033c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40033e:	b19a      	cbz	r2, 400368 <_write+0x38>
  400340:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400342:	f8df 8038 	ldr.w	r8, [pc, #56]	; 40037c <_write+0x4c>
  400346:	4f0c      	ldr	r7, [pc, #48]	; (400378 <_write+0x48>)
  400348:	f8d8 0000 	ldr.w	r0, [r8]
  40034c:	f815 1b01 	ldrb.w	r1, [r5], #1
  400350:	683b      	ldr	r3, [r7, #0]
  400352:	4798      	blx	r3
  400354:	2800      	cmp	r0, #0
  400356:	db0a      	blt.n	40036e <_write+0x3e>
  400358:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40035a:	3c01      	subs	r4, #1
  40035c:	d1f4      	bne.n	400348 <_write+0x18>
  40035e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400362:	f04f 30ff 	mov.w	r0, #4294967295
  400366:	4770      	bx	lr
	for (; len != 0; --len) {
  400368:	4610      	mov	r0, r2
  40036a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40036e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400376:	bf00      	nop
  400378:	20400c20 	.word	0x20400c20
  40037c:	20400c24 	.word	0x20400c24

00400380 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400382:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400386:	4b5c      	ldr	r3, [pc, #368]	; (4004f8 <board_init+0x178>)
  400388:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40038a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40038e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400392:	4b5a      	ldr	r3, [pc, #360]	; (4004fc <board_init+0x17c>)
  400394:	2200      	movs	r2, #0
  400396:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40039a:	695a      	ldr	r2, [r3, #20]
  40039c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4003a0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4003a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4003a6:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4003aa:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4003ae:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4003b2:	f007 0007 	and.w	r0, r7, #7
  4003b6:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4003b8:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4003bc:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4003c0:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4003c4:	f3bf 8f4f 	dsb	sy
  4003c8:	f04f 34ff 	mov.w	r4, #4294967295
  4003cc:	fa04 fc00 	lsl.w	ip, r4, r0
  4003d0:	fa06 f000 	lsl.w	r0, r6, r0
  4003d4:	fa04 f40e 	lsl.w	r4, r4, lr
  4003d8:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4003dc:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4003de:	463a      	mov	r2, r7
  4003e0:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4003e2:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  4003e6:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  4003ea:	3a01      	subs	r2, #1
  4003ec:	4423      	add	r3, r4
  4003ee:	f1b2 3fff 	cmp.w	r2, #4294967295
  4003f2:	d1f6      	bne.n	4003e2 <board_init+0x62>
        } while(sets--);
  4003f4:	3e01      	subs	r6, #1
  4003f6:	4460      	add	r0, ip
  4003f8:	f1b6 3fff 	cmp.w	r6, #4294967295
  4003fc:	d1ef      	bne.n	4003de <board_init+0x5e>
  4003fe:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400402:	4b3e      	ldr	r3, [pc, #248]	; (4004fc <board_init+0x17c>)
  400404:	695a      	ldr	r2, [r3, #20]
  400406:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40040a:	615a      	str	r2, [r3, #20]
  40040c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400410:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400414:	4a3a      	ldr	r2, [pc, #232]	; (400500 <board_init+0x180>)
  400416:	493b      	ldr	r1, [pc, #236]	; (400504 <board_init+0x184>)
  400418:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40041a:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  40041e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400420:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400424:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400428:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  40042c:	f022 0201 	bic.w	r2, r2, #1
  400430:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400434:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400438:	f022 0201 	bic.w	r2, r2, #1
  40043c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400440:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400444:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400448:	200a      	movs	r0, #10
  40044a:	4c2f      	ldr	r4, [pc, #188]	; (400508 <board_init+0x188>)
  40044c:	47a0      	blx	r4
  40044e:	200b      	movs	r0, #11
  400450:	47a0      	blx	r4
  400452:	200c      	movs	r0, #12
  400454:	47a0      	blx	r4
  400456:	2010      	movs	r0, #16
  400458:	47a0      	blx	r4
  40045a:	2011      	movs	r0, #17
  40045c:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40045e:	4b2b      	ldr	r3, [pc, #172]	; (40050c <board_init+0x18c>)
  400460:	f44f 7280 	mov.w	r2, #256	; 0x100
  400464:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400466:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40046a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40046c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400470:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400474:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400476:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40047a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40047c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400480:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400482:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400488:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40048a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40048e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400490:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400492:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400496:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400498:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40049c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4004a0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4004a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4004a8:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4004aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4004ae:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4004b0:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4004b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4004b6:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4004b8:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4004bc:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4004be:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4004c0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4004c4:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004c6:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4004c8:	4a11      	ldr	r2, [pc, #68]	; (400510 <board_init+0x190>)
  4004ca:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4004ce:	f043 0310 	orr.w	r3, r3, #16
  4004d2:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  4004d6:	4b0f      	ldr	r3, [pc, #60]	; (400514 <board_init+0x194>)
  4004d8:	2210      	movs	r2, #16
  4004da:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4004dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4004e0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4004e2:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4004e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4004e8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4004ea:	4311      	orrs	r1, r2
  4004ec:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4004ee:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4004f0:	4311      	orrs	r1, r2
  4004f2:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004f4:	605a      	str	r2, [r3, #4]
  4004f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4004f8:	400e1850 	.word	0x400e1850
  4004fc:	e000ed00 	.word	0xe000ed00
  400500:	400e0c00 	.word	0x400e0c00
  400504:	5a00080c 	.word	0x5a00080c
  400508:	00400c59 	.word	0x00400c59
  40050c:	400e1200 	.word	0x400e1200
  400510:	40088000 	.word	0x40088000
  400514:	400e1000 	.word	0x400e1000

00400518 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400518:	b570      	push	{r4, r5, r6, lr}
  40051a:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  40051c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  40051e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400520:	4013      	ands	r3, r2
  400522:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400524:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  400526:	4e1c      	ldr	r6, [pc, #112]	; (400598 <afec_process_callback+0x80>)
  400528:	4d1c      	ldr	r5, [pc, #112]	; (40059c <afec_process_callback+0x84>)
  40052a:	42a8      	cmp	r0, r5
  40052c:	bf14      	ite	ne
  40052e:	2000      	movne	r0, #0
  400530:	2001      	moveq	r0, #1
  400532:	0105      	lsls	r5, r0, #4
  400534:	e00b      	b.n	40054e <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400536:	2c0e      	cmp	r4, #14
  400538:	d81e      	bhi.n	400578 <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40053a:	9a01      	ldr	r2, [sp, #4]
  40053c:	f104 010c 	add.w	r1, r4, #12
  400540:	2301      	movs	r3, #1
  400542:	408b      	lsls	r3, r1
  400544:	4213      	tst	r3, r2
  400546:	d110      	bne.n	40056a <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400548:	3401      	adds	r4, #1
  40054a:	2c10      	cmp	r4, #16
  40054c:	d022      	beq.n	400594 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40054e:	2c0b      	cmp	r4, #11
  400550:	d8f1      	bhi.n	400536 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  400552:	9a01      	ldr	r2, [sp, #4]
  400554:	2301      	movs	r3, #1
  400556:	40a3      	lsls	r3, r4
  400558:	4213      	tst	r3, r2
  40055a:	d0f5      	beq.n	400548 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40055c:	192b      	adds	r3, r5, r4
  40055e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400562:	2b00      	cmp	r3, #0
  400564:	d0f0      	beq.n	400548 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400566:	4798      	blx	r3
  400568:	e7ee      	b.n	400548 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40056a:	192b      	adds	r3, r5, r4
  40056c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400570:	2b00      	cmp	r3, #0
  400572:	d0e9      	beq.n	400548 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400574:	4798      	blx	r3
  400576:	e7e7      	b.n	400548 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400578:	9a01      	ldr	r2, [sp, #4]
  40057a:	f104 010f 	add.w	r1, r4, #15
  40057e:	2301      	movs	r3, #1
  400580:	408b      	lsls	r3, r1
  400582:	4213      	tst	r3, r2
  400584:	d0e0      	beq.n	400548 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400586:	192b      	adds	r3, r5, r4
  400588:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40058c:	2b00      	cmp	r3, #0
  40058e:	d0db      	beq.n	400548 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400590:	4798      	blx	r3
  400592:	e7d9      	b.n	400548 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400594:	b002      	add	sp, #8
  400596:	bd70      	pop	{r4, r5, r6, pc}
  400598:	20400c28 	.word	0x20400c28
  40059c:	40064000 	.word	0x40064000

004005a0 <afec_ch_set_config>:
{
  4005a0:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  4005a2:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  4005a4:	2301      	movs	r3, #1
  4005a6:	408b      	lsls	r3, r1
  4005a8:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4005ac:	7815      	ldrb	r5, [r2, #0]
  4005ae:	2d00      	cmp	r5, #0
  4005b0:	bf08      	it	eq
  4005b2:	2300      	moveq	r3, #0
  4005b4:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  4005b6:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  4005b8:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  4005ba:	004b      	lsls	r3, r1, #1
  4005bc:	2103      	movs	r1, #3
  4005be:	4099      	lsls	r1, r3
  4005c0:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  4005c4:	7851      	ldrb	r1, [r2, #1]
  4005c6:	4099      	lsls	r1, r3
  4005c8:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  4005ca:	6541      	str	r1, [r0, #84]	; 0x54
}
  4005cc:	bc30      	pop	{r4, r5}
  4005ce:	4770      	bx	lr

004005d0 <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  4005d0:	784b      	ldrb	r3, [r1, #1]
  4005d2:	780a      	ldrb	r2, [r1, #0]
  4005d4:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  4005d6:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  4005d8:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  4005da:	884b      	ldrh	r3, [r1, #2]
  4005dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4005e0:	6743      	str	r3, [r0, #116]	; 0x74
  4005e2:	4770      	bx	lr

004005e4 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  4005e4:	2200      	movs	r2, #0
  4005e6:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  4005e8:	4b08      	ldr	r3, [pc, #32]	; (40060c <afec_get_config_defaults+0x28>)
  4005ea:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  4005ec:	4b08      	ldr	r3, [pc, #32]	; (400610 <afec_get_config_defaults+0x2c>)
  4005ee:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  4005f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  4005f4:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  4005f6:	2302      	movs	r3, #2
  4005f8:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  4005fa:	2301      	movs	r3, #1
  4005fc:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  4005fe:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400600:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400602:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400604:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  400606:	7583      	strb	r3, [r0, #22]
  400608:	4770      	bx	lr
  40060a:	bf00      	nop
  40060c:	11e1a300 	.word	0x11e1a300
  400610:	005b8d80 	.word	0x005b8d80

00400614 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400614:	2300      	movs	r3, #0
  400616:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400618:	2301      	movs	r3, #1
  40061a:	7043      	strb	r3, [r0, #1]
  40061c:	4770      	bx	lr

0040061e <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  40061e:	2300      	movs	r3, #0
  400620:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  400622:	2320      	movs	r3, #32
  400624:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  400626:	23ff      	movs	r3, #255	; 0xff
  400628:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  40062a:	f640 73ff 	movw	r3, #4095	; 0xfff
  40062e:	8083      	strh	r3, [r0, #4]
  400630:	4770      	bx	lr
	...

00400634 <afec_init>:
	return afec->AFEC_ISR;
  400634:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400636:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  40063a:	d001      	beq.n	400640 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  40063c:	2019      	movs	r0, #25
  40063e:	4770      	bx	lr
{
  400640:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  400642:	2301      	movs	r3, #1
  400644:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400646:	7ccb      	ldrb	r3, [r1, #19]
  400648:	2b00      	cmp	r3, #0
  40064a:	bf18      	it	ne
  40064c:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  400650:	684b      	ldr	r3, [r1, #4]
  400652:	688c      	ldr	r4, [r1, #8]
  400654:	fbb3 f3f4 	udiv	r3, r3, r4
  400658:	3b01      	subs	r3, #1
  40065a:	021b      	lsls	r3, r3, #8
  40065c:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40065e:	68cc      	ldr	r4, [r1, #12]
  400660:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  400664:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  400666:	7c0c      	ldrb	r4, [r1, #16]
  400668:	0624      	lsls	r4, r4, #24
  40066a:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40066e:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  400670:	7c4c      	ldrb	r4, [r1, #17]
  400672:	0724      	lsls	r4, r4, #28
  400674:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400678:	4323      	orrs	r3, r4
  40067a:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  40067c:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40067e:	7d0b      	ldrb	r3, [r1, #20]
  400680:	2b00      	cmp	r3, #0
  400682:	bf14      	ite	ne
  400684:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  400688:	2300      	moveq	r3, #0
  40068a:	680a      	ldr	r2, [r1, #0]
  40068c:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  40068e:	7d4a      	ldrb	r2, [r1, #21]
  400690:	2a00      	cmp	r2, #0
  400692:	bf14      	ite	ne
  400694:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  400698:	2200      	moveq	r2, #0
			(config->resolution) |
  40069a:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40069c:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  40069e:	7d8b      	ldrb	r3, [r1, #22]
  4006a0:	021b      	lsls	r3, r3, #8
  4006a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4006a6:	f043 030c 	orr.w	r3, r3, #12
  4006aa:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  4006ae:	4b0f      	ldr	r3, [pc, #60]	; (4006ec <afec_init+0xb8>)
  4006b0:	4298      	cmp	r0, r3
  4006b2:	d006      	beq.n	4006c2 <afec_init+0x8e>
	if(afec == AFEC1) {
  4006b4:	4b0e      	ldr	r3, [pc, #56]	; (4006f0 <afec_init+0xbc>)
  4006b6:	4298      	cmp	r0, r3
  4006b8:	d00d      	beq.n	4006d6 <afec_init+0xa2>
	return STATUS_OK;
  4006ba:	2000      	movs	r0, #0
}
  4006bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006c0:	4770      	bx	lr
  4006c2:	4b0c      	ldr	r3, [pc, #48]	; (4006f4 <afec_init+0xc0>)
  4006c4:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  4006c8:	2200      	movs	r2, #0
  4006ca:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4006ce:	428b      	cmp	r3, r1
  4006d0:	d1fb      	bne.n	4006ca <afec_init+0x96>
	return STATUS_OK;
  4006d2:	2000      	movs	r0, #0
  4006d4:	e7f2      	b.n	4006bc <afec_init+0x88>
  4006d6:	4b08      	ldr	r3, [pc, #32]	; (4006f8 <afec_init+0xc4>)
  4006d8:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  4006dc:	2200      	movs	r2, #0
  4006de:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4006e2:	428b      	cmp	r3, r1
  4006e4:	d1fb      	bne.n	4006de <afec_init+0xaa>
	return STATUS_OK;
  4006e6:	2000      	movs	r0, #0
  4006e8:	e7e8      	b.n	4006bc <afec_init+0x88>
  4006ea:	bf00      	nop
  4006ec:	4003c000 	.word	0x4003c000
  4006f0:	40064000 	.word	0x40064000
  4006f4:	20400c24 	.word	0x20400c24
  4006f8:	20400c68 	.word	0x20400c68

004006fc <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  4006fc:	4b0c      	ldr	r3, [pc, #48]	; (400730 <afec_enable_interrupt+0x34>)
  4006fe:	4299      	cmp	r1, r3
  400700:	d007      	beq.n	400712 <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400702:	290b      	cmp	r1, #11
  400704:	d80b      	bhi.n	40071e <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  400706:	d006      	beq.n	400716 <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  400708:	2301      	movs	r3, #1
  40070a:	fa03 f101 	lsl.w	r1, r3, r1
  40070e:	6241      	str	r1, [r0, #36]	; 0x24
  400710:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  400712:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  400714:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  400716:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40071a:	6243      	str	r3, [r0, #36]	; 0x24
  40071c:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  40071e:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400720:	bf94      	ite	ls
  400722:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  400724:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  400726:	2301      	movs	r3, #1
  400728:	fa03 f101 	lsl.w	r1, r3, r1
  40072c:	6241      	str	r1, [r0, #36]	; 0x24
  40072e:	4770      	bx	lr
  400730:	47000fff 	.word	0x47000fff

00400734 <afec_set_callback>:
{
  400734:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  400736:	4c11      	ldr	r4, [pc, #68]	; (40077c <afec_set_callback+0x48>)
  400738:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  40073a:	bf0c      	ite	eq
  40073c:	2410      	moveq	r4, #16
  40073e:	2400      	movne	r4, #0
  400740:	440c      	add	r4, r1
  400742:	4d0f      	ldr	r5, [pc, #60]	; (400780 <afec_set_callback+0x4c>)
  400744:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  400748:	d10a      	bne.n	400760 <afec_set_callback+0x2c>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40074a:	4a0e      	ldr	r2, [pc, #56]	; (400784 <afec_set_callback+0x50>)
  40074c:	f44f 7480 	mov.w	r4, #256	; 0x100
  400750:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400754:	015b      	lsls	r3, r3, #5
  400756:	b2db      	uxtb	r3, r3
  400758:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40075c:	6054      	str	r4, [r2, #4]
  40075e:	e009      	b.n	400774 <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400760:	4a08      	ldr	r2, [pc, #32]	; (400784 <afec_set_callback+0x50>)
  400762:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  400766:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40076a:	015b      	lsls	r3, r3, #5
  40076c:	b2db      	uxtb	r3, r3
  40076e:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400772:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  400774:	4b04      	ldr	r3, [pc, #16]	; (400788 <afec_set_callback+0x54>)
  400776:	4798      	blx	r3
  400778:	bd38      	pop	{r3, r4, r5, pc}
  40077a:	bf00      	nop
  40077c:	40064000 	.word	0x40064000
  400780:	20400c28 	.word	0x20400c28
  400784:	e000e100 	.word	0xe000e100
  400788:	004006fd 	.word	0x004006fd

0040078c <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  40078c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40078e:	4802      	ldr	r0, [pc, #8]	; (400798 <AFEC0_Handler+0xc>)
  400790:	4b02      	ldr	r3, [pc, #8]	; (40079c <AFEC0_Handler+0x10>)
  400792:	4798      	blx	r3
  400794:	bd08      	pop	{r3, pc}
  400796:	bf00      	nop
  400798:	4003c000 	.word	0x4003c000
  40079c:	00400519 	.word	0x00400519

004007a0 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4007a0:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  4007a2:	4802      	ldr	r0, [pc, #8]	; (4007ac <AFEC1_Handler+0xc>)
  4007a4:	4b02      	ldr	r3, [pc, #8]	; (4007b0 <AFEC1_Handler+0x10>)
  4007a6:	4798      	blx	r3
  4007a8:	bd08      	pop	{r3, pc}
  4007aa:	bf00      	nop
  4007ac:	40064000 	.word	0x40064000
  4007b0:	00400519 	.word	0x00400519

004007b4 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  4007b4:	b500      	push	{lr}
  4007b6:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4007b8:	4b13      	ldr	r3, [pc, #76]	; (400808 <afec_enable+0x54>)
  4007ba:	4298      	cmp	r0, r3
  4007bc:	bf0c      	ite	eq
  4007be:	2028      	moveq	r0, #40	; 0x28
  4007c0:	201d      	movne	r0, #29
  4007c2:	4b12      	ldr	r3, [pc, #72]	; (40080c <afec_enable+0x58>)
  4007c4:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4007c6:	4b12      	ldr	r3, [pc, #72]	; (400810 <afec_enable+0x5c>)
  4007c8:	789b      	ldrb	r3, [r3, #2]
  4007ca:	2bff      	cmp	r3, #255	; 0xff
  4007cc:	d01a      	beq.n	400804 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4007ce:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4007d2:	fab3 f383 	clz	r3, r3
  4007d6:	095b      	lsrs	r3, r3, #5
  4007d8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4007da:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4007dc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4007e0:	2200      	movs	r2, #0
  4007e2:	4b0c      	ldr	r3, [pc, #48]	; (400814 <afec_enable+0x60>)
  4007e4:	701a      	strb	r2, [r3, #0]
	return flags;
  4007e6:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4007e8:	4a09      	ldr	r2, [pc, #36]	; (400810 <afec_enable+0x5c>)
  4007ea:	7893      	ldrb	r3, [r2, #2]
  4007ec:	3301      	adds	r3, #1
  4007ee:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4007f0:	b129      	cbz	r1, 4007fe <afec_enable+0x4a>
		cpu_irq_enable();
  4007f2:	2201      	movs	r2, #1
  4007f4:	4b07      	ldr	r3, [pc, #28]	; (400814 <afec_enable+0x60>)
  4007f6:	701a      	strb	r2, [r3, #0]
  4007f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4007fc:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  4007fe:	b003      	add	sp, #12
  400800:	f85d fb04 	ldr.w	pc, [sp], #4
  400804:	e7fe      	b.n	400804 <afec_enable+0x50>
  400806:	bf00      	nop
  400808:	40064000 	.word	0x40064000
  40080c:	00400c59 	.word	0x00400c59
  400810:	20400c14 	.word	0x20400c14
  400814:	2040000a 	.word	0x2040000a

00400818 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400818:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  40081c:	0053      	lsls	r3, r2, #1
  40081e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400822:	fbb2 f2f3 	udiv	r2, r2, r3
  400826:	3a01      	subs	r2, #1
  400828:	f3c2 020d 	ubfx	r2, r2, #0, #14
  40082c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400830:	4770      	bx	lr

00400832 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400832:	6301      	str	r1, [r0, #48]	; 0x30
  400834:	4770      	bx	lr

00400836 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400836:	6341      	str	r1, [r0, #52]	; 0x34
  400838:	4770      	bx	lr

0040083a <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  40083a:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  40083e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400842:	d105      	bne.n	400850 <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  400844:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  400846:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  400848:	bf14      	ite	ne
  40084a:	2001      	movne	r0, #1
  40084c:	2000      	moveq	r0, #0
  40084e:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  400850:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  400852:	e7f8      	b.n	400846 <pio_get+0xc>

00400854 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400854:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400856:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40085a:	d03a      	beq.n	4008d2 <pio_set_peripheral+0x7e>
  40085c:	d813      	bhi.n	400886 <pio_set_peripheral+0x32>
  40085e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400862:	d025      	beq.n	4008b0 <pio_set_peripheral+0x5c>
  400864:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400868:	d10a      	bne.n	400880 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40086a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40086c:	4313      	orrs	r3, r2
  40086e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400870:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400872:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400874:	400b      	ands	r3, r1
  400876:	ea23 0302 	bic.w	r3, r3, r2
  40087a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40087c:	6042      	str	r2, [r0, #4]
  40087e:	4770      	bx	lr
	switch (ul_type) {
  400880:	2900      	cmp	r1, #0
  400882:	d1fb      	bne.n	40087c <pio_set_peripheral+0x28>
  400884:	4770      	bx	lr
  400886:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40088a:	d021      	beq.n	4008d0 <pio_set_peripheral+0x7c>
  40088c:	d809      	bhi.n	4008a2 <pio_set_peripheral+0x4e>
  40088e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400892:	d1f3      	bne.n	40087c <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400894:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400896:	4313      	orrs	r3, r2
  400898:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40089a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40089c:	4313      	orrs	r3, r2
  40089e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4008a0:	e7ec      	b.n	40087c <pio_set_peripheral+0x28>
	switch (ul_type) {
  4008a2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4008a6:	d013      	beq.n	4008d0 <pio_set_peripheral+0x7c>
  4008a8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4008ac:	d010      	beq.n	4008d0 <pio_set_peripheral+0x7c>
  4008ae:	e7e5      	b.n	40087c <pio_set_peripheral+0x28>
{
  4008b0:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4008b2:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4008b4:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4008b6:	43d3      	mvns	r3, r2
  4008b8:	4021      	ands	r1, r4
  4008ba:	461c      	mov	r4, r3
  4008bc:	4019      	ands	r1, r3
  4008be:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4008c0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4008c2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4008c4:	400b      	ands	r3, r1
  4008c6:	4023      	ands	r3, r4
  4008c8:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4008ca:	6042      	str	r2, [r0, #4]
}
  4008cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008d0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4008d2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4008d4:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4008d6:	400b      	ands	r3, r1
  4008d8:	ea23 0302 	bic.w	r3, r3, r2
  4008dc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4008de:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4008e0:	4313      	orrs	r3, r2
  4008e2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4008e4:	e7ca      	b.n	40087c <pio_set_peripheral+0x28>

004008e6 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4008e6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4008e8:	f012 0f01 	tst.w	r2, #1
  4008ec:	d10d      	bne.n	40090a <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4008ee:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4008f0:	f012 0f0a 	tst.w	r2, #10
  4008f4:	d00b      	beq.n	40090e <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4008f6:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4008f8:	f012 0f02 	tst.w	r2, #2
  4008fc:	d109      	bne.n	400912 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4008fe:	f012 0f08 	tst.w	r2, #8
  400902:	d008      	beq.n	400916 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400904:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400908:	e005      	b.n	400916 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  40090a:	6641      	str	r1, [r0, #100]	; 0x64
  40090c:	e7f0      	b.n	4008f0 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  40090e:	6241      	str	r1, [r0, #36]	; 0x24
  400910:	e7f2      	b.n	4008f8 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400912:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400916:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400918:	6001      	str	r1, [r0, #0]
  40091a:	4770      	bx	lr

0040091c <pio_set_output>:
{
  40091c:	b410      	push	{r4}
  40091e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400920:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400922:	b94c      	cbnz	r4, 400938 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400924:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400926:	b14b      	cbz	r3, 40093c <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400928:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40092a:	b94a      	cbnz	r2, 400940 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  40092c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40092e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400930:	6001      	str	r1, [r0, #0]
}
  400932:	f85d 4b04 	ldr.w	r4, [sp], #4
  400936:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400938:	6641      	str	r1, [r0, #100]	; 0x64
  40093a:	e7f4      	b.n	400926 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40093c:	6541      	str	r1, [r0, #84]	; 0x54
  40093e:	e7f4      	b.n	40092a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400940:	6301      	str	r1, [r0, #48]	; 0x30
  400942:	e7f4      	b.n	40092e <pio_set_output+0x12>

00400944 <pio_configure>:
{
  400944:	b570      	push	{r4, r5, r6, lr}
  400946:	b082      	sub	sp, #8
  400948:	4605      	mov	r5, r0
  40094a:	4616      	mov	r6, r2
  40094c:	461c      	mov	r4, r3
	switch (ul_type) {
  40094e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400952:	d014      	beq.n	40097e <pio_configure+0x3a>
  400954:	d90a      	bls.n	40096c <pio_configure+0x28>
  400956:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40095a:	d024      	beq.n	4009a6 <pio_configure+0x62>
  40095c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400960:	d021      	beq.n	4009a6 <pio_configure+0x62>
  400962:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400966:	d017      	beq.n	400998 <pio_configure+0x54>
		return 0;
  400968:	2000      	movs	r0, #0
  40096a:	e01a      	b.n	4009a2 <pio_configure+0x5e>
	switch (ul_type) {
  40096c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400970:	d005      	beq.n	40097e <pio_configure+0x3a>
  400972:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400976:	d002      	beq.n	40097e <pio_configure+0x3a>
  400978:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40097c:	d1f4      	bne.n	400968 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40097e:	4632      	mov	r2, r6
  400980:	4628      	mov	r0, r5
  400982:	4b11      	ldr	r3, [pc, #68]	; (4009c8 <pio_configure+0x84>)
  400984:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400986:	f014 0f01 	tst.w	r4, #1
  40098a:	d102      	bne.n	400992 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  40098c:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40098e:	2001      	movs	r0, #1
  400990:	e007      	b.n	4009a2 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400992:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400994:	2001      	movs	r0, #1
  400996:	e004      	b.n	4009a2 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400998:	461a      	mov	r2, r3
  40099a:	4631      	mov	r1, r6
  40099c:	4b0b      	ldr	r3, [pc, #44]	; (4009cc <pio_configure+0x88>)
  40099e:	4798      	blx	r3
	return 1;
  4009a0:	2001      	movs	r0, #1
}
  4009a2:	b002      	add	sp, #8
  4009a4:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4009a6:	f004 0301 	and.w	r3, r4, #1
  4009aa:	9300      	str	r3, [sp, #0]
  4009ac:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4009b0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4009b4:	bf14      	ite	ne
  4009b6:	2200      	movne	r2, #0
  4009b8:	2201      	moveq	r2, #1
  4009ba:	4631      	mov	r1, r6
  4009bc:	4628      	mov	r0, r5
  4009be:	4c04      	ldr	r4, [pc, #16]	; (4009d0 <pio_configure+0x8c>)
  4009c0:	47a0      	blx	r4
	return 1;
  4009c2:	2001      	movs	r0, #1
		break;
  4009c4:	e7ed      	b.n	4009a2 <pio_configure+0x5e>
  4009c6:	bf00      	nop
  4009c8:	00400855 	.word	0x00400855
  4009cc:	004008e7 	.word	0x004008e7
  4009d0:	0040091d 	.word	0x0040091d

004009d4 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4009d4:	f012 0f10 	tst.w	r2, #16
  4009d8:	d012      	beq.n	400a00 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4009da:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4009de:	f012 0f20 	tst.w	r2, #32
  4009e2:	d007      	beq.n	4009f4 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4009e4:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  4009e8:	f012 0f40 	tst.w	r2, #64	; 0x40
  4009ec:	d005      	beq.n	4009fa <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  4009ee:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4009f2:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  4009f4:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  4009f8:	e7f6      	b.n	4009e8 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  4009fa:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  4009fe:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400a00:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400a04:	4770      	bx	lr

00400a06 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400a06:	6401      	str	r1, [r0, #64]	; 0x40
  400a08:	4770      	bx	lr

00400a0a <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400a0a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400a0c:	4770      	bx	lr

00400a0e <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400a0e:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400a10:	4770      	bx	lr
	...

00400a14 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a18:	4604      	mov	r4, r0
  400a1a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400a1c:	4b0e      	ldr	r3, [pc, #56]	; (400a58 <pio_handler_process+0x44>)
  400a1e:	4798      	blx	r3
  400a20:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400a22:	4620      	mov	r0, r4
  400a24:	4b0d      	ldr	r3, [pc, #52]	; (400a5c <pio_handler_process+0x48>)
  400a26:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400a28:	4005      	ands	r5, r0
  400a2a:	d013      	beq.n	400a54 <pio_handler_process+0x40>
  400a2c:	4c0c      	ldr	r4, [pc, #48]	; (400a60 <pio_handler_process+0x4c>)
  400a2e:	f104 07b0 	add.w	r7, r4, #176	; 0xb0
  400a32:	e003      	b.n	400a3c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400a34:	42bc      	cmp	r4, r7
  400a36:	d00d      	beq.n	400a54 <pio_handler_process+0x40>
  400a38:	3410      	adds	r4, #16
		while (status != 0) {
  400a3a:	b15d      	cbz	r5, 400a54 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400a3c:	6820      	ldr	r0, [r4, #0]
  400a3e:	4540      	cmp	r0, r8
  400a40:	d1f8      	bne.n	400a34 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400a42:	6861      	ldr	r1, [r4, #4]
  400a44:	4229      	tst	r1, r5
  400a46:	d0f5      	beq.n	400a34 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400a48:	68e3      	ldr	r3, [r4, #12]
  400a4a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400a4c:	6863      	ldr	r3, [r4, #4]
  400a4e:	ea25 0503 	bic.w	r5, r5, r3
  400a52:	e7ef      	b.n	400a34 <pio_handler_process+0x20>
  400a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a58:	00400a0b 	.word	0x00400a0b
  400a5c:	00400a0f 	.word	0x00400a0f
  400a60:	204009dc 	.word	0x204009dc

00400a64 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400a66:	4c18      	ldr	r4, [pc, #96]	; (400ac8 <pio_handler_set+0x64>)
  400a68:	6826      	ldr	r6, [r4, #0]
  400a6a:	2e0b      	cmp	r6, #11
  400a6c:	d82a      	bhi.n	400ac4 <pio_handler_set+0x60>
  400a6e:	f04f 0c00 	mov.w	ip, #0
  400a72:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400a74:	4f15      	ldr	r7, [pc, #84]	; (400acc <pio_handler_set+0x68>)
  400a76:	e004      	b.n	400a82 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400a78:	3401      	adds	r4, #1
  400a7a:	b2e4      	uxtb	r4, r4
  400a7c:	46a4      	mov	ip, r4
  400a7e:	42a6      	cmp	r6, r4
  400a80:	d309      	bcc.n	400a96 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400a82:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400a84:	0125      	lsls	r5, r4, #4
  400a86:	597d      	ldr	r5, [r7, r5]
  400a88:	428d      	cmp	r5, r1
  400a8a:	d1f5      	bne.n	400a78 <pio_handler_set+0x14>
  400a8c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400a90:	686d      	ldr	r5, [r5, #4]
  400a92:	4295      	cmp	r5, r2
  400a94:	d1f0      	bne.n	400a78 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400a96:	4d0d      	ldr	r5, [pc, #52]	; (400acc <pio_handler_set+0x68>)
  400a98:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400a9c:	eb05 040e 	add.w	r4, r5, lr
  400aa0:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400aa4:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400aa6:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400aa8:	9906      	ldr	r1, [sp, #24]
  400aaa:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400aac:	3601      	adds	r6, #1
  400aae:	4566      	cmp	r6, ip
  400ab0:	d005      	beq.n	400abe <pio_handler_set+0x5a>
  400ab2:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400ab4:	461a      	mov	r2, r3
  400ab6:	4b06      	ldr	r3, [pc, #24]	; (400ad0 <pio_handler_set+0x6c>)
  400ab8:	4798      	blx	r3

	return 0;
  400aba:	2000      	movs	r0, #0
  400abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400abe:	4902      	ldr	r1, [pc, #8]	; (400ac8 <pio_handler_set+0x64>)
  400ac0:	600e      	str	r6, [r1, #0]
  400ac2:	e7f6      	b.n	400ab2 <pio_handler_set+0x4e>
		return 1;
  400ac4:	2001      	movs	r0, #1
}
  400ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ac8:	20400a9c 	.word	0x20400a9c
  400acc:	204009dc 	.word	0x204009dc
  400ad0:	004009d5 	.word	0x004009d5

00400ad4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400ad4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400ad6:	210a      	movs	r1, #10
  400ad8:	4801      	ldr	r0, [pc, #4]	; (400ae0 <PIOA_Handler+0xc>)
  400ada:	4b02      	ldr	r3, [pc, #8]	; (400ae4 <PIOA_Handler+0x10>)
  400adc:	4798      	blx	r3
  400ade:	bd08      	pop	{r3, pc}
  400ae0:	400e0e00 	.word	0x400e0e00
  400ae4:	00400a15 	.word	0x00400a15

00400ae8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400ae8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400aea:	210b      	movs	r1, #11
  400aec:	4801      	ldr	r0, [pc, #4]	; (400af4 <PIOB_Handler+0xc>)
  400aee:	4b02      	ldr	r3, [pc, #8]	; (400af8 <PIOB_Handler+0x10>)
  400af0:	4798      	blx	r3
  400af2:	bd08      	pop	{r3, pc}
  400af4:	400e1000 	.word	0x400e1000
  400af8:	00400a15 	.word	0x00400a15

00400afc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400afc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400afe:	210c      	movs	r1, #12
  400b00:	4801      	ldr	r0, [pc, #4]	; (400b08 <PIOC_Handler+0xc>)
  400b02:	4b02      	ldr	r3, [pc, #8]	; (400b0c <PIOC_Handler+0x10>)
  400b04:	4798      	blx	r3
  400b06:	bd08      	pop	{r3, pc}
  400b08:	400e1200 	.word	0x400e1200
  400b0c:	00400a15 	.word	0x00400a15

00400b10 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400b10:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400b12:	2110      	movs	r1, #16
  400b14:	4801      	ldr	r0, [pc, #4]	; (400b1c <PIOD_Handler+0xc>)
  400b16:	4b02      	ldr	r3, [pc, #8]	; (400b20 <PIOD_Handler+0x10>)
  400b18:	4798      	blx	r3
  400b1a:	bd08      	pop	{r3, pc}
  400b1c:	400e1400 	.word	0x400e1400
  400b20:	00400a15 	.word	0x00400a15

00400b24 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400b24:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400b26:	2111      	movs	r1, #17
  400b28:	4801      	ldr	r0, [pc, #4]	; (400b30 <PIOE_Handler+0xc>)
  400b2a:	4b02      	ldr	r3, [pc, #8]	; (400b34 <PIOE_Handler+0x10>)
  400b2c:	4798      	blx	r3
  400b2e:	bd08      	pop	{r3, pc}
  400b30:	400e1600 	.word	0x400e1600
  400b34:	00400a15 	.word	0x00400a15

00400b38 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400b38:	2803      	cmp	r0, #3
  400b3a:	d011      	beq.n	400b60 <pmc_mck_set_division+0x28>
  400b3c:	2804      	cmp	r0, #4
  400b3e:	d012      	beq.n	400b66 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400b40:	2802      	cmp	r0, #2
  400b42:	bf0c      	ite	eq
  400b44:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400b48:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400b4a:	4a08      	ldr	r2, [pc, #32]	; (400b6c <pmc_mck_set_division+0x34>)
  400b4c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400b52:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400b54:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400b56:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b58:	f013 0f08 	tst.w	r3, #8
  400b5c:	d0fb      	beq.n	400b56 <pmc_mck_set_division+0x1e>
}
  400b5e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400b60:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400b64:	e7f1      	b.n	400b4a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400b66:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400b6a:	e7ee      	b.n	400b4a <pmc_mck_set_division+0x12>
  400b6c:	400e0600 	.word	0x400e0600

00400b70 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400b70:	4a17      	ldr	r2, [pc, #92]	; (400bd0 <pmc_switch_mck_to_pllack+0x60>)
  400b72:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400b78:	4318      	orrs	r0, r3
  400b7a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b7c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b7e:	f013 0f08 	tst.w	r3, #8
  400b82:	d10a      	bne.n	400b9a <pmc_switch_mck_to_pllack+0x2a>
  400b84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400b88:	4911      	ldr	r1, [pc, #68]	; (400bd0 <pmc_switch_mck_to_pllack+0x60>)
  400b8a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400b8c:	f012 0f08 	tst.w	r2, #8
  400b90:	d103      	bne.n	400b9a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400b92:	3b01      	subs	r3, #1
  400b94:	d1f9      	bne.n	400b8a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400b96:	2001      	movs	r0, #1
  400b98:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400b9a:	4a0d      	ldr	r2, [pc, #52]	; (400bd0 <pmc_switch_mck_to_pllack+0x60>)
  400b9c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b9e:	f023 0303 	bic.w	r3, r3, #3
  400ba2:	f043 0302 	orr.w	r3, r3, #2
  400ba6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ba8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400baa:	f013 0f08 	tst.w	r3, #8
  400bae:	d10a      	bne.n	400bc6 <pmc_switch_mck_to_pllack+0x56>
  400bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400bb4:	4906      	ldr	r1, [pc, #24]	; (400bd0 <pmc_switch_mck_to_pllack+0x60>)
  400bb6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400bb8:	f012 0f08 	tst.w	r2, #8
  400bbc:	d105      	bne.n	400bca <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400bbe:	3b01      	subs	r3, #1
  400bc0:	d1f9      	bne.n	400bb6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400bc2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400bc4:	4770      	bx	lr
	return 0;
  400bc6:	2000      	movs	r0, #0
  400bc8:	4770      	bx	lr
  400bca:	2000      	movs	r0, #0
  400bcc:	4770      	bx	lr
  400bce:	bf00      	nop
  400bd0:	400e0600 	.word	0x400e0600

00400bd4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400bd4:	b9a0      	cbnz	r0, 400c00 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400bd6:	480e      	ldr	r0, [pc, #56]	; (400c10 <pmc_switch_mainck_to_xtal+0x3c>)
  400bd8:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400bda:	0209      	lsls	r1, r1, #8
  400bdc:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400bde:	4a0d      	ldr	r2, [pc, #52]	; (400c14 <pmc_switch_mainck_to_xtal+0x40>)
  400be0:	401a      	ands	r2, r3
  400be2:	4b0d      	ldr	r3, [pc, #52]	; (400c18 <pmc_switch_mainck_to_xtal+0x44>)
  400be4:	4313      	orrs	r3, r2
  400be6:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400be8:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400bea:	4602      	mov	r2, r0
  400bec:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400bee:	f013 0f01 	tst.w	r3, #1
  400bf2:	d0fb      	beq.n	400bec <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400bf4:	4a06      	ldr	r2, [pc, #24]	; (400c10 <pmc_switch_mainck_to_xtal+0x3c>)
  400bf6:	6a11      	ldr	r1, [r2, #32]
  400bf8:	4b08      	ldr	r3, [pc, #32]	; (400c1c <pmc_switch_mainck_to_xtal+0x48>)
  400bfa:	430b      	orrs	r3, r1
  400bfc:	6213      	str	r3, [r2, #32]
  400bfe:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400c00:	4903      	ldr	r1, [pc, #12]	; (400c10 <pmc_switch_mainck_to_xtal+0x3c>)
  400c02:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400c04:	4a06      	ldr	r2, [pc, #24]	; (400c20 <pmc_switch_mainck_to_xtal+0x4c>)
  400c06:	401a      	ands	r2, r3
  400c08:	4b06      	ldr	r3, [pc, #24]	; (400c24 <pmc_switch_mainck_to_xtal+0x50>)
  400c0a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400c0c:	620b      	str	r3, [r1, #32]
  400c0e:	4770      	bx	lr
  400c10:	400e0600 	.word	0x400e0600
  400c14:	ffc8fffc 	.word	0xffc8fffc
  400c18:	00370001 	.word	0x00370001
  400c1c:	01370000 	.word	0x01370000
  400c20:	fec8fffc 	.word	0xfec8fffc
  400c24:	01370002 	.word	0x01370002

00400c28 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400c28:	4b02      	ldr	r3, [pc, #8]	; (400c34 <pmc_osc_is_ready_mainck+0xc>)
  400c2a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400c2c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400c30:	4770      	bx	lr
  400c32:	bf00      	nop
  400c34:	400e0600 	.word	0x400e0600

00400c38 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400c38:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400c3c:	4b01      	ldr	r3, [pc, #4]	; (400c44 <pmc_disable_pllack+0xc>)
  400c3e:	629a      	str	r2, [r3, #40]	; 0x28
  400c40:	4770      	bx	lr
  400c42:	bf00      	nop
  400c44:	400e0600 	.word	0x400e0600

00400c48 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400c48:	4b02      	ldr	r3, [pc, #8]	; (400c54 <pmc_is_locked_pllack+0xc>)
  400c4a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400c4c:	f000 0002 	and.w	r0, r0, #2
  400c50:	4770      	bx	lr
  400c52:	bf00      	nop
  400c54:	400e0600 	.word	0x400e0600

00400c58 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400c58:	283f      	cmp	r0, #63	; 0x3f
  400c5a:	d81e      	bhi.n	400c9a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400c5c:	281f      	cmp	r0, #31
  400c5e:	d80c      	bhi.n	400c7a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400c60:	4b11      	ldr	r3, [pc, #68]	; (400ca8 <pmc_enable_periph_clk+0x50>)
  400c62:	699a      	ldr	r2, [r3, #24]
  400c64:	2301      	movs	r3, #1
  400c66:	4083      	lsls	r3, r0
  400c68:	4393      	bics	r3, r2
  400c6a:	d018      	beq.n	400c9e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400c6c:	2301      	movs	r3, #1
  400c6e:	fa03 f000 	lsl.w	r0, r3, r0
  400c72:	4b0d      	ldr	r3, [pc, #52]	; (400ca8 <pmc_enable_periph_clk+0x50>)
  400c74:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400c76:	2000      	movs	r0, #0
  400c78:	4770      	bx	lr
		ul_id -= 32;
  400c7a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400c7c:	4b0a      	ldr	r3, [pc, #40]	; (400ca8 <pmc_enable_periph_clk+0x50>)
  400c7e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400c82:	2301      	movs	r3, #1
  400c84:	4083      	lsls	r3, r0
  400c86:	4393      	bics	r3, r2
  400c88:	d00b      	beq.n	400ca2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400c8a:	2301      	movs	r3, #1
  400c8c:	fa03 f000 	lsl.w	r0, r3, r0
  400c90:	4b05      	ldr	r3, [pc, #20]	; (400ca8 <pmc_enable_periph_clk+0x50>)
  400c92:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400c96:	2000      	movs	r0, #0
  400c98:	4770      	bx	lr
		return 1;
  400c9a:	2001      	movs	r0, #1
  400c9c:	4770      	bx	lr
	return 0;
  400c9e:	2000      	movs	r0, #0
  400ca0:	4770      	bx	lr
  400ca2:	2000      	movs	r0, #0
}
  400ca4:	4770      	bx	lr
  400ca6:	bf00      	nop
  400ca8:	400e0600 	.word	0x400e0600

00400cac <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400cac:	6943      	ldr	r3, [r0, #20]
  400cae:	f013 0f02 	tst.w	r3, #2
  400cb2:	d002      	beq.n	400cba <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400cb4:	61c1      	str	r1, [r0, #28]
	return 0;
  400cb6:	2000      	movs	r0, #0
  400cb8:	4770      	bx	lr
		return 1;
  400cba:	2001      	movs	r0, #1
}
  400cbc:	4770      	bx	lr

00400cbe <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400cbe:	6943      	ldr	r3, [r0, #20]
  400cc0:	f013 0f01 	tst.w	r3, #1
  400cc4:	d003      	beq.n	400cce <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400cc6:	6983      	ldr	r3, [r0, #24]
  400cc8:	700b      	strb	r3, [r1, #0]
	return 0;
  400cca:	2000      	movs	r0, #0
  400ccc:	4770      	bx	lr
		return 1;
  400cce:	2001      	movs	r0, #1
}
  400cd0:	4770      	bx	lr

00400cd2 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400cd2:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400cd4:	010b      	lsls	r3, r1, #4
  400cd6:	4293      	cmp	r3, r2
  400cd8:	d914      	bls.n	400d04 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400cda:	00c9      	lsls	r1, r1, #3
  400cdc:	084b      	lsrs	r3, r1, #1
  400cde:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400ce2:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400ce6:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400ce8:	1e5c      	subs	r4, r3, #1
  400cea:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400cee:	428c      	cmp	r4, r1
  400cf0:	d901      	bls.n	400cf6 <usart_set_async_baudrate+0x24>
		return 1;
  400cf2:	2001      	movs	r0, #1
  400cf4:	e017      	b.n	400d26 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400cf6:	6841      	ldr	r1, [r0, #4]
  400cf8:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400cfc:	6041      	str	r1, [r0, #4]
  400cfe:	e00c      	b.n	400d1a <usart_set_async_baudrate+0x48>
		return 1;
  400d00:	2001      	movs	r0, #1
  400d02:	e010      	b.n	400d26 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400d04:	0859      	lsrs	r1, r3, #1
  400d06:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400d0a:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400d0e:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400d10:	1e5c      	subs	r4, r3, #1
  400d12:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400d16:	428c      	cmp	r4, r1
  400d18:	d8f2      	bhi.n	400d00 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400d1a:	0412      	lsls	r2, r2, #16
  400d1c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400d20:	431a      	orrs	r2, r3
  400d22:	6202      	str	r2, [r0, #32]

	return 0;
  400d24:	2000      	movs	r0, #0
}
  400d26:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d2a:	4770      	bx	lr

00400d2c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400d2c:	4b08      	ldr	r3, [pc, #32]	; (400d50 <usart_reset+0x24>)
  400d2e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400d32:	2300      	movs	r3, #0
  400d34:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400d36:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400d38:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400d3a:	2388      	movs	r3, #136	; 0x88
  400d3c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400d3e:	2324      	movs	r3, #36	; 0x24
  400d40:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400d42:	f44f 7380 	mov.w	r3, #256	; 0x100
  400d46:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400d48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400d4c:	6003      	str	r3, [r0, #0]
  400d4e:	4770      	bx	lr
  400d50:	55534100 	.word	0x55534100

00400d54 <usart_init_rs232>:
{
  400d54:	b570      	push	{r4, r5, r6, lr}
  400d56:	4605      	mov	r5, r0
  400d58:	460c      	mov	r4, r1
  400d5a:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400d5c:	4b0f      	ldr	r3, [pc, #60]	; (400d9c <usart_init_rs232+0x48>)
  400d5e:	4798      	blx	r3
	ul_reg_val = 0;
  400d60:	2200      	movs	r2, #0
  400d62:	4b0f      	ldr	r3, [pc, #60]	; (400da0 <usart_init_rs232+0x4c>)
  400d64:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400d66:	b1a4      	cbz	r4, 400d92 <usart_init_rs232+0x3e>
  400d68:	4632      	mov	r2, r6
  400d6a:	6821      	ldr	r1, [r4, #0]
  400d6c:	4628      	mov	r0, r5
  400d6e:	4b0d      	ldr	r3, [pc, #52]	; (400da4 <usart_init_rs232+0x50>)
  400d70:	4798      	blx	r3
  400d72:	4602      	mov	r2, r0
  400d74:	b978      	cbnz	r0, 400d96 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400d76:	6863      	ldr	r3, [r4, #4]
  400d78:	68a1      	ldr	r1, [r4, #8]
  400d7a:	430b      	orrs	r3, r1
  400d7c:	6921      	ldr	r1, [r4, #16]
  400d7e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400d80:	68e1      	ldr	r1, [r4, #12]
  400d82:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400d84:	4906      	ldr	r1, [pc, #24]	; (400da0 <usart_init_rs232+0x4c>)
  400d86:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400d88:	6869      	ldr	r1, [r5, #4]
  400d8a:	430b      	orrs	r3, r1
  400d8c:	606b      	str	r3, [r5, #4]
}
  400d8e:	4610      	mov	r0, r2
  400d90:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400d92:	2201      	movs	r2, #1
  400d94:	e7fb      	b.n	400d8e <usart_init_rs232+0x3a>
  400d96:	2201      	movs	r2, #1
  400d98:	e7f9      	b.n	400d8e <usart_init_rs232+0x3a>
  400d9a:	bf00      	nop
  400d9c:	00400d2d 	.word	0x00400d2d
  400da0:	20400aa0 	.word	0x20400aa0
  400da4:	00400cd3 	.word	0x00400cd3

00400da8 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400da8:	2340      	movs	r3, #64	; 0x40
  400daa:	6003      	str	r3, [r0, #0]
  400dac:	4770      	bx	lr

00400dae <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400dae:	2310      	movs	r3, #16
  400db0:	6003      	str	r3, [r0, #0]
  400db2:	4770      	bx	lr

00400db4 <usart_is_tx_ready>:
	return (p_usart->US_CSR & US_CSR_TXRDY) > 0;
  400db4:	6940      	ldr	r0, [r0, #20]
}
  400db6:	f3c0 0040 	ubfx	r0, r0, #1, #1
  400dba:	4770      	bx	lr

00400dbc <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400dbc:	6943      	ldr	r3, [r0, #20]
  400dbe:	f013 0f02 	tst.w	r3, #2
  400dc2:	d004      	beq.n	400dce <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400dc4:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400dc8:	61c1      	str	r1, [r0, #28]
	return 0;
  400dca:	2000      	movs	r0, #0
  400dcc:	4770      	bx	lr
		return 1;
  400dce:	2001      	movs	r0, #1
}
  400dd0:	4770      	bx	lr

00400dd2 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400dd2:	6943      	ldr	r3, [r0, #20]
  400dd4:	f013 0f01 	tst.w	r3, #1
  400dd8:	d005      	beq.n	400de6 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400dda:	6983      	ldr	r3, [r0, #24]
  400ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400de0:	600b      	str	r3, [r1, #0]
	return 0;
  400de2:	2000      	movs	r0, #0
  400de4:	4770      	bx	lr
		return 1;
  400de6:	2001      	movs	r0, #1
}
  400de8:	4770      	bx	lr

00400dea <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400dea:	e7fe      	b.n	400dea <Dummy_Handler>

00400dec <Reset_Handler>:
{
  400dec:	b500      	push	{lr}
  400dee:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400df0:	4b25      	ldr	r3, [pc, #148]	; (400e88 <Reset_Handler+0x9c>)
  400df2:	4a26      	ldr	r2, [pc, #152]	; (400e8c <Reset_Handler+0xa0>)
  400df4:	429a      	cmp	r2, r3
  400df6:	d010      	beq.n	400e1a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400df8:	4b25      	ldr	r3, [pc, #148]	; (400e90 <Reset_Handler+0xa4>)
  400dfa:	4a23      	ldr	r2, [pc, #140]	; (400e88 <Reset_Handler+0x9c>)
  400dfc:	429a      	cmp	r2, r3
  400dfe:	d20c      	bcs.n	400e1a <Reset_Handler+0x2e>
  400e00:	3b01      	subs	r3, #1
  400e02:	1a9b      	subs	r3, r3, r2
  400e04:	f023 0303 	bic.w	r3, r3, #3
  400e08:	3304      	adds	r3, #4
  400e0a:	4413      	add	r3, r2
  400e0c:	491f      	ldr	r1, [pc, #124]	; (400e8c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400e0e:	f851 0b04 	ldr.w	r0, [r1], #4
  400e12:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400e16:	429a      	cmp	r2, r3
  400e18:	d1f9      	bne.n	400e0e <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400e1a:	4b1e      	ldr	r3, [pc, #120]	; (400e94 <Reset_Handler+0xa8>)
  400e1c:	4a1e      	ldr	r2, [pc, #120]	; (400e98 <Reset_Handler+0xac>)
  400e1e:	429a      	cmp	r2, r3
  400e20:	d20a      	bcs.n	400e38 <Reset_Handler+0x4c>
  400e22:	3b01      	subs	r3, #1
  400e24:	1a9b      	subs	r3, r3, r2
  400e26:	f023 0303 	bic.w	r3, r3, #3
  400e2a:	3304      	adds	r3, #4
  400e2c:	4413      	add	r3, r2
                *pDest++ = 0;
  400e2e:	2100      	movs	r1, #0
  400e30:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400e34:	4293      	cmp	r3, r2
  400e36:	d1fb      	bne.n	400e30 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400e38:	4a18      	ldr	r2, [pc, #96]	; (400e9c <Reset_Handler+0xb0>)
  400e3a:	4b19      	ldr	r3, [pc, #100]	; (400ea0 <Reset_Handler+0xb4>)
  400e3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400e40:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400e42:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400e46:	fab3 f383 	clz	r3, r3
  400e4a:	095b      	lsrs	r3, r3, #5
  400e4c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400e4e:	b672      	cpsid	i
  400e50:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400e54:	2200      	movs	r2, #0
  400e56:	4b13      	ldr	r3, [pc, #76]	; (400ea4 <Reset_Handler+0xb8>)
  400e58:	701a      	strb	r2, [r3, #0]
	return flags;
  400e5a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400e5c:	4a12      	ldr	r2, [pc, #72]	; (400ea8 <Reset_Handler+0xbc>)
  400e5e:	6813      	ldr	r3, [r2, #0]
  400e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400e64:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400e66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400e6a:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400e6e:	b129      	cbz	r1, 400e7c <Reset_Handler+0x90>
		cpu_irq_enable();
  400e70:	2201      	movs	r2, #1
  400e72:	4b0c      	ldr	r3, [pc, #48]	; (400ea4 <Reset_Handler+0xb8>)
  400e74:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400e76:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400e7a:	b662      	cpsie	i
        __libc_init_array();
  400e7c:	4b0b      	ldr	r3, [pc, #44]	; (400eac <Reset_Handler+0xc0>)
  400e7e:	4798      	blx	r3
        main();
  400e80:	4b0b      	ldr	r3, [pc, #44]	; (400eb0 <Reset_Handler+0xc4>)
  400e82:	4798      	blx	r3
  400e84:	e7fe      	b.n	400e84 <Reset_Handler+0x98>
  400e86:	bf00      	nop
  400e88:	20400000 	.word	0x20400000
  400e8c:	004066d0 	.word	0x004066d0
  400e90:	204009c0 	.word	0x204009c0
  400e94:	20400d18 	.word	0x20400d18
  400e98:	204009c0 	.word	0x204009c0
  400e9c:	e000ed00 	.word	0xe000ed00
  400ea0:	00400000 	.word	0x00400000
  400ea4:	2040000a 	.word	0x2040000a
  400ea8:	e000ed88 	.word	0xe000ed88
  400eac:	0040376d 	.word	0x0040376d
  400eb0:	00403325 	.word	0x00403325

00400eb4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400eb4:	4b3b      	ldr	r3, [pc, #236]	; (400fa4 <SystemCoreClockUpdate+0xf0>)
  400eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400eb8:	f003 0303 	and.w	r3, r3, #3
  400ebc:	2b01      	cmp	r3, #1
  400ebe:	d01d      	beq.n	400efc <SystemCoreClockUpdate+0x48>
  400ec0:	b183      	cbz	r3, 400ee4 <SystemCoreClockUpdate+0x30>
  400ec2:	2b02      	cmp	r3, #2
  400ec4:	d036      	beq.n	400f34 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400ec6:	4b37      	ldr	r3, [pc, #220]	; (400fa4 <SystemCoreClockUpdate+0xf0>)
  400ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400eca:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ece:	2b70      	cmp	r3, #112	; 0x70
  400ed0:	d05f      	beq.n	400f92 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400ed2:	4b34      	ldr	r3, [pc, #208]	; (400fa4 <SystemCoreClockUpdate+0xf0>)
  400ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400ed6:	4934      	ldr	r1, [pc, #208]	; (400fa8 <SystemCoreClockUpdate+0xf4>)
  400ed8:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400edc:	680b      	ldr	r3, [r1, #0]
  400ede:	40d3      	lsrs	r3, r2
  400ee0:	600b      	str	r3, [r1, #0]
  400ee2:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400ee4:	4b31      	ldr	r3, [pc, #196]	; (400fac <SystemCoreClockUpdate+0xf8>)
  400ee6:	695b      	ldr	r3, [r3, #20]
  400ee8:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400eec:	bf14      	ite	ne
  400eee:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400ef2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400ef6:	4b2c      	ldr	r3, [pc, #176]	; (400fa8 <SystemCoreClockUpdate+0xf4>)
  400ef8:	601a      	str	r2, [r3, #0]
  400efa:	e7e4      	b.n	400ec6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400efc:	4b29      	ldr	r3, [pc, #164]	; (400fa4 <SystemCoreClockUpdate+0xf0>)
  400efe:	6a1b      	ldr	r3, [r3, #32]
  400f00:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400f04:	d003      	beq.n	400f0e <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400f06:	4a2a      	ldr	r2, [pc, #168]	; (400fb0 <SystemCoreClockUpdate+0xfc>)
  400f08:	4b27      	ldr	r3, [pc, #156]	; (400fa8 <SystemCoreClockUpdate+0xf4>)
  400f0a:	601a      	str	r2, [r3, #0]
  400f0c:	e7db      	b.n	400ec6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400f0e:	4a29      	ldr	r2, [pc, #164]	; (400fb4 <SystemCoreClockUpdate+0x100>)
  400f10:	4b25      	ldr	r3, [pc, #148]	; (400fa8 <SystemCoreClockUpdate+0xf4>)
  400f12:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400f14:	4b23      	ldr	r3, [pc, #140]	; (400fa4 <SystemCoreClockUpdate+0xf0>)
  400f16:	6a1b      	ldr	r3, [r3, #32]
  400f18:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f1c:	2b10      	cmp	r3, #16
  400f1e:	d005      	beq.n	400f2c <SystemCoreClockUpdate+0x78>
  400f20:	2b20      	cmp	r3, #32
  400f22:	d1d0      	bne.n	400ec6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400f24:	4a22      	ldr	r2, [pc, #136]	; (400fb0 <SystemCoreClockUpdate+0xfc>)
  400f26:	4b20      	ldr	r3, [pc, #128]	; (400fa8 <SystemCoreClockUpdate+0xf4>)
  400f28:	601a      	str	r2, [r3, #0]
          break;
  400f2a:	e7cc      	b.n	400ec6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400f2c:	4a22      	ldr	r2, [pc, #136]	; (400fb8 <SystemCoreClockUpdate+0x104>)
  400f2e:	4b1e      	ldr	r3, [pc, #120]	; (400fa8 <SystemCoreClockUpdate+0xf4>)
  400f30:	601a      	str	r2, [r3, #0]
          break;
  400f32:	e7c8      	b.n	400ec6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400f34:	4b1b      	ldr	r3, [pc, #108]	; (400fa4 <SystemCoreClockUpdate+0xf0>)
  400f36:	6a1b      	ldr	r3, [r3, #32]
  400f38:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400f3c:	d016      	beq.n	400f6c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400f3e:	4a1c      	ldr	r2, [pc, #112]	; (400fb0 <SystemCoreClockUpdate+0xfc>)
  400f40:	4b19      	ldr	r3, [pc, #100]	; (400fa8 <SystemCoreClockUpdate+0xf4>)
  400f42:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400f44:	4b17      	ldr	r3, [pc, #92]	; (400fa4 <SystemCoreClockUpdate+0xf0>)
  400f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f48:	f003 0303 	and.w	r3, r3, #3
  400f4c:	2b02      	cmp	r3, #2
  400f4e:	d1ba      	bne.n	400ec6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400f50:	4a14      	ldr	r2, [pc, #80]	; (400fa4 <SystemCoreClockUpdate+0xf0>)
  400f52:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400f54:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400f56:	4814      	ldr	r0, [pc, #80]	; (400fa8 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400f58:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400f5c:	6803      	ldr	r3, [r0, #0]
  400f5e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400f62:	b2d2      	uxtb	r2, r2
  400f64:	fbb3 f3f2 	udiv	r3, r3, r2
  400f68:	6003      	str	r3, [r0, #0]
  400f6a:	e7ac      	b.n	400ec6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400f6c:	4a11      	ldr	r2, [pc, #68]	; (400fb4 <SystemCoreClockUpdate+0x100>)
  400f6e:	4b0e      	ldr	r3, [pc, #56]	; (400fa8 <SystemCoreClockUpdate+0xf4>)
  400f70:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400f72:	4b0c      	ldr	r3, [pc, #48]	; (400fa4 <SystemCoreClockUpdate+0xf0>)
  400f74:	6a1b      	ldr	r3, [r3, #32]
  400f76:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f7a:	2b10      	cmp	r3, #16
  400f7c:	d005      	beq.n	400f8a <SystemCoreClockUpdate+0xd6>
  400f7e:	2b20      	cmp	r3, #32
  400f80:	d1e0      	bne.n	400f44 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400f82:	4a0b      	ldr	r2, [pc, #44]	; (400fb0 <SystemCoreClockUpdate+0xfc>)
  400f84:	4b08      	ldr	r3, [pc, #32]	; (400fa8 <SystemCoreClockUpdate+0xf4>)
  400f86:	601a      	str	r2, [r3, #0]
          break;
  400f88:	e7dc      	b.n	400f44 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400f8a:	4a0b      	ldr	r2, [pc, #44]	; (400fb8 <SystemCoreClockUpdate+0x104>)
  400f8c:	4b06      	ldr	r3, [pc, #24]	; (400fa8 <SystemCoreClockUpdate+0xf4>)
  400f8e:	601a      	str	r2, [r3, #0]
          break;
  400f90:	e7d8      	b.n	400f44 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400f92:	4a05      	ldr	r2, [pc, #20]	; (400fa8 <SystemCoreClockUpdate+0xf4>)
  400f94:	6813      	ldr	r3, [r2, #0]
  400f96:	4909      	ldr	r1, [pc, #36]	; (400fbc <SystemCoreClockUpdate+0x108>)
  400f98:	fba1 1303 	umull	r1, r3, r1, r3
  400f9c:	085b      	lsrs	r3, r3, #1
  400f9e:	6013      	str	r3, [r2, #0]
  400fa0:	4770      	bx	lr
  400fa2:	bf00      	nop
  400fa4:	400e0600 	.word	0x400e0600
  400fa8:	2040000c 	.word	0x2040000c
  400fac:	400e1810 	.word	0x400e1810
  400fb0:	00b71b00 	.word	0x00b71b00
  400fb4:	003d0900 	.word	0x003d0900
  400fb8:	007a1200 	.word	0x007a1200
  400fbc:	aaaaaaab 	.word	0xaaaaaaab

00400fc0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400fc0:	4b16      	ldr	r3, [pc, #88]	; (40101c <system_init_flash+0x5c>)
  400fc2:	4298      	cmp	r0, r3
  400fc4:	d913      	bls.n	400fee <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400fc6:	4b16      	ldr	r3, [pc, #88]	; (401020 <system_init_flash+0x60>)
  400fc8:	4298      	cmp	r0, r3
  400fca:	d915      	bls.n	400ff8 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400fcc:	4b15      	ldr	r3, [pc, #84]	; (401024 <system_init_flash+0x64>)
  400fce:	4298      	cmp	r0, r3
  400fd0:	d916      	bls.n	401000 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400fd2:	4b15      	ldr	r3, [pc, #84]	; (401028 <system_init_flash+0x68>)
  400fd4:	4298      	cmp	r0, r3
  400fd6:	d917      	bls.n	401008 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400fd8:	4b14      	ldr	r3, [pc, #80]	; (40102c <system_init_flash+0x6c>)
  400fda:	4298      	cmp	r0, r3
  400fdc:	d918      	bls.n	401010 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400fde:	4b14      	ldr	r3, [pc, #80]	; (401030 <system_init_flash+0x70>)
  400fe0:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400fe2:	bf94      	ite	ls
  400fe4:	4a13      	ldrls	r2, [pc, #76]	; (401034 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400fe6:	4a14      	ldrhi	r2, [pc, #80]	; (401038 <system_init_flash+0x78>)
  400fe8:	4b14      	ldr	r3, [pc, #80]	; (40103c <system_init_flash+0x7c>)
  400fea:	601a      	str	r2, [r3, #0]
  400fec:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400fee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400ff2:	4b12      	ldr	r3, [pc, #72]	; (40103c <system_init_flash+0x7c>)
  400ff4:	601a      	str	r2, [r3, #0]
  400ff6:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ff8:	4a11      	ldr	r2, [pc, #68]	; (401040 <system_init_flash+0x80>)
  400ffa:	4b10      	ldr	r3, [pc, #64]	; (40103c <system_init_flash+0x7c>)
  400ffc:	601a      	str	r2, [r3, #0]
  400ffe:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401000:	4a10      	ldr	r2, [pc, #64]	; (401044 <system_init_flash+0x84>)
  401002:	4b0e      	ldr	r3, [pc, #56]	; (40103c <system_init_flash+0x7c>)
  401004:	601a      	str	r2, [r3, #0]
  401006:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401008:	4a0f      	ldr	r2, [pc, #60]	; (401048 <system_init_flash+0x88>)
  40100a:	4b0c      	ldr	r3, [pc, #48]	; (40103c <system_init_flash+0x7c>)
  40100c:	601a      	str	r2, [r3, #0]
  40100e:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401010:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401014:	4b09      	ldr	r3, [pc, #36]	; (40103c <system_init_flash+0x7c>)
  401016:	601a      	str	r2, [r3, #0]
  401018:	4770      	bx	lr
  40101a:	bf00      	nop
  40101c:	015ef3bf 	.word	0x015ef3bf
  401020:	02bde77f 	.word	0x02bde77f
  401024:	041cdb3f 	.word	0x041cdb3f
  401028:	057bceff 	.word	0x057bceff
  40102c:	06dac2bf 	.word	0x06dac2bf
  401030:	0839b67f 	.word	0x0839b67f
  401034:	04000500 	.word	0x04000500
  401038:	04000600 	.word	0x04000600
  40103c:	400e0c00 	.word	0x400e0c00
  401040:	04000100 	.word	0x04000100
  401044:	04000200 	.word	0x04000200
  401048:	04000300 	.word	0x04000300

0040104c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  40104c:	4b0a      	ldr	r3, [pc, #40]	; (401078 <_sbrk+0x2c>)
  40104e:	681b      	ldr	r3, [r3, #0]
  401050:	b153      	cbz	r3, 401068 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401052:	4b09      	ldr	r3, [pc, #36]	; (401078 <_sbrk+0x2c>)
  401054:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401056:	181a      	adds	r2, r3, r0
  401058:	4908      	ldr	r1, [pc, #32]	; (40107c <_sbrk+0x30>)
  40105a:	4291      	cmp	r1, r2
  40105c:	db08      	blt.n	401070 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40105e:	4610      	mov	r0, r2
  401060:	4a05      	ldr	r2, [pc, #20]	; (401078 <_sbrk+0x2c>)
  401062:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401064:	4618      	mov	r0, r3
  401066:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401068:	4a05      	ldr	r2, [pc, #20]	; (401080 <_sbrk+0x34>)
  40106a:	4b03      	ldr	r3, [pc, #12]	; (401078 <_sbrk+0x2c>)
  40106c:	601a      	str	r2, [r3, #0]
  40106e:	e7f0      	b.n	401052 <_sbrk+0x6>
		return (caddr_t) -1;	
  401070:	f04f 30ff 	mov.w	r0, #4294967295
}
  401074:	4770      	bx	lr
  401076:	bf00      	nop
  401078:	20400aa4 	.word	0x20400aa4
  40107c:	2045fffc 	.word	0x2045fffc
  401080:	20402f18 	.word	0x20402f18

00401084 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401084:	f04f 30ff 	mov.w	r0, #4294967295
  401088:	4770      	bx	lr

0040108a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40108a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40108e:	604b      	str	r3, [r1, #4]

	return 0;
}
  401090:	2000      	movs	r0, #0
  401092:	4770      	bx	lr

00401094 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401094:	2001      	movs	r0, #1
  401096:	4770      	bx	lr

00401098 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401098:	2000      	movs	r0, #0
  40109a:	4770      	bx	lr

0040109c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40109c:	f100 0308 	add.w	r3, r0, #8
  4010a0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  4010a2:	f04f 32ff 	mov.w	r2, #4294967295
  4010a6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4010a8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4010aa:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  4010ac:	2300      	movs	r3, #0
  4010ae:	6003      	str	r3, [r0, #0]
  4010b0:	4770      	bx	lr

004010b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  4010b2:	2300      	movs	r3, #0
  4010b4:	6103      	str	r3, [r0, #16]
  4010b6:	4770      	bx	lr

004010b8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  4010b8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  4010ba:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  4010bc:	689a      	ldr	r2, [r3, #8]
  4010be:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  4010c0:	689a      	ldr	r2, [r3, #8]
  4010c2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  4010c4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4010c6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4010c8:	6803      	ldr	r3, [r0, #0]
  4010ca:	3301      	adds	r3, #1
  4010cc:	6003      	str	r3, [r0, #0]
  4010ce:	4770      	bx	lr

004010d0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  4010d0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4010d2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4010d4:	f1b5 3fff 	cmp.w	r5, #4294967295
  4010d8:	d002      	beq.n	4010e0 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4010da:	f100 0208 	add.w	r2, r0, #8
  4010de:	e002      	b.n	4010e6 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4010e0:	6902      	ldr	r2, [r0, #16]
  4010e2:	e004      	b.n	4010ee <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4010e4:	461a      	mov	r2, r3
  4010e6:	6853      	ldr	r3, [r2, #4]
  4010e8:	681c      	ldr	r4, [r3, #0]
  4010ea:	42a5      	cmp	r5, r4
  4010ec:	d2fa      	bcs.n	4010e4 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4010ee:	6853      	ldr	r3, [r2, #4]
  4010f0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4010f2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4010f4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4010f6:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4010f8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4010fa:	6803      	ldr	r3, [r0, #0]
  4010fc:	3301      	adds	r3, #1
  4010fe:	6003      	str	r3, [r0, #0]
}
  401100:	bc30      	pop	{r4, r5}
  401102:	4770      	bx	lr

00401104 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  401104:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  401106:	6842      	ldr	r2, [r0, #4]
  401108:	6881      	ldr	r1, [r0, #8]
  40110a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  40110c:	6882      	ldr	r2, [r0, #8]
  40110e:	6841      	ldr	r1, [r0, #4]
  401110:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  401112:	685a      	ldr	r2, [r3, #4]
  401114:	4290      	cmp	r0, r2
  401116:	d005      	beq.n	401124 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  401118:	2200      	movs	r2, #0
  40111a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  40111c:	6818      	ldr	r0, [r3, #0]
  40111e:	3801      	subs	r0, #1
  401120:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  401122:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  401124:	6882      	ldr	r2, [r0, #8]
  401126:	605a      	str	r2, [r3, #4]
  401128:	e7f6      	b.n	401118 <uxListRemove+0x14>

0040112a <prvTaskExitError>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40112a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40112e:	b672      	cpsid	i
  401130:	f383 8811 	msr	BASEPRI, r3
  401134:	f3bf 8f6f 	isb	sy
  401138:	f3bf 8f4f 	dsb	sy
  40113c:	b662      	cpsie	i
  40113e:	e7fe      	b.n	40113e <prvTaskExitError+0x14>

00401140 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  401140:	4806      	ldr	r0, [pc, #24]	; (40115c <prvPortStartFirstTask+0x1c>)
  401142:	6800      	ldr	r0, [r0, #0]
  401144:	6800      	ldr	r0, [r0, #0]
  401146:	f380 8808 	msr	MSP, r0
  40114a:	b662      	cpsie	i
  40114c:	b661      	cpsie	f
  40114e:	f3bf 8f4f 	dsb	sy
  401152:	f3bf 8f6f 	isb	sy
  401156:	df00      	svc	0
  401158:	bf00      	nop
  40115a:	0000      	.short	0x0000
  40115c:	e000ed08 	.word	0xe000ed08

00401160 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  401160:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401170 <vPortEnableVFP+0x10>
  401164:	6801      	ldr	r1, [r0, #0]
  401166:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40116a:	6001      	str	r1, [r0, #0]
  40116c:	4770      	bx	lr
  40116e:	0000      	.short	0x0000
  401170:	e000ed88 	.word	0xe000ed88

00401174 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401174:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401178:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  40117c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401180:	4b05      	ldr	r3, [pc, #20]	; (401198 <pxPortInitialiseStack+0x24>)
  401182:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  401186:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  40118a:	f06f 0302 	mvn.w	r3, #2
  40118e:	f840 3c24 	str.w	r3, [r0, #-36]
}
  401192:	3844      	subs	r0, #68	; 0x44
  401194:	4770      	bx	lr
  401196:	bf00      	nop
  401198:	0040112b 	.word	0x0040112b

0040119c <SVC_Handler>:
	__asm volatile (
  40119c:	4b06      	ldr	r3, [pc, #24]	; (4011b8 <pxCurrentTCBConst2>)
  40119e:	6819      	ldr	r1, [r3, #0]
  4011a0:	6808      	ldr	r0, [r1, #0]
  4011a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011a6:	f380 8809 	msr	PSP, r0
  4011aa:	f3bf 8f6f 	isb	sy
  4011ae:	f04f 0000 	mov.w	r0, #0
  4011b2:	f380 8811 	msr	BASEPRI, r0
  4011b6:	4770      	bx	lr

004011b8 <pxCurrentTCBConst2>:
  4011b8:	20400aa8 	.word	0x20400aa8
  4011bc:	4770      	bx	lr
  4011be:	bf00      	nop

004011c0 <vPortEnterCritical>:
  4011c0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011c4:	b672      	cpsid	i
  4011c6:	f383 8811 	msr	BASEPRI, r3
  4011ca:	f3bf 8f6f 	isb	sy
  4011ce:	f3bf 8f4f 	dsb	sy
  4011d2:	b662      	cpsie	i
	uxCriticalNesting++;
  4011d4:	4a02      	ldr	r2, [pc, #8]	; (4011e0 <vPortEnterCritical+0x20>)
  4011d6:	6813      	ldr	r3, [r2, #0]
  4011d8:	3301      	adds	r3, #1
  4011da:	6013      	str	r3, [r2, #0]
  4011dc:	4770      	bx	lr
  4011de:	bf00      	nop
  4011e0:	20400010 	.word	0x20400010

004011e4 <vPortExitCritical>:
	uxCriticalNesting--;
  4011e4:	4a03      	ldr	r2, [pc, #12]	; (4011f4 <vPortExitCritical+0x10>)
  4011e6:	6813      	ldr	r3, [r2, #0]
  4011e8:	3b01      	subs	r3, #1
  4011ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4011ec:	b90b      	cbnz	r3, 4011f2 <vPortExitCritical+0xe>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4011ee:	f383 8811 	msr	BASEPRI, r3
  4011f2:	4770      	bx	lr
  4011f4:	20400010 	.word	0x20400010

004011f8 <PendSV_Handler>:
	__asm volatile
  4011f8:	f3ef 8009 	mrs	r0, PSP
  4011fc:	f3bf 8f6f 	isb	sy
  401200:	4b15      	ldr	r3, [pc, #84]	; (401258 <pxCurrentTCBConst>)
  401202:	681a      	ldr	r2, [r3, #0]
  401204:	f01e 0f10 	tst.w	lr, #16
  401208:	bf08      	it	eq
  40120a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40120e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401212:	6010      	str	r0, [r2, #0]
  401214:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401218:	f04f 0080 	mov.w	r0, #128	; 0x80
  40121c:	b672      	cpsid	i
  40121e:	f380 8811 	msr	BASEPRI, r0
  401222:	f3bf 8f4f 	dsb	sy
  401226:	f3bf 8f6f 	isb	sy
  40122a:	b662      	cpsie	i
  40122c:	f000 fef6 	bl	40201c <vTaskSwitchContext>
  401230:	f04f 0000 	mov.w	r0, #0
  401234:	f380 8811 	msr	BASEPRI, r0
  401238:	bc08      	pop	{r3}
  40123a:	6819      	ldr	r1, [r3, #0]
  40123c:	6808      	ldr	r0, [r1, #0]
  40123e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401242:	f01e 0f10 	tst.w	lr, #16
  401246:	bf08      	it	eq
  401248:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40124c:	f380 8809 	msr	PSP, r0
  401250:	f3bf 8f6f 	isb	sy
  401254:	4770      	bx	lr
  401256:	bf00      	nop

00401258 <pxCurrentTCBConst>:
  401258:	20400aa8 	.word	0x20400aa8
  40125c:	4770      	bx	lr
  40125e:	bf00      	nop

00401260 <SysTick_Handler>:
{
  401260:	b508      	push	{r3, lr}
	__asm volatile
  401262:	f3ef 8311 	mrs	r3, BASEPRI
  401266:	f04f 0280 	mov.w	r2, #128	; 0x80
  40126a:	b672      	cpsid	i
  40126c:	f382 8811 	msr	BASEPRI, r2
  401270:	f3bf 8f6f 	isb	sy
  401274:	f3bf 8f4f 	dsb	sy
  401278:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  40127a:	4b05      	ldr	r3, [pc, #20]	; (401290 <SysTick_Handler+0x30>)
  40127c:	4798      	blx	r3
  40127e:	b118      	cbz	r0, 401288 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401284:	4b03      	ldr	r3, [pc, #12]	; (401294 <SysTick_Handler+0x34>)
  401286:	601a      	str	r2, [r3, #0]
	__asm volatile
  401288:	2300      	movs	r3, #0
  40128a:	f383 8811 	msr	BASEPRI, r3
  40128e:	bd08      	pop	{r3, pc}
  401290:	00401cdd 	.word	0x00401cdd
  401294:	e000ed04 	.word	0xe000ed04

00401298 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  401298:	4a03      	ldr	r2, [pc, #12]	; (4012a8 <vPortSetupTimerInterrupt+0x10>)
  40129a:	4b04      	ldr	r3, [pc, #16]	; (4012ac <vPortSetupTimerInterrupt+0x14>)
  40129c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  40129e:	2207      	movs	r2, #7
  4012a0:	3b04      	subs	r3, #4
  4012a2:	601a      	str	r2, [r3, #0]
  4012a4:	4770      	bx	lr
  4012a6:	bf00      	nop
  4012a8:	000927bf 	.word	0x000927bf
  4012ac:	e000e014 	.word	0xe000e014

004012b0 <xPortStartScheduler>:
{
  4012b0:	b508      	push	{r3, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4012b2:	4b0c      	ldr	r3, [pc, #48]	; (4012e4 <xPortStartScheduler+0x34>)
  4012b4:	681a      	ldr	r2, [r3, #0]
  4012b6:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4012ba:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4012bc:	681a      	ldr	r2, [r3, #0]
  4012be:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4012c2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4012c4:	4b08      	ldr	r3, [pc, #32]	; (4012e8 <xPortStartScheduler+0x38>)
  4012c6:	4798      	blx	r3
	uxCriticalNesting = 0;
  4012c8:	2200      	movs	r2, #0
  4012ca:	4b08      	ldr	r3, [pc, #32]	; (4012ec <xPortStartScheduler+0x3c>)
  4012cc:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  4012ce:	4b08      	ldr	r3, [pc, #32]	; (4012f0 <xPortStartScheduler+0x40>)
  4012d0:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4012d2:	4a08      	ldr	r2, [pc, #32]	; (4012f4 <xPortStartScheduler+0x44>)
  4012d4:	6813      	ldr	r3, [r2, #0]
  4012d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4012da:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4012dc:	4b06      	ldr	r3, [pc, #24]	; (4012f8 <xPortStartScheduler+0x48>)
  4012de:	4798      	blx	r3
	prvTaskExitError();
  4012e0:	4b06      	ldr	r3, [pc, #24]	; (4012fc <xPortStartScheduler+0x4c>)
  4012e2:	4798      	blx	r3
  4012e4:	e000ed20 	.word	0xe000ed20
  4012e8:	00401299 	.word	0x00401299
  4012ec:	20400010 	.word	0x20400010
  4012f0:	00401161 	.word	0x00401161
  4012f4:	e000ef34 	.word	0xe000ef34
  4012f8:	00401141 	.word	0x00401141
  4012fc:	0040112b 	.word	0x0040112b

00401300 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401300:	b510      	push	{r4, lr}
  401302:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  401304:	4b06      	ldr	r3, [pc, #24]	; (401320 <pvPortMalloc+0x20>)
  401306:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401308:	4620      	mov	r0, r4
  40130a:	4b06      	ldr	r3, [pc, #24]	; (401324 <pvPortMalloc+0x24>)
  40130c:	4798      	blx	r3
  40130e:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401310:	4b05      	ldr	r3, [pc, #20]	; (401328 <pvPortMalloc+0x28>)
  401312:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401314:	b10c      	cbz	r4, 40131a <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  401316:	4620      	mov	r0, r4
  401318:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  40131a:	4b04      	ldr	r3, [pc, #16]	; (40132c <pvPortMalloc+0x2c>)
  40131c:	4798      	blx	r3
	return pvReturn;
  40131e:	e7fa      	b.n	401316 <pvPortMalloc+0x16>
  401320:	00401cc1 	.word	0x00401cc1
  401324:	004037e5 	.word	0x004037e5
  401328:	00401e15 	.word	0x00401e15
  40132c:	00402cfb 	.word	0x00402cfb

00401330 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401330:	b148      	cbz	r0, 401346 <vPortFree+0x16>
{
  401332:	b510      	push	{r4, lr}
  401334:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  401336:	4b04      	ldr	r3, [pc, #16]	; (401348 <vPortFree+0x18>)
  401338:	4798      	blx	r3
		{
			free( pv );
  40133a:	4620      	mov	r0, r4
  40133c:	4b03      	ldr	r3, [pc, #12]	; (40134c <vPortFree+0x1c>)
  40133e:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401340:	4b03      	ldr	r3, [pc, #12]	; (401350 <vPortFree+0x20>)
  401342:	4798      	blx	r3
  401344:	bd10      	pop	{r4, pc}
  401346:	4770      	bx	lr
  401348:	00401cc1 	.word	0x00401cc1
  40134c:	004037f5 	.word	0x004037f5
  401350:	00401e15 	.word	0x00401e15

00401354 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  401354:	b538      	push	{r3, r4, r5, lr}
  401356:	4604      	mov	r4, r0
  401358:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  40135a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40135c:	b962      	cbnz	r2, 401378 <prvCopyDataToQueue+0x24>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40135e:	6803      	ldr	r3, [r0, #0]
  401360:	b123      	cbz	r3, 40136c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
  401362:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  401364:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401366:	3301      	adds	r3, #1
  401368:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  40136a:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40136c:	6840      	ldr	r0, [r0, #4]
  40136e:	4b18      	ldr	r3, [pc, #96]	; (4013d0 <prvCopyDataToQueue+0x7c>)
  401370:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401372:	2300      	movs	r3, #0
  401374:	6063      	str	r3, [r4, #4]
  401376:	e7f5      	b.n	401364 <prvCopyDataToQueue+0x10>
	else if( xPosition == queueSEND_TO_BACK )
  401378:	b96d      	cbnz	r5, 401396 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  40137a:	6880      	ldr	r0, [r0, #8]
  40137c:	4b15      	ldr	r3, [pc, #84]	; (4013d4 <prvCopyDataToQueue+0x80>)
  40137e:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401380:	68a3      	ldr	r3, [r4, #8]
  401382:	6c22      	ldr	r2, [r4, #64]	; 0x40
  401384:	4413      	add	r3, r2
  401386:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401388:	6862      	ldr	r2, [r4, #4]
  40138a:	4293      	cmp	r3, r2
  40138c:	d31c      	bcc.n	4013c8 <prvCopyDataToQueue+0x74>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  40138e:	6823      	ldr	r3, [r4, #0]
  401390:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401392:	2000      	movs	r0, #0
  401394:	e7e6      	b.n	401364 <prvCopyDataToQueue+0x10>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401396:	68c0      	ldr	r0, [r0, #12]
  401398:	4b0e      	ldr	r3, [pc, #56]	; (4013d4 <prvCopyDataToQueue+0x80>)
  40139a:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  40139c:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40139e:	4252      	negs	r2, r2
  4013a0:	68e3      	ldr	r3, [r4, #12]
  4013a2:	4413      	add	r3, r2
  4013a4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4013a6:	6821      	ldr	r1, [r4, #0]
  4013a8:	428b      	cmp	r3, r1
  4013aa:	d202      	bcs.n	4013b2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4013ac:	6863      	ldr	r3, [r4, #4]
  4013ae:	441a      	add	r2, r3
  4013b0:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
  4013b2:	2d02      	cmp	r5, #2
  4013b4:	d001      	beq.n	4013ba <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
  4013b6:	2000      	movs	r0, #0
  4013b8:	e7d4      	b.n	401364 <prvCopyDataToQueue+0x10>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4013ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4013bc:	b133      	cbz	r3, 4013cc <prvCopyDataToQueue+0x78>
				--( pxQueue->uxMessagesWaiting );
  4013be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4013c0:	3b01      	subs	r3, #1
  4013c2:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  4013c4:	2000      	movs	r0, #0
  4013c6:	e7cd      	b.n	401364 <prvCopyDataToQueue+0x10>
  4013c8:	2000      	movs	r0, #0
  4013ca:	e7cb      	b.n	401364 <prvCopyDataToQueue+0x10>
  4013cc:	2000      	movs	r0, #0
  4013ce:	e7c9      	b.n	401364 <prvCopyDataToQueue+0x10>
  4013d0:	0040236d 	.word	0x0040236d
  4013d4:	00403d65 	.word	0x00403d65

004013d8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4013d8:	b530      	push	{r4, r5, lr}
  4013da:	b083      	sub	sp, #12
  4013dc:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4013de:	6d44      	ldr	r4, [r0, #84]	; 0x54
		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  4013e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4013e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4013e4:	429a      	cmp	r2, r3
  4013e6:	d303      	bcc.n	4013f0 <prvNotifyQueueSetContainer+0x18>
	BaseType_t xReturn = pdFALSE;
  4013e8:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4013ea:	4628      	mov	r0, r5
  4013ec:	b003      	add	sp, #12
  4013ee:	bd30      	pop	{r4, r5, pc}
  4013f0:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  4013f2:	a901      	add	r1, sp, #4
  4013f4:	4620      	mov	r0, r4
  4013f6:	4b0b      	ldr	r3, [pc, #44]	; (401424 <prvNotifyQueueSetContainer+0x4c>)
  4013f8:	4798      	blx	r3
  4013fa:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  4013fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4013fe:	f1b3 3fff 	cmp.w	r3, #4294967295
  401402:	d003      	beq.n	40140c <prvNotifyQueueSetContainer+0x34>
				( pxQueueSetContainer->xTxLock )++;
  401404:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401406:	3301      	adds	r3, #1
  401408:	64a3      	str	r3, [r4, #72]	; 0x48
  40140a:	e7ee      	b.n	4013ea <prvNotifyQueueSetContainer+0x12>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  40140c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40140e:	2b00      	cmp	r3, #0
  401410:	d0eb      	beq.n	4013ea <prvNotifyQueueSetContainer+0x12>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  401412:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401416:	4b04      	ldr	r3, [pc, #16]	; (401428 <prvNotifyQueueSetContainer+0x50>)
  401418:	4798      	blx	r3
  40141a:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  40141c:	bf18      	it	ne
  40141e:	2501      	movne	r5, #1
  401420:	e7e3      	b.n	4013ea <prvNotifyQueueSetContainer+0x12>
  401422:	bf00      	nop
  401424:	00401355 	.word	0x00401355
  401428:	004021a1 	.word	0x004021a1

0040142c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  40142c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40142e:	b172      	cbz	r2, 40144e <prvCopyDataFromQueue+0x22>
{
  401430:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401432:	68c3      	ldr	r3, [r0, #12]
  401434:	4413      	add	r3, r2
  401436:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401438:	6844      	ldr	r4, [r0, #4]
  40143a:	42a3      	cmp	r3, r4
  40143c:	d301      	bcc.n	401442 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  40143e:	6803      	ldr	r3, [r0, #0]
  401440:	60c3      	str	r3, [r0, #12]
  401442:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401444:	68c1      	ldr	r1, [r0, #12]
  401446:	4620      	mov	r0, r4
  401448:	4b01      	ldr	r3, [pc, #4]	; (401450 <prvCopyDataFromQueue+0x24>)
  40144a:	4798      	blx	r3
  40144c:	bd10      	pop	{r4, pc}
  40144e:	4770      	bx	lr
  401450:	00403d65 	.word	0x00403d65

00401454 <prvUnlockQueue>:
{
  401454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401456:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401458:	4b22      	ldr	r3, [pc, #136]	; (4014e4 <prvUnlockQueue+0x90>)
  40145a:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40145c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40145e:	2b00      	cmp	r3, #0
  401460:	dd1b      	ble.n	40149a <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401462:	4d21      	ldr	r5, [pc, #132]	; (4014e8 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  401464:	4f21      	ldr	r7, [pc, #132]	; (4014ec <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401466:	4e22      	ldr	r6, [pc, #136]	; (4014f0 <prvUnlockQueue+0x9c>)
  401468:	e00b      	b.n	401482 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40146a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40146c:	b1ab      	cbz	r3, 40149a <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40146e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401472:	47b0      	blx	r6
  401474:	b978      	cbnz	r0, 401496 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  401476:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401478:	3b01      	subs	r3, #1
  40147a:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40147c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40147e:	2b00      	cmp	r3, #0
  401480:	dd0b      	ble.n	40149a <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  401482:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401484:	2b00      	cmp	r3, #0
  401486:	d0f0      	beq.n	40146a <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401488:	2100      	movs	r1, #0
  40148a:	4620      	mov	r0, r4
  40148c:	47a8      	blx	r5
  40148e:	2801      	cmp	r0, #1
  401490:	d1f1      	bne.n	401476 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  401492:	47b8      	blx	r7
  401494:	e7ef      	b.n	401476 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  401496:	47b8      	blx	r7
  401498:	e7ed      	b.n	401476 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  40149a:	f04f 33ff 	mov.w	r3, #4294967295
  40149e:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  4014a0:	4b14      	ldr	r3, [pc, #80]	; (4014f4 <prvUnlockQueue+0xa0>)
  4014a2:	4798      	blx	r3
	taskENTER_CRITICAL();
  4014a4:	4b0f      	ldr	r3, [pc, #60]	; (4014e4 <prvUnlockQueue+0x90>)
  4014a6:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4014a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4014aa:	2b00      	cmp	r3, #0
  4014ac:	dd14      	ble.n	4014d8 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4014ae:	6923      	ldr	r3, [r4, #16]
  4014b0:	b193      	cbz	r3, 4014d8 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4014b2:	f104 0610 	add.w	r6, r4, #16
  4014b6:	4d0e      	ldr	r5, [pc, #56]	; (4014f0 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  4014b8:	4f0c      	ldr	r7, [pc, #48]	; (4014ec <prvUnlockQueue+0x98>)
  4014ba:	e007      	b.n	4014cc <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  4014bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4014be:	3b01      	subs	r3, #1
  4014c0:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4014c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4014c4:	2b00      	cmp	r3, #0
  4014c6:	dd07      	ble.n	4014d8 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4014c8:	6923      	ldr	r3, [r4, #16]
  4014ca:	b12b      	cbz	r3, 4014d8 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4014cc:	4630      	mov	r0, r6
  4014ce:	47a8      	blx	r5
  4014d0:	2800      	cmp	r0, #0
  4014d2:	d0f3      	beq.n	4014bc <prvUnlockQueue+0x68>
					vTaskMissedYield();
  4014d4:	47b8      	blx	r7
  4014d6:	e7f1      	b.n	4014bc <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  4014d8:	f04f 33ff 	mov.w	r3, #4294967295
  4014dc:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  4014de:	4b05      	ldr	r3, [pc, #20]	; (4014f4 <prvUnlockQueue+0xa0>)
  4014e0:	4798      	blx	r3
  4014e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4014e4:	004011c1 	.word	0x004011c1
  4014e8:	004013d9 	.word	0x004013d9
  4014ec:	0040229d 	.word	0x0040229d
  4014f0:	004021a1 	.word	0x004021a1
  4014f4:	004011e5 	.word	0x004011e5

004014f8 <xQueueGenericReset>:
{
  4014f8:	b538      	push	{r3, r4, r5, lr}
  4014fa:	4604      	mov	r4, r0
  4014fc:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4014fe:	4b18      	ldr	r3, [pc, #96]	; (401560 <xQueueGenericReset+0x68>)
  401500:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401502:	6822      	ldr	r2, [r4, #0]
  401504:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401506:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401508:	fb03 f301 	mul.w	r3, r3, r1
  40150c:	18d0      	adds	r0, r2, r3
  40150e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401510:	2000      	movs	r0, #0
  401512:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401514:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401516:	1a5b      	subs	r3, r3, r1
  401518:	4413      	add	r3, r2
  40151a:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  40151c:	f04f 33ff 	mov.w	r3, #4294967295
  401520:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401522:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401524:	b9a5      	cbnz	r5, 401550 <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401526:	6923      	ldr	r3, [r4, #16]
  401528:	b91b      	cbnz	r3, 401532 <xQueueGenericReset+0x3a>
	taskEXIT_CRITICAL();
  40152a:	4b0e      	ldr	r3, [pc, #56]	; (401564 <xQueueGenericReset+0x6c>)
  40152c:	4798      	blx	r3
}
  40152e:	2001      	movs	r0, #1
  401530:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401532:	f104 0010 	add.w	r0, r4, #16
  401536:	4b0c      	ldr	r3, [pc, #48]	; (401568 <xQueueGenericReset+0x70>)
  401538:	4798      	blx	r3
  40153a:	2801      	cmp	r0, #1
  40153c:	d1f5      	bne.n	40152a <xQueueGenericReset+0x32>
					queueYIELD_IF_USING_PREEMPTION();
  40153e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401542:	4b0a      	ldr	r3, [pc, #40]	; (40156c <xQueueGenericReset+0x74>)
  401544:	601a      	str	r2, [r3, #0]
  401546:	f3bf 8f4f 	dsb	sy
  40154a:	f3bf 8f6f 	isb	sy
  40154e:	e7ec      	b.n	40152a <xQueueGenericReset+0x32>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401550:	f104 0010 	add.w	r0, r4, #16
  401554:	4d06      	ldr	r5, [pc, #24]	; (401570 <xQueueGenericReset+0x78>)
  401556:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401558:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40155c:	47a8      	blx	r5
  40155e:	e7e4      	b.n	40152a <xQueueGenericReset+0x32>
  401560:	004011c1 	.word	0x004011c1
  401564:	004011e5 	.word	0x004011e5
  401568:	004021a1 	.word	0x004021a1
  40156c:	e000ed04 	.word	0xe000ed04
  401570:	0040109d 	.word	0x0040109d

00401574 <xQueueGenericCreate>:
{
  401574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401576:	4605      	mov	r5, r0
  401578:	4617      	mov	r7, r2
	if( uxItemSize == ( UBaseType_t ) 0 )
  40157a:	460e      	mov	r6, r1
  40157c:	b159      	cbz	r1, 401596 <xQueueGenericCreate+0x22>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40157e:	fb00 f001 	mul.w	r0, r0, r1
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401582:	3059      	adds	r0, #89	; 0x59
  401584:	4b0d      	ldr	r3, [pc, #52]	; (4015bc <xQueueGenericCreate+0x48>)
  401586:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401588:	4604      	mov	r4, r0
  40158a:	b118      	cbz	r0, 401594 <xQueueGenericCreate+0x20>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  40158c:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401590:	6003      	str	r3, [r0, #0]
  401592:	e006      	b.n	4015a2 <xQueueGenericCreate+0x2e>
  401594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401596:	2058      	movs	r0, #88	; 0x58
  401598:	4b08      	ldr	r3, [pc, #32]	; (4015bc <xQueueGenericCreate+0x48>)
  40159a:	4798      	blx	r3
	if( pxNewQueue != NULL )
  40159c:	4604      	mov	r4, r0
  40159e:	b160      	cbz	r0, 4015ba <xQueueGenericCreate+0x46>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  4015a0:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  4015a2:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  4015a4:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  4015a6:	2101      	movs	r1, #1
  4015a8:	4620      	mov	r0, r4
  4015aa:	4b05      	ldr	r3, [pc, #20]	; (4015c0 <xQueueGenericCreate+0x4c>)
  4015ac:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  4015ae:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  4015b2:	2300      	movs	r3, #0
  4015b4:	6563      	str	r3, [r4, #84]	; 0x54
  4015b6:	4620      	mov	r0, r4
	return xReturn;
  4015b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
  4015ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4015bc:	00401301 	.word	0x00401301
  4015c0:	004014f9 	.word	0x004014f9

004015c4 <xQueueGenericSend>:
{
  4015c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4015c8:	b085      	sub	sp, #20
  4015ca:	4604      	mov	r4, r0
  4015cc:	468a      	mov	sl, r1
  4015ce:	9201      	str	r2, [sp, #4]
  4015d0:	461f      	mov	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
  4015d2:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  4015d4:	4d4a      	ldr	r5, [pc, #296]	; (401700 <xQueueGenericSend+0x13c>)
					vTaskSetTimeOutState( &xTimeOut );
  4015d6:	f8df 8154 	ldr.w	r8, [pc, #340]	; 40172c <xQueueGenericSend+0x168>
					portYIELD_WITHIN_API();
  4015da:	f8df 9134 	ldr.w	r9, [pc, #308]	; 401710 <xQueueGenericSend+0x14c>
  4015de:	e04a      	b.n	401676 <xQueueGenericSend+0xb2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4015e0:	463a      	mov	r2, r7
  4015e2:	4651      	mov	r1, sl
  4015e4:	4620      	mov	r0, r4
  4015e6:	4b47      	ldr	r3, [pc, #284]	; (401704 <xQueueGenericSend+0x140>)
  4015e8:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  4015ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4015ec:	b1a3      	cbz	r3, 401618 <xQueueGenericSend+0x54>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4015ee:	4639      	mov	r1, r7
  4015f0:	4620      	mov	r0, r4
  4015f2:	4b45      	ldr	r3, [pc, #276]	; (401708 <xQueueGenericSend+0x144>)
  4015f4:	4798      	blx	r3
  4015f6:	2801      	cmp	r0, #1
  4015f8:	d005      	beq.n	401606 <xQueueGenericSend+0x42>
				taskEXIT_CRITICAL();
  4015fa:	4b44      	ldr	r3, [pc, #272]	; (40170c <xQueueGenericSend+0x148>)
  4015fc:	4798      	blx	r3
				return pdPASS;
  4015fe:	2001      	movs	r0, #1
}
  401600:	b005      	add	sp, #20
  401602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							queueYIELD_IF_USING_PREEMPTION();
  401606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40160a:	4b41      	ldr	r3, [pc, #260]	; (401710 <xQueueGenericSend+0x14c>)
  40160c:	601a      	str	r2, [r3, #0]
  40160e:	f3bf 8f4f 	dsb	sy
  401612:	f3bf 8f6f 	isb	sy
  401616:	e7f0      	b.n	4015fa <xQueueGenericSend+0x36>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401618:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40161a:	b953      	cbnz	r3, 401632 <xQueueGenericSend+0x6e>
						else if( xYieldRequired != pdFALSE )
  40161c:	2800      	cmp	r0, #0
  40161e:	d0ec      	beq.n	4015fa <xQueueGenericSend+0x36>
							queueYIELD_IF_USING_PREEMPTION();
  401620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401624:	4b3a      	ldr	r3, [pc, #232]	; (401710 <xQueueGenericSend+0x14c>)
  401626:	601a      	str	r2, [r3, #0]
  401628:	f3bf 8f4f 	dsb	sy
  40162c:	f3bf 8f6f 	isb	sy
  401630:	e7e3      	b.n	4015fa <xQueueGenericSend+0x36>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401632:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401636:	4b37      	ldr	r3, [pc, #220]	; (401714 <xQueueGenericSend+0x150>)
  401638:	4798      	blx	r3
  40163a:	2801      	cmp	r0, #1
  40163c:	d1dd      	bne.n	4015fa <xQueueGenericSend+0x36>
								queueYIELD_IF_USING_PREEMPTION();
  40163e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401642:	4b33      	ldr	r3, [pc, #204]	; (401710 <xQueueGenericSend+0x14c>)
  401644:	601a      	str	r2, [r3, #0]
  401646:	f3bf 8f4f 	dsb	sy
  40164a:	f3bf 8f6f 	isb	sy
  40164e:	e7d4      	b.n	4015fa <xQueueGenericSend+0x36>
					taskEXIT_CRITICAL();
  401650:	4b2e      	ldr	r3, [pc, #184]	; (40170c <xQueueGenericSend+0x148>)
  401652:	4798      	blx	r3
					return errQUEUE_FULL;
  401654:	2000      	movs	r0, #0
  401656:	e7d3      	b.n	401600 <xQueueGenericSend+0x3c>
					vTaskSetTimeOutState( &xTimeOut );
  401658:	a802      	add	r0, sp, #8
  40165a:	47c0      	blx	r8
  40165c:	e017      	b.n	40168e <xQueueGenericSend+0xca>
		prvLockQueue( pxQueue );
  40165e:	2300      	movs	r3, #0
  401660:	6463      	str	r3, [r4, #68]	; 0x44
  401662:	e01d      	b.n	4016a0 <xQueueGenericSend+0xdc>
  401664:	2300      	movs	r3, #0
  401666:	64a3      	str	r3, [r4, #72]	; 0x48
  401668:	e01e      	b.n	4016a8 <xQueueGenericSend+0xe4>
				prvUnlockQueue( pxQueue );
  40166a:	4620      	mov	r0, r4
  40166c:	4b2a      	ldr	r3, [pc, #168]	; (401718 <xQueueGenericSend+0x154>)
  40166e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401670:	4b2a      	ldr	r3, [pc, #168]	; (40171c <xQueueGenericSend+0x158>)
  401672:	4798      	blx	r3
  401674:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  401676:	47a8      	blx	r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401678:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40167a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40167c:	429a      	cmp	r2, r3
  40167e:	d3af      	bcc.n	4015e0 <xQueueGenericSend+0x1c>
  401680:	2f02      	cmp	r7, #2
  401682:	d0ad      	beq.n	4015e0 <xQueueGenericSend+0x1c>
				if( xTicksToWait == ( TickType_t ) 0 )
  401684:	9b01      	ldr	r3, [sp, #4]
  401686:	2b00      	cmp	r3, #0
  401688:	d0e2      	beq.n	401650 <xQueueGenericSend+0x8c>
				else if( xEntryTimeSet == pdFALSE )
  40168a:	2e00      	cmp	r6, #0
  40168c:	d0e4      	beq.n	401658 <xQueueGenericSend+0x94>
		taskEXIT_CRITICAL();
  40168e:	4b1f      	ldr	r3, [pc, #124]	; (40170c <xQueueGenericSend+0x148>)
  401690:	4798      	blx	r3
		vTaskSuspendAll();
  401692:	4b23      	ldr	r3, [pc, #140]	; (401720 <xQueueGenericSend+0x15c>)
  401694:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401696:	47a8      	blx	r5
  401698:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40169a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40169e:	d0de      	beq.n	40165e <xQueueGenericSend+0x9a>
  4016a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4016a2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4016a6:	d0dd      	beq.n	401664 <xQueueGenericSend+0xa0>
  4016a8:	4b18      	ldr	r3, [pc, #96]	; (40170c <xQueueGenericSend+0x148>)
  4016aa:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4016ac:	a901      	add	r1, sp, #4
  4016ae:	a802      	add	r0, sp, #8
  4016b0:	4b1c      	ldr	r3, [pc, #112]	; (401724 <xQueueGenericSend+0x160>)
  4016b2:	4798      	blx	r3
  4016b4:	b9e0      	cbnz	r0, 4016f0 <xQueueGenericSend+0x12c>
	taskENTER_CRITICAL();
  4016b6:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4016b8:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  4016bc:	6be6      	ldr	r6, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  4016be:	4b13      	ldr	r3, [pc, #76]	; (40170c <xQueueGenericSend+0x148>)
  4016c0:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4016c2:	45b3      	cmp	fp, r6
  4016c4:	d1d1      	bne.n	40166a <xQueueGenericSend+0xa6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4016c6:	9901      	ldr	r1, [sp, #4]
  4016c8:	f104 0010 	add.w	r0, r4, #16
  4016cc:	4b16      	ldr	r3, [pc, #88]	; (401728 <xQueueGenericSend+0x164>)
  4016ce:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4016d0:	4620      	mov	r0, r4
  4016d2:	4b11      	ldr	r3, [pc, #68]	; (401718 <xQueueGenericSend+0x154>)
  4016d4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4016d6:	4b11      	ldr	r3, [pc, #68]	; (40171c <xQueueGenericSend+0x158>)
  4016d8:	4798      	blx	r3
  4016da:	2800      	cmp	r0, #0
  4016dc:	d1ca      	bne.n	401674 <xQueueGenericSend+0xb0>
					portYIELD_WITHIN_API();
  4016de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4016e2:	f8c9 3000 	str.w	r3, [r9]
  4016e6:	f3bf 8f4f 	dsb	sy
  4016ea:	f3bf 8f6f 	isb	sy
  4016ee:	e7c1      	b.n	401674 <xQueueGenericSend+0xb0>
			prvUnlockQueue( pxQueue );
  4016f0:	4620      	mov	r0, r4
  4016f2:	4b09      	ldr	r3, [pc, #36]	; (401718 <xQueueGenericSend+0x154>)
  4016f4:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4016f6:	4b09      	ldr	r3, [pc, #36]	; (40171c <xQueueGenericSend+0x158>)
  4016f8:	4798      	blx	r3
			return errQUEUE_FULL;
  4016fa:	2000      	movs	r0, #0
  4016fc:	e780      	b.n	401600 <xQueueGenericSend+0x3c>
  4016fe:	bf00      	nop
  401700:	004011c1 	.word	0x004011c1
  401704:	00401355 	.word	0x00401355
  401708:	004013d9 	.word	0x004013d9
  40170c:	004011e5 	.word	0x004011e5
  401710:	e000ed04 	.word	0xe000ed04
  401714:	004021a1 	.word	0x004021a1
  401718:	00401455 	.word	0x00401455
  40171c:	00401e15 	.word	0x00401e15
  401720:	00401cc1 	.word	0x00401cc1
  401724:	00402239 	.word	0x00402239
  401728:	004020cd 	.word	0x004020cd
  40172c:	00402221 	.word	0x00402221

00401730 <xQueueGenericSendFromISR>:
{
  401730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm volatile
  401732:	f3ef 8711 	mrs	r7, BASEPRI
  401736:	f04f 0480 	mov.w	r4, #128	; 0x80
  40173a:	b672      	cpsid	i
  40173c:	f384 8811 	msr	BASEPRI, r4
  401740:	f3bf 8f6f 	isb	sy
  401744:	f3bf 8f4f 	dsb	sy
  401748:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40174a:	6b85      	ldr	r5, [r0, #56]	; 0x38
  40174c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  40174e:	42a5      	cmp	r5, r4
  401750:	d305      	bcc.n	40175e <xQueueGenericSendFromISR+0x2e>
  401752:	2b02      	cmp	r3, #2
  401754:	d003      	beq.n	40175e <xQueueGenericSendFromISR+0x2e>
			xReturn = errQUEUE_FULL;
  401756:	2000      	movs	r0, #0
	__asm volatile
  401758:	f387 8811 	msr	BASEPRI, r7
}
  40175c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40175e:	461d      	mov	r5, r3
  401760:	4616      	mov	r6, r2
  401762:	4604      	mov	r4, r0
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401764:	461a      	mov	r2, r3
  401766:	4b13      	ldr	r3, [pc, #76]	; (4017b4 <xQueueGenericSendFromISR+0x84>)
  401768:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  40176a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40176c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401770:	d004      	beq.n	40177c <xQueueGenericSendFromISR+0x4c>
				++( pxQueue->xTxLock );
  401772:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401774:	3301      	adds	r3, #1
  401776:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401778:	2001      	movs	r0, #1
  40177a:	e7ed      	b.n	401758 <xQueueGenericSendFromISR+0x28>
					if( pxQueue->pxQueueSetContainer != NULL )
  40177c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40177e:	b143      	cbz	r3, 401792 <xQueueGenericSendFromISR+0x62>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401780:	4629      	mov	r1, r5
  401782:	4620      	mov	r0, r4
  401784:	4b0c      	ldr	r3, [pc, #48]	; (4017b8 <xQueueGenericSendFromISR+0x88>)
  401786:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401788:	b186      	cbz	r6, 4017ac <xQueueGenericSendFromISR+0x7c>
  40178a:	2801      	cmp	r0, #1
  40178c:	d10e      	bne.n	4017ac <xQueueGenericSendFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
  40178e:	6030      	str	r0, [r6, #0]
  401790:	e7e2      	b.n	401758 <xQueueGenericSendFromISR+0x28>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401792:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401794:	b90b      	cbnz	r3, 40179a <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  401796:	2001      	movs	r0, #1
  401798:	e7de      	b.n	401758 <xQueueGenericSendFromISR+0x28>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40179a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40179e:	4b07      	ldr	r3, [pc, #28]	; (4017bc <xQueueGenericSendFromISR+0x8c>)
  4017a0:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  4017a2:	b12e      	cbz	r6, 4017b0 <xQueueGenericSendFromISR+0x80>
  4017a4:	b120      	cbz	r0, 4017b0 <xQueueGenericSendFromISR+0x80>
									*pxHigherPriorityTaskWoken = pdTRUE;
  4017a6:	2001      	movs	r0, #1
  4017a8:	6030      	str	r0, [r6, #0]
  4017aa:	e7d5      	b.n	401758 <xQueueGenericSendFromISR+0x28>
			xReturn = pdPASS;
  4017ac:	2001      	movs	r0, #1
  4017ae:	e7d3      	b.n	401758 <xQueueGenericSendFromISR+0x28>
  4017b0:	2001      	movs	r0, #1
  4017b2:	e7d1      	b.n	401758 <xQueueGenericSendFromISR+0x28>
  4017b4:	00401355 	.word	0x00401355
  4017b8:	004013d9 	.word	0x004013d9
  4017bc:	004021a1 	.word	0x004021a1

004017c0 <xQueueGenericReceive>:
{
  4017c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4017c4:	b084      	sub	sp, #16
  4017c6:	4604      	mov	r4, r0
  4017c8:	468a      	mov	sl, r1
  4017ca:	9201      	str	r2, [sp, #4]
  4017cc:	4699      	mov	r9, r3
BaseType_t xEntryTimeSet = pdFALSE;
  4017ce:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  4017d0:	4d4d      	ldr	r5, [pc, #308]	; (401908 <xQueueGenericReceive+0x148>)
					vTaskSetTimeOutState( &xTimeOut );
  4017d2:	f8df 8164 	ldr.w	r8, [pc, #356]	; 401938 <xQueueGenericReceive+0x178>
					portYIELD_WITHIN_API();
  4017d6:	4f4d      	ldr	r7, [pc, #308]	; (40190c <xQueueGenericReceive+0x14c>)
  4017d8:	e054      	b.n	401884 <xQueueGenericReceive+0xc4>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  4017da:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4017dc:	4651      	mov	r1, sl
  4017de:	4620      	mov	r0, r4
  4017e0:	4b4b      	ldr	r3, [pc, #300]	; (401910 <xQueueGenericReceive+0x150>)
  4017e2:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  4017e4:	f1b9 0f00 	cmp.w	r9, #0
  4017e8:	d11f      	bne.n	40182a <xQueueGenericReceive+0x6a>
					--( pxQueue->uxMessagesWaiting );
  4017ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4017ec:	3b01      	subs	r3, #1
  4017ee:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4017f0:	6823      	ldr	r3, [r4, #0]
  4017f2:	b13b      	cbz	r3, 401804 <xQueueGenericReceive+0x44>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4017f4:	6923      	ldr	r3, [r4, #16]
  4017f6:	b94b      	cbnz	r3, 40180c <xQueueGenericReceive+0x4c>
				taskEXIT_CRITICAL();
  4017f8:	4b46      	ldr	r3, [pc, #280]	; (401914 <xQueueGenericReceive+0x154>)
  4017fa:	4798      	blx	r3
				return pdPASS;
  4017fc:	2001      	movs	r0, #1
}
  4017fe:	b004      	add	sp, #16
  401800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401804:	4b44      	ldr	r3, [pc, #272]	; (401918 <xQueueGenericReceive+0x158>)
  401806:	4798      	blx	r3
  401808:	6060      	str	r0, [r4, #4]
  40180a:	e7f3      	b.n	4017f4 <xQueueGenericReceive+0x34>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40180c:	f104 0010 	add.w	r0, r4, #16
  401810:	4b42      	ldr	r3, [pc, #264]	; (40191c <xQueueGenericReceive+0x15c>)
  401812:	4798      	blx	r3
  401814:	2801      	cmp	r0, #1
  401816:	d1ef      	bne.n	4017f8 <xQueueGenericReceive+0x38>
							queueYIELD_IF_USING_PREEMPTION();
  401818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40181c:	4b3b      	ldr	r3, [pc, #236]	; (40190c <xQueueGenericReceive+0x14c>)
  40181e:	601a      	str	r2, [r3, #0]
  401820:	f3bf 8f4f 	dsb	sy
  401824:	f3bf 8f6f 	isb	sy
  401828:	e7e6      	b.n	4017f8 <xQueueGenericReceive+0x38>
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  40182a:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40182c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40182e:	2b00      	cmp	r3, #0
  401830:	d0e2      	beq.n	4017f8 <xQueueGenericReceive+0x38>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401832:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401836:	4b39      	ldr	r3, [pc, #228]	; (40191c <xQueueGenericReceive+0x15c>)
  401838:	4798      	blx	r3
  40183a:	2800      	cmp	r0, #0
  40183c:	d0dc      	beq.n	4017f8 <xQueueGenericReceive+0x38>
							queueYIELD_IF_USING_PREEMPTION();
  40183e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401842:	4b32      	ldr	r3, [pc, #200]	; (40190c <xQueueGenericReceive+0x14c>)
  401844:	601a      	str	r2, [r3, #0]
  401846:	f3bf 8f4f 	dsb	sy
  40184a:	f3bf 8f6f 	isb	sy
  40184e:	e7d3      	b.n	4017f8 <xQueueGenericReceive+0x38>
					taskEXIT_CRITICAL();
  401850:	4b30      	ldr	r3, [pc, #192]	; (401914 <xQueueGenericReceive+0x154>)
  401852:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401854:	2000      	movs	r0, #0
  401856:	e7d2      	b.n	4017fe <xQueueGenericReceive+0x3e>
					vTaskSetTimeOutState( &xTimeOut );
  401858:	a802      	add	r0, sp, #8
  40185a:	47c0      	blx	r8
  40185c:	e01b      	b.n	401896 <xQueueGenericReceive+0xd6>
		prvLockQueue( pxQueue );
  40185e:	2300      	movs	r3, #0
  401860:	6463      	str	r3, [r4, #68]	; 0x44
  401862:	e021      	b.n	4018a8 <xQueueGenericReceive+0xe8>
  401864:	2300      	movs	r3, #0
  401866:	64a3      	str	r3, [r4, #72]	; 0x48
  401868:	e022      	b.n	4018b0 <xQueueGenericReceive+0xf0>
						taskENTER_CRITICAL();
  40186a:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  40186c:	6860      	ldr	r0, [r4, #4]
  40186e:	4b2c      	ldr	r3, [pc, #176]	; (401920 <xQueueGenericReceive+0x160>)
  401870:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401872:	4b28      	ldr	r3, [pc, #160]	; (401914 <xQueueGenericReceive+0x154>)
  401874:	4798      	blx	r3
  401876:	e02b      	b.n	4018d0 <xQueueGenericReceive+0x110>
				prvUnlockQueue( pxQueue );
  401878:	4620      	mov	r0, r4
  40187a:	4b2a      	ldr	r3, [pc, #168]	; (401924 <xQueueGenericReceive+0x164>)
  40187c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40187e:	4b2a      	ldr	r3, [pc, #168]	; (401928 <xQueueGenericReceive+0x168>)
  401880:	4798      	blx	r3
  401882:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  401884:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401886:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401888:	2b00      	cmp	r3, #0
  40188a:	d1a6      	bne.n	4017da <xQueueGenericReceive+0x1a>
				if( xTicksToWait == ( TickType_t ) 0 )
  40188c:	9b01      	ldr	r3, [sp, #4]
  40188e:	2b00      	cmp	r3, #0
  401890:	d0de      	beq.n	401850 <xQueueGenericReceive+0x90>
				else if( xEntryTimeSet == pdFALSE )
  401892:	2e00      	cmp	r6, #0
  401894:	d0e0      	beq.n	401858 <xQueueGenericReceive+0x98>
		taskEXIT_CRITICAL();
  401896:	4b1f      	ldr	r3, [pc, #124]	; (401914 <xQueueGenericReceive+0x154>)
  401898:	4798      	blx	r3
		vTaskSuspendAll();
  40189a:	4b24      	ldr	r3, [pc, #144]	; (40192c <xQueueGenericReceive+0x16c>)
  40189c:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40189e:	47a8      	blx	r5
  4018a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4018a2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4018a6:	d0da      	beq.n	40185e <xQueueGenericReceive+0x9e>
  4018a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4018aa:	f1b3 3fff 	cmp.w	r3, #4294967295
  4018ae:	d0d9      	beq.n	401864 <xQueueGenericReceive+0xa4>
  4018b0:	4b18      	ldr	r3, [pc, #96]	; (401914 <xQueueGenericReceive+0x154>)
  4018b2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4018b4:	a901      	add	r1, sp, #4
  4018b6:	a802      	add	r0, sp, #8
  4018b8:	4b1d      	ldr	r3, [pc, #116]	; (401930 <xQueueGenericReceive+0x170>)
  4018ba:	4798      	blx	r3
  4018bc:	b9e0      	cbnz	r0, 4018f8 <xQueueGenericReceive+0x138>
	taskENTER_CRITICAL();
  4018be:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  4018c0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  4018c2:	4b14      	ldr	r3, [pc, #80]	; (401914 <xQueueGenericReceive+0x154>)
  4018c4:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4018c6:	2e00      	cmp	r6, #0
  4018c8:	d1d6      	bne.n	401878 <xQueueGenericReceive+0xb8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4018ca:	6823      	ldr	r3, [r4, #0]
  4018cc:	2b00      	cmp	r3, #0
  4018ce:	d0cc      	beq.n	40186a <xQueueGenericReceive+0xaa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4018d0:	9901      	ldr	r1, [sp, #4]
  4018d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4018d6:	4b17      	ldr	r3, [pc, #92]	; (401934 <xQueueGenericReceive+0x174>)
  4018d8:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4018da:	4620      	mov	r0, r4
  4018dc:	4b11      	ldr	r3, [pc, #68]	; (401924 <xQueueGenericReceive+0x164>)
  4018de:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4018e0:	4b11      	ldr	r3, [pc, #68]	; (401928 <xQueueGenericReceive+0x168>)
  4018e2:	4798      	blx	r3
  4018e4:	2800      	cmp	r0, #0
  4018e6:	d1cc      	bne.n	401882 <xQueueGenericReceive+0xc2>
					portYIELD_WITHIN_API();
  4018e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4018ec:	603b      	str	r3, [r7, #0]
  4018ee:	f3bf 8f4f 	dsb	sy
  4018f2:	f3bf 8f6f 	isb	sy
  4018f6:	e7c4      	b.n	401882 <xQueueGenericReceive+0xc2>
			prvUnlockQueue( pxQueue );
  4018f8:	4620      	mov	r0, r4
  4018fa:	4b0a      	ldr	r3, [pc, #40]	; (401924 <xQueueGenericReceive+0x164>)
  4018fc:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4018fe:	4b0a      	ldr	r3, [pc, #40]	; (401928 <xQueueGenericReceive+0x168>)
  401900:	4798      	blx	r3
			return errQUEUE_EMPTY;
  401902:	2000      	movs	r0, #0
  401904:	e77b      	b.n	4017fe <xQueueGenericReceive+0x3e>
  401906:	bf00      	nop
  401908:	004011c1 	.word	0x004011c1
  40190c:	e000ed04 	.word	0xe000ed04
  401910:	0040142d 	.word	0x0040142d
  401914:	004011e5 	.word	0x004011e5
  401918:	004023f1 	.word	0x004023f1
  40191c:	004021a1 	.word	0x004021a1
  401920:	004022c9 	.word	0x004022c9
  401924:	00401455 	.word	0x00401455
  401928:	00401e15 	.word	0x00401e15
  40192c:	00401cc1 	.word	0x00401cc1
  401930:	00402239 	.word	0x00402239
  401934:	004020cd 	.word	0x004020cd
  401938:	00402221 	.word	0x00402221

0040193c <vQueueAddToRegistry>:
	{
  40193c:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  40193e:	4b0b      	ldr	r3, [pc, #44]	; (40196c <vQueueAddToRegistry+0x30>)
  401940:	681b      	ldr	r3, [r3, #0]
  401942:	b153      	cbz	r3, 40195a <vQueueAddToRegistry+0x1e>
  401944:	2301      	movs	r3, #1
  401946:	4c09      	ldr	r4, [pc, #36]	; (40196c <vQueueAddToRegistry+0x30>)
  401948:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  40194c:	b132      	cbz	r2, 40195c <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40194e:	3301      	adds	r3, #1
  401950:	2b08      	cmp	r3, #8
  401952:	d1f9      	bne.n	401948 <vQueueAddToRegistry+0xc>
	}
  401954:	f85d 4b04 	ldr.w	r4, [sp], #4
  401958:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40195a:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  40195c:	4a03      	ldr	r2, [pc, #12]	; (40196c <vQueueAddToRegistry+0x30>)
  40195e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401962:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401966:	6058      	str	r0, [r3, #4]
				break;
  401968:	e7f4      	b.n	401954 <vQueueAddToRegistry+0x18>
  40196a:	bf00      	nop
  40196c:	20400ca8 	.word	0x20400ca8

00401970 <vQueueWaitForMessageRestricted>:
	{
  401970:	b570      	push	{r4, r5, r6, lr}
  401972:	4604      	mov	r4, r0
  401974:	460d      	mov	r5, r1
  401976:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401978:	4b0f      	ldr	r3, [pc, #60]	; (4019b8 <vQueueWaitForMessageRestricted+0x48>)
  40197a:	4798      	blx	r3
  40197c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40197e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401982:	d00b      	beq.n	40199c <vQueueWaitForMessageRestricted+0x2c>
  401984:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401986:	f1b3 3fff 	cmp.w	r3, #4294967295
  40198a:	d00a      	beq.n	4019a2 <vQueueWaitForMessageRestricted+0x32>
  40198c:	4b0b      	ldr	r3, [pc, #44]	; (4019bc <vQueueWaitForMessageRestricted+0x4c>)
  40198e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401990:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401992:	b14b      	cbz	r3, 4019a8 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  401994:	4620      	mov	r0, r4
  401996:	4b0a      	ldr	r3, [pc, #40]	; (4019c0 <vQueueWaitForMessageRestricted+0x50>)
  401998:	4798      	blx	r3
  40199a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  40199c:	2300      	movs	r3, #0
  40199e:	6463      	str	r3, [r4, #68]	; 0x44
  4019a0:	e7f0      	b.n	401984 <vQueueWaitForMessageRestricted+0x14>
  4019a2:	2300      	movs	r3, #0
  4019a4:	64a3      	str	r3, [r4, #72]	; 0x48
  4019a6:	e7f1      	b.n	40198c <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  4019a8:	4632      	mov	r2, r6
  4019aa:	4629      	mov	r1, r5
  4019ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4019b0:	4b04      	ldr	r3, [pc, #16]	; (4019c4 <vQueueWaitForMessageRestricted+0x54>)
  4019b2:	4798      	blx	r3
  4019b4:	e7ee      	b.n	401994 <vQueueWaitForMessageRestricted+0x24>
  4019b6:	bf00      	nop
  4019b8:	004011c1 	.word	0x004011c1
  4019bc:	004011e5 	.word	0x004011e5
  4019c0:	00401455 	.word	0x00401455
  4019c4:	00402139 	.word	0x00402139

004019c8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4019c8:	4b08      	ldr	r3, [pc, #32]	; (4019ec <prvResetNextTaskUnblockTime+0x24>)
  4019ca:	681b      	ldr	r3, [r3, #0]
  4019cc:	681b      	ldr	r3, [r3, #0]
  4019ce:	b13b      	cbz	r3, 4019e0 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4019d0:	4b06      	ldr	r3, [pc, #24]	; (4019ec <prvResetNextTaskUnblockTime+0x24>)
  4019d2:	681b      	ldr	r3, [r3, #0]
  4019d4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  4019d6:	68db      	ldr	r3, [r3, #12]
  4019d8:	685a      	ldr	r2, [r3, #4]
  4019da:	4b05      	ldr	r3, [pc, #20]	; (4019f0 <prvResetNextTaskUnblockTime+0x28>)
  4019dc:	601a      	str	r2, [r3, #0]
  4019de:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  4019e0:	f04f 32ff 	mov.w	r2, #4294967295
  4019e4:	4b02      	ldr	r3, [pc, #8]	; (4019f0 <prvResetNextTaskUnblockTime+0x28>)
  4019e6:	601a      	str	r2, [r3, #0]
  4019e8:	4770      	bx	lr
  4019ea:	bf00      	nop
  4019ec:	20400aac 	.word	0x20400aac
  4019f0:	20400b58 	.word	0x20400b58

004019f4 <prvAddCurrentTaskToDelayedList>:
{
  4019f4:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4019f6:	4b0f      	ldr	r3, [pc, #60]	; (401a34 <prvAddCurrentTaskToDelayedList+0x40>)
  4019f8:	681b      	ldr	r3, [r3, #0]
  4019fa:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  4019fc:	4b0e      	ldr	r3, [pc, #56]	; (401a38 <prvAddCurrentTaskToDelayedList+0x44>)
  4019fe:	681b      	ldr	r3, [r3, #0]
  401a00:	4298      	cmp	r0, r3
  401a02:	d30e      	bcc.n	401a22 <prvAddCurrentTaskToDelayedList+0x2e>
  401a04:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401a06:	4b0d      	ldr	r3, [pc, #52]	; (401a3c <prvAddCurrentTaskToDelayedList+0x48>)
  401a08:	6818      	ldr	r0, [r3, #0]
  401a0a:	4b0a      	ldr	r3, [pc, #40]	; (401a34 <prvAddCurrentTaskToDelayedList+0x40>)
  401a0c:	6819      	ldr	r1, [r3, #0]
  401a0e:	3104      	adds	r1, #4
  401a10:	4b0b      	ldr	r3, [pc, #44]	; (401a40 <prvAddCurrentTaskToDelayedList+0x4c>)
  401a12:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401a14:	4b0b      	ldr	r3, [pc, #44]	; (401a44 <prvAddCurrentTaskToDelayedList+0x50>)
  401a16:	681b      	ldr	r3, [r3, #0]
  401a18:	429c      	cmp	r4, r3
  401a1a:	d201      	bcs.n	401a20 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  401a1c:	4b09      	ldr	r3, [pc, #36]	; (401a44 <prvAddCurrentTaskToDelayedList+0x50>)
  401a1e:	601c      	str	r4, [r3, #0]
  401a20:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401a22:	4b09      	ldr	r3, [pc, #36]	; (401a48 <prvAddCurrentTaskToDelayedList+0x54>)
  401a24:	6818      	ldr	r0, [r3, #0]
  401a26:	4b03      	ldr	r3, [pc, #12]	; (401a34 <prvAddCurrentTaskToDelayedList+0x40>)
  401a28:	6819      	ldr	r1, [r3, #0]
  401a2a:	3104      	adds	r1, #4
  401a2c:	4b04      	ldr	r3, [pc, #16]	; (401a40 <prvAddCurrentTaskToDelayedList+0x4c>)
  401a2e:	4798      	blx	r3
  401a30:	bd10      	pop	{r4, pc}
  401a32:	bf00      	nop
  401a34:	20400aa8 	.word	0x20400aa8
  401a38:	20400ba0 	.word	0x20400ba0
  401a3c:	20400aac 	.word	0x20400aac
  401a40:	004010d1 	.word	0x004010d1
  401a44:	20400b58 	.word	0x20400b58
  401a48:	20400ab0 	.word	0x20400ab0

00401a4c <xTaskGenericCreate>:
{
  401a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401a50:	b083      	sub	sp, #12
  401a52:	9000      	str	r0, [sp, #0]
  401a54:	460e      	mov	r6, r1
  401a56:	4617      	mov	r7, r2
  401a58:	9301      	str	r3, [sp, #4]
  401a5a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  401a5e:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401a62:	9d0e      	ldr	r5, [sp, #56]	; 0x38
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401a64:	2d00      	cmp	r5, #0
  401a66:	f000 8089 	beq.w	401b7c <xTaskGenericCreate+0x130>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401a6a:	2058      	movs	r0, #88	; 0x58
  401a6c:	4b5f      	ldr	r3, [pc, #380]	; (401bec <xTaskGenericCreate+0x1a0>)
  401a6e:	4798      	blx	r3
			if( pxNewTCB != NULL )
  401a70:	4604      	mov	r4, r0
  401a72:	2800      	cmp	r0, #0
  401a74:	f000 8088 	beq.w	401b88 <xTaskGenericCreate+0x13c>
				pxNewTCB->pxStack = pxStack;
  401a78:	6305      	str	r5, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401a7a:	00ba      	lsls	r2, r7, #2
  401a7c:	21a5      	movs	r1, #165	; 0xa5
  401a7e:	4628      	mov	r0, r5
  401a80:	4b5b      	ldr	r3, [pc, #364]	; (401bf0 <xTaskGenericCreate+0x1a4>)
  401a82:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401a84:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  401a88:	443b      	add	r3, r7
  401a8a:	6b25      	ldr	r5, [r4, #48]	; 0x30
  401a8c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401a90:	f025 0507 	bic.w	r5, r5, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401a94:	7833      	ldrb	r3, [r6, #0]
  401a96:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  401a9a:	7833      	ldrb	r3, [r6, #0]
  401a9c:	b15b      	cbz	r3, 401ab6 <xTaskGenericCreate+0x6a>
  401a9e:	4633      	mov	r3, r6
  401aa0:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401aa4:	3609      	adds	r6, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401aa6:	7859      	ldrb	r1, [r3, #1]
  401aa8:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  401aac:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401ab0:	b109      	cbz	r1, 401ab6 <xTaskGenericCreate+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401ab2:	42b3      	cmp	r3, r6
  401ab4:	d1f7      	bne.n	401aa6 <xTaskGenericCreate+0x5a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401ab6:	2700      	movs	r7, #0
  401ab8:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  401abc:	465e      	mov	r6, fp
  401abe:	2e04      	cmp	r6, #4
  401ac0:	bf28      	it	cs
  401ac2:	2604      	movcs	r6, #4
	pxTCB->uxPriority = uxPriority;
  401ac4:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  401ac6:	64a6      	str	r6, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  401ac8:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401aca:	f104 0804 	add.w	r8, r4, #4
  401ace:	4640      	mov	r0, r8
  401ad0:	f8df 9170 	ldr.w	r9, [pc, #368]	; 401c44 <xTaskGenericCreate+0x1f8>
  401ad4:	47c8      	blx	r9
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401ad6:	f104 0018 	add.w	r0, r4, #24
  401ada:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401adc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401ade:	f1c6 0605 	rsb	r6, r6, #5
  401ae2:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401ae4:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  401ae6:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  401ae8:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401aec:	9a01      	ldr	r2, [sp, #4]
  401aee:	9900      	ldr	r1, [sp, #0]
  401af0:	4628      	mov	r0, r5
  401af2:	4b40      	ldr	r3, [pc, #256]	; (401bf4 <xTaskGenericCreate+0x1a8>)
  401af4:	4798      	blx	r3
  401af6:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  401af8:	f1ba 0f00 	cmp.w	sl, #0
  401afc:	d001      	beq.n	401b02 <xTaskGenericCreate+0xb6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401afe:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  401b02:	4b3d      	ldr	r3, [pc, #244]	; (401bf8 <xTaskGenericCreate+0x1ac>)
  401b04:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  401b06:	4a3d      	ldr	r2, [pc, #244]	; (401bfc <xTaskGenericCreate+0x1b0>)
  401b08:	6813      	ldr	r3, [r2, #0]
  401b0a:	3301      	adds	r3, #1
  401b0c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401b0e:	4b3c      	ldr	r3, [pc, #240]	; (401c00 <xTaskGenericCreate+0x1b4>)
  401b10:	681b      	ldr	r3, [r3, #0]
  401b12:	2b00      	cmp	r3, #0
  401b14:	d03e      	beq.n	401b94 <xTaskGenericCreate+0x148>
				if( xSchedulerRunning == pdFALSE )
  401b16:	4b3b      	ldr	r3, [pc, #236]	; (401c04 <xTaskGenericCreate+0x1b8>)
  401b18:	681b      	ldr	r3, [r3, #0]
  401b1a:	b933      	cbnz	r3, 401b2a <xTaskGenericCreate+0xde>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401b1c:	4b38      	ldr	r3, [pc, #224]	; (401c00 <xTaskGenericCreate+0x1b4>)
  401b1e:	681b      	ldr	r3, [r3, #0]
  401b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401b22:	459b      	cmp	fp, r3
  401b24:	d301      	bcc.n	401b2a <xTaskGenericCreate+0xde>
						pxCurrentTCB = pxNewTCB;
  401b26:	4b36      	ldr	r3, [pc, #216]	; (401c00 <xTaskGenericCreate+0x1b4>)
  401b28:	601c      	str	r4, [r3, #0]
			uxTaskNumber++;
  401b2a:	4a37      	ldr	r2, [pc, #220]	; (401c08 <xTaskGenericCreate+0x1bc>)
  401b2c:	6813      	ldr	r3, [r2, #0]
  401b2e:	3301      	adds	r3, #1
  401b30:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401b32:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  401b34:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401b36:	4a35      	ldr	r2, [pc, #212]	; (401c0c <xTaskGenericCreate+0x1c0>)
  401b38:	6811      	ldr	r1, [r2, #0]
  401b3a:	2301      	movs	r3, #1
  401b3c:	4083      	lsls	r3, r0
  401b3e:	430b      	orrs	r3, r1
  401b40:	6013      	str	r3, [r2, #0]
  401b42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401b46:	4641      	mov	r1, r8
  401b48:	4b31      	ldr	r3, [pc, #196]	; (401c10 <xTaskGenericCreate+0x1c4>)
  401b4a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401b4e:	4b31      	ldr	r3, [pc, #196]	; (401c14 <xTaskGenericCreate+0x1c8>)
  401b50:	4798      	blx	r3
		taskEXIT_CRITICAL();
  401b52:	4b31      	ldr	r3, [pc, #196]	; (401c18 <xTaskGenericCreate+0x1cc>)
  401b54:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  401b56:	4b2b      	ldr	r3, [pc, #172]	; (401c04 <xTaskGenericCreate+0x1b8>)
  401b58:	681b      	ldr	r3, [r3, #0]
  401b5a:	2b00      	cmp	r3, #0
  401b5c:	d040      	beq.n	401be0 <xTaskGenericCreate+0x194>
			if( pxCurrentTCB->uxPriority < uxPriority )
  401b5e:	4b28      	ldr	r3, [pc, #160]	; (401c00 <xTaskGenericCreate+0x1b4>)
  401b60:	681b      	ldr	r3, [r3, #0]
  401b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401b64:	459b      	cmp	fp, r3
  401b66:	d93f      	bls.n	401be8 <xTaskGenericCreate+0x19c>
				taskYIELD_IF_USING_PREEMPTION();
  401b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401b6c:	4b2b      	ldr	r3, [pc, #172]	; (401c1c <xTaskGenericCreate+0x1d0>)
  401b6e:	601a      	str	r2, [r3, #0]
  401b70:	f3bf 8f4f 	dsb	sy
  401b74:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  401b78:	2001      	movs	r0, #1
  401b7a:	e032      	b.n	401be2 <xTaskGenericCreate+0x196>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401b7c:	0090      	lsls	r0, r2, #2
  401b7e:	4b1b      	ldr	r3, [pc, #108]	; (401bec <xTaskGenericCreate+0x1a0>)
  401b80:	4798      	blx	r3
		if( pxStack != NULL )
  401b82:	4605      	mov	r5, r0
  401b84:	b118      	cbz	r0, 401b8e <xTaskGenericCreate+0x142>
  401b86:	e770      	b.n	401a6a <xTaskGenericCreate+0x1e>
				vPortFree( pxStack );
  401b88:	4628      	mov	r0, r5
  401b8a:	4b25      	ldr	r3, [pc, #148]	; (401c20 <xTaskGenericCreate+0x1d4>)
  401b8c:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401b8e:	f04f 30ff 	mov.w	r0, #4294967295
  401b92:	e026      	b.n	401be2 <xTaskGenericCreate+0x196>
				pxCurrentTCB =  pxNewTCB;
  401b94:	4b1a      	ldr	r3, [pc, #104]	; (401c00 <xTaskGenericCreate+0x1b4>)
  401b96:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401b98:	6813      	ldr	r3, [r2, #0]
  401b9a:	2b01      	cmp	r3, #1
  401b9c:	d1c5      	bne.n	401b2a <xTaskGenericCreate+0xde>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401b9e:	4e1c      	ldr	r6, [pc, #112]	; (401c10 <xTaskGenericCreate+0x1c4>)
  401ba0:	4630      	mov	r0, r6
  401ba2:	4d20      	ldr	r5, [pc, #128]	; (401c24 <xTaskGenericCreate+0x1d8>)
  401ba4:	47a8      	blx	r5
  401ba6:	f106 0014 	add.w	r0, r6, #20
  401baa:	47a8      	blx	r5
  401bac:	f106 0028 	add.w	r0, r6, #40	; 0x28
  401bb0:	47a8      	blx	r5
  401bb2:	f106 003c 	add.w	r0, r6, #60	; 0x3c
  401bb6:	47a8      	blx	r5
  401bb8:	f106 0050 	add.w	r0, r6, #80	; 0x50
  401bbc:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  401bbe:	4f1a      	ldr	r7, [pc, #104]	; (401c28 <xTaskGenericCreate+0x1dc>)
  401bc0:	4638      	mov	r0, r7
  401bc2:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  401bc4:	4e19      	ldr	r6, [pc, #100]	; (401c2c <xTaskGenericCreate+0x1e0>)
  401bc6:	4630      	mov	r0, r6
  401bc8:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  401bca:	4819      	ldr	r0, [pc, #100]	; (401c30 <xTaskGenericCreate+0x1e4>)
  401bcc:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
  401bce:	4819      	ldr	r0, [pc, #100]	; (401c34 <xTaskGenericCreate+0x1e8>)
  401bd0:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  401bd2:	4819      	ldr	r0, [pc, #100]	; (401c38 <xTaskGenericCreate+0x1ec>)
  401bd4:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  401bd6:	4b19      	ldr	r3, [pc, #100]	; (401c3c <xTaskGenericCreate+0x1f0>)
  401bd8:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401bda:	4b19      	ldr	r3, [pc, #100]	; (401c40 <xTaskGenericCreate+0x1f4>)
  401bdc:	601e      	str	r6, [r3, #0]
  401bde:	e7a4      	b.n	401b2a <xTaskGenericCreate+0xde>
			xReturn = pdPASS;
  401be0:	2001      	movs	r0, #1
}
  401be2:	b003      	add	sp, #12
  401be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
  401be8:	2001      	movs	r0, #1
	return xReturn;
  401bea:	e7fa      	b.n	401be2 <xTaskGenericCreate+0x196>
  401bec:	00401301 	.word	0x00401301
  401bf0:	00403e99 	.word	0x00403e99
  401bf4:	00401175 	.word	0x00401175
  401bf8:	004011c1 	.word	0x004011c1
  401bfc:	20400b18 	.word	0x20400b18
  401c00:	20400aa8 	.word	0x20400aa8
  401c04:	20400b74 	.word	0x20400b74
  401c08:	20400b24 	.word	0x20400b24
  401c0c:	20400b2c 	.word	0x20400b2c
  401c10:	20400ab4 	.word	0x20400ab4
  401c14:	004010b9 	.word	0x004010b9
  401c18:	004011e5 	.word	0x004011e5
  401c1c:	e000ed04 	.word	0xe000ed04
  401c20:	00401331 	.word	0x00401331
  401c24:	0040109d 	.word	0x0040109d
  401c28:	20400b30 	.word	0x20400b30
  401c2c:	20400b44 	.word	0x20400b44
  401c30:	20400b60 	.word	0x20400b60
  401c34:	20400b8c 	.word	0x20400b8c
  401c38:	20400b78 	.word	0x20400b78
  401c3c:	20400aac 	.word	0x20400aac
  401c40:	20400ab0 	.word	0x20400ab0
  401c44:	004010b3 	.word	0x004010b3

00401c48 <vTaskStartScheduler>:
{
  401c48:	b510      	push	{r4, lr}
  401c4a:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401c4c:	2300      	movs	r3, #0
  401c4e:	9303      	str	r3, [sp, #12]
  401c50:	9302      	str	r3, [sp, #8]
  401c52:	9301      	str	r3, [sp, #4]
  401c54:	9300      	str	r3, [sp, #0]
  401c56:	2282      	movs	r2, #130	; 0x82
  401c58:	4911      	ldr	r1, [pc, #68]	; (401ca0 <vTaskStartScheduler+0x58>)
  401c5a:	4812      	ldr	r0, [pc, #72]	; (401ca4 <vTaskStartScheduler+0x5c>)
  401c5c:	4c12      	ldr	r4, [pc, #72]	; (401ca8 <vTaskStartScheduler+0x60>)
  401c5e:	47a0      	blx	r4
		if( xReturn == pdPASS )
  401c60:	2801      	cmp	r0, #1
  401c62:	d001      	beq.n	401c68 <vTaskStartScheduler+0x20>
}
  401c64:	b004      	add	sp, #16
  401c66:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
  401c68:	4b10      	ldr	r3, [pc, #64]	; (401cac <vTaskStartScheduler+0x64>)
  401c6a:	4798      	blx	r3
	if( xReturn == pdPASS )
  401c6c:	2801      	cmp	r0, #1
  401c6e:	d1f9      	bne.n	401c64 <vTaskStartScheduler+0x1c>
	__asm volatile
  401c70:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c74:	b672      	cpsid	i
  401c76:	f383 8811 	msr	BASEPRI, r3
  401c7a:	f3bf 8f6f 	isb	sy
  401c7e:	f3bf 8f4f 	dsb	sy
  401c82:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  401c84:	f04f 32ff 	mov.w	r2, #4294967295
  401c88:	4b09      	ldr	r3, [pc, #36]	; (401cb0 <vTaskStartScheduler+0x68>)
  401c8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401c8c:	2201      	movs	r2, #1
  401c8e:	4b09      	ldr	r3, [pc, #36]	; (401cb4 <vTaskStartScheduler+0x6c>)
  401c90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  401c92:	2200      	movs	r2, #0
  401c94:	4b08      	ldr	r3, [pc, #32]	; (401cb8 <vTaskStartScheduler+0x70>)
  401c96:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  401c98:	4b08      	ldr	r3, [pc, #32]	; (401cbc <vTaskStartScheduler+0x74>)
  401c9a:	4798      	blx	r3
}
  401c9c:	e7e2      	b.n	401c64 <vTaskStartScheduler+0x1c>
  401c9e:	bf00      	nop
  401ca0:	00406408 	.word	0x00406408
  401ca4:	00401f85 	.word	0x00401f85
  401ca8:	00401a4d 	.word	0x00401a4d
  401cac:	004024c9 	.word	0x004024c9
  401cb0:	20400b58 	.word	0x20400b58
  401cb4:	20400b74 	.word	0x20400b74
  401cb8:	20400ba0 	.word	0x20400ba0
  401cbc:	004012b1 	.word	0x004012b1

00401cc0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401cc0:	4a02      	ldr	r2, [pc, #8]	; (401ccc <vTaskSuspendAll+0xc>)
  401cc2:	6813      	ldr	r3, [r2, #0]
  401cc4:	3301      	adds	r3, #1
  401cc6:	6013      	str	r3, [r2, #0]
  401cc8:	4770      	bx	lr
  401cca:	bf00      	nop
  401ccc:	20400b20 	.word	0x20400b20

00401cd0 <xTaskGetTickCount>:
		xTicks = xTickCount;
  401cd0:	4b01      	ldr	r3, [pc, #4]	; (401cd8 <xTaskGetTickCount+0x8>)
  401cd2:	6818      	ldr	r0, [r3, #0]
}
  401cd4:	4770      	bx	lr
  401cd6:	bf00      	nop
  401cd8:	20400ba0 	.word	0x20400ba0

00401cdc <xTaskIncrementTick>:
{
  401cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401ce0:	4b3d      	ldr	r3, [pc, #244]	; (401dd8 <xTaskIncrementTick+0xfc>)
  401ce2:	681b      	ldr	r3, [r3, #0]
  401ce4:	2b00      	cmp	r3, #0
  401ce6:	d16e      	bne.n	401dc6 <xTaskIncrementTick+0xea>
		++xTickCount;
  401ce8:	4b3c      	ldr	r3, [pc, #240]	; (401ddc <xTaskIncrementTick+0x100>)
  401cea:	681a      	ldr	r2, [r3, #0]
  401cec:	3201      	adds	r2, #1
  401cee:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  401cf0:	f8d3 a000 	ldr.w	sl, [r3]
			if( xConstTickCount == ( TickType_t ) 0U )
  401cf4:	f1ba 0f00 	cmp.w	sl, #0
  401cf8:	d01b      	beq.n	401d32 <xTaskIncrementTick+0x56>
			if( xConstTickCount >= xNextTaskUnblockTime )
  401cfa:	4b39      	ldr	r3, [pc, #228]	; (401de0 <xTaskIncrementTick+0x104>)
  401cfc:	681b      	ldr	r3, [r3, #0]
  401cfe:	459a      	cmp	sl, r3
  401d00:	d224      	bcs.n	401d4c <xTaskIncrementTick+0x70>
BaseType_t xSwitchRequired = pdFALSE;
  401d02:	2600      	movs	r6, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401d04:	4b37      	ldr	r3, [pc, #220]	; (401de4 <xTaskIncrementTick+0x108>)
  401d06:	681b      	ldr	r3, [r3, #0]
  401d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401d0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401d0e:	4a36      	ldr	r2, [pc, #216]	; (401de8 <xTaskIncrementTick+0x10c>)
  401d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  401d14:	2b02      	cmp	r3, #2
  401d16:	bf28      	it	cs
  401d18:	2601      	movcs	r6, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401d1a:	4b34      	ldr	r3, [pc, #208]	; (401dec <xTaskIncrementTick+0x110>)
  401d1c:	681b      	ldr	r3, [r3, #0]
  401d1e:	2b00      	cmp	r3, #0
  401d20:	d04e      	beq.n	401dc0 <xTaskIncrementTick+0xe4>
		if( xYieldPending != pdFALSE )
  401d22:	4b33      	ldr	r3, [pc, #204]	; (401df0 <xTaskIncrementTick+0x114>)
  401d24:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  401d26:	2b00      	cmp	r3, #0
}
  401d28:	bf0c      	ite	eq
  401d2a:	4630      	moveq	r0, r6
  401d2c:	2001      	movne	r0, #1
  401d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				taskSWITCH_DELAYED_LISTS();
  401d32:	4a30      	ldr	r2, [pc, #192]	; (401df4 <xTaskIncrementTick+0x118>)
  401d34:	6811      	ldr	r1, [r2, #0]
  401d36:	4b30      	ldr	r3, [pc, #192]	; (401df8 <xTaskIncrementTick+0x11c>)
  401d38:	6818      	ldr	r0, [r3, #0]
  401d3a:	6010      	str	r0, [r2, #0]
  401d3c:	6019      	str	r1, [r3, #0]
  401d3e:	4a2f      	ldr	r2, [pc, #188]	; (401dfc <xTaskIncrementTick+0x120>)
  401d40:	6813      	ldr	r3, [r2, #0]
  401d42:	3301      	adds	r3, #1
  401d44:	6013      	str	r3, [r2, #0]
  401d46:	4b2e      	ldr	r3, [pc, #184]	; (401e00 <xTaskIncrementTick+0x124>)
  401d48:	4798      	blx	r3
  401d4a:	e7d6      	b.n	401cfa <xTaskIncrementTick+0x1e>
  401d4c:	2600      	movs	r6, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401d4e:	4f29      	ldr	r7, [pc, #164]	; (401df4 <xTaskIncrementTick+0x118>)
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401d50:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 401e0c <xTaskIncrementTick+0x130>
						prvAddTaskToReadyList( pxTCB );
  401d54:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 401e10 <xTaskIncrementTick+0x134>
  401d58:	e021      	b.n	401d9e <xTaskIncrementTick+0xc2>
						xNextTaskUnblockTime = portMAX_DELAY;
  401d5a:	f04f 32ff 	mov.w	r2, #4294967295
  401d5e:	4b20      	ldr	r3, [pc, #128]	; (401de0 <xTaskIncrementTick+0x104>)
  401d60:	601a      	str	r2, [r3, #0]
						break;
  401d62:	e7cf      	b.n	401d04 <xTaskIncrementTick+0x28>
							xNextTaskUnblockTime = xItemValue;
  401d64:	4a1e      	ldr	r2, [pc, #120]	; (401de0 <xTaskIncrementTick+0x104>)
  401d66:	6013      	str	r3, [r2, #0]
							break;
  401d68:	e7cc      	b.n	401d04 <xTaskIncrementTick+0x28>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401d6a:	f104 0018 	add.w	r0, r4, #24
  401d6e:	47c8      	blx	r9
						prvAddTaskToReadyList( pxTCB );
  401d70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401d72:	f8d8 2000 	ldr.w	r2, [r8]
  401d76:	2301      	movs	r3, #1
  401d78:	4083      	lsls	r3, r0
  401d7a:	4313      	orrs	r3, r2
  401d7c:	f8c8 3000 	str.w	r3, [r8]
  401d80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401d84:	4629      	mov	r1, r5
  401d86:	4b18      	ldr	r3, [pc, #96]	; (401de8 <xTaskIncrementTick+0x10c>)
  401d88:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401d8c:	4b1d      	ldr	r3, [pc, #116]	; (401e04 <xTaskIncrementTick+0x128>)
  401d8e:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401d90:	4b14      	ldr	r3, [pc, #80]	; (401de4 <xTaskIncrementTick+0x108>)
  401d92:	681b      	ldr	r3, [r3, #0]
  401d94:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  401d98:	429a      	cmp	r2, r3
  401d9a:	bf28      	it	cs
  401d9c:	2601      	movcs	r6, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401d9e:	683b      	ldr	r3, [r7, #0]
  401da0:	681b      	ldr	r3, [r3, #0]
  401da2:	2b00      	cmp	r3, #0
  401da4:	d0d9      	beq.n	401d5a <xTaskIncrementTick+0x7e>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401da6:	683b      	ldr	r3, [r7, #0]
  401da8:	68db      	ldr	r3, [r3, #12]
  401daa:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401dac:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
  401dae:	459a      	cmp	sl, r3
  401db0:	d3d8      	bcc.n	401d64 <xTaskIncrementTick+0x88>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401db2:	1d25      	adds	r5, r4, #4
  401db4:	4628      	mov	r0, r5
  401db6:	47c8      	blx	r9
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401db8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  401dba:	2b00      	cmp	r3, #0
  401dbc:	d1d5      	bne.n	401d6a <xTaskIncrementTick+0x8e>
  401dbe:	e7d7      	b.n	401d70 <xTaskIncrementTick+0x94>
				vApplicationTickHook();
  401dc0:	4b11      	ldr	r3, [pc, #68]	; (401e08 <xTaskIncrementTick+0x12c>)
  401dc2:	4798      	blx	r3
  401dc4:	e7ad      	b.n	401d22 <xTaskIncrementTick+0x46>
		++uxPendedTicks;
  401dc6:	4a09      	ldr	r2, [pc, #36]	; (401dec <xTaskIncrementTick+0x110>)
  401dc8:	6813      	ldr	r3, [r2, #0]
  401dca:	3301      	adds	r3, #1
  401dcc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  401dce:	4b0e      	ldr	r3, [pc, #56]	; (401e08 <xTaskIncrementTick+0x12c>)
  401dd0:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  401dd2:	2600      	movs	r6, #0
  401dd4:	e7a5      	b.n	401d22 <xTaskIncrementTick+0x46>
  401dd6:	bf00      	nop
  401dd8:	20400b20 	.word	0x20400b20
  401ddc:	20400ba0 	.word	0x20400ba0
  401de0:	20400b58 	.word	0x20400b58
  401de4:	20400aa8 	.word	0x20400aa8
  401de8:	20400ab4 	.word	0x20400ab4
  401dec:	20400b1c 	.word	0x20400b1c
  401df0:	20400ba4 	.word	0x20400ba4
  401df4:	20400aac 	.word	0x20400aac
  401df8:	20400ab0 	.word	0x20400ab0
  401dfc:	20400b5c 	.word	0x20400b5c
  401e00:	004019c9 	.word	0x004019c9
  401e04:	004010b9 	.word	0x004010b9
  401e08:	00402cf9 	.word	0x00402cf9
  401e0c:	00401105 	.word	0x00401105
  401e10:	20400b2c 	.word	0x20400b2c

00401e14 <xTaskResumeAll>:
{
  401e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	taskENTER_CRITICAL();
  401e18:	4b2f      	ldr	r3, [pc, #188]	; (401ed8 <xTaskResumeAll+0xc4>)
  401e1a:	4798      	blx	r3
		--uxSchedulerSuspended;
  401e1c:	4b2f      	ldr	r3, [pc, #188]	; (401edc <xTaskResumeAll+0xc8>)
  401e1e:	681a      	ldr	r2, [r3, #0]
  401e20:	3a01      	subs	r2, #1
  401e22:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401e24:	681b      	ldr	r3, [r3, #0]
  401e26:	2b00      	cmp	r3, #0
  401e28:	d150      	bne.n	401ecc <xTaskResumeAll+0xb8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401e2a:	4b2d      	ldr	r3, [pc, #180]	; (401ee0 <xTaskResumeAll+0xcc>)
  401e2c:	681b      	ldr	r3, [r3, #0]
  401e2e:	b333      	cbz	r3, 401e7e <xTaskResumeAll+0x6a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401e30:	4e2c      	ldr	r6, [pc, #176]	; (401ee4 <xTaskResumeAll+0xd0>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401e32:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 401f08 <xTaskResumeAll+0xf4>
					prvAddTaskToReadyList( pxTCB );
  401e36:	4f2c      	ldr	r7, [pc, #176]	; (401ee8 <xTaskResumeAll+0xd4>)
  401e38:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 401f0c <xTaskResumeAll+0xf8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401e3c:	6833      	ldr	r3, [r6, #0]
  401e3e:	b303      	cbz	r3, 401e82 <xTaskResumeAll+0x6e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401e40:	68f3      	ldr	r3, [r6, #12]
  401e42:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401e44:	f104 0018 	add.w	r0, r4, #24
  401e48:	47c0      	blx	r8
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401e4a:	1d25      	adds	r5, r4, #4
  401e4c:	4628      	mov	r0, r5
  401e4e:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
  401e50:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401e52:	683a      	ldr	r2, [r7, #0]
  401e54:	2301      	movs	r3, #1
  401e56:	4083      	lsls	r3, r0
  401e58:	4313      	orrs	r3, r2
  401e5a:	603b      	str	r3, [r7, #0]
  401e5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401e60:	4629      	mov	r1, r5
  401e62:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401e66:	4b21      	ldr	r3, [pc, #132]	; (401eec <xTaskResumeAll+0xd8>)
  401e68:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401e6a:	4b21      	ldr	r3, [pc, #132]	; (401ef0 <xTaskResumeAll+0xdc>)
  401e6c:	681b      	ldr	r3, [r3, #0]
  401e6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401e72:	429a      	cmp	r2, r3
  401e74:	d3e2      	bcc.n	401e3c <xTaskResumeAll+0x28>
						xYieldPending = pdTRUE;
  401e76:	2201      	movs	r2, #1
  401e78:	4b1e      	ldr	r3, [pc, #120]	; (401ef4 <xTaskResumeAll+0xe0>)
  401e7a:	601a      	str	r2, [r3, #0]
  401e7c:	e7de      	b.n	401e3c <xTaskResumeAll+0x28>
BaseType_t xAlreadyYielded = pdFALSE;
  401e7e:	2400      	movs	r4, #0
  401e80:	e025      	b.n	401ece <xTaskResumeAll+0xba>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401e82:	4b1d      	ldr	r3, [pc, #116]	; (401ef8 <xTaskResumeAll+0xe4>)
  401e84:	681b      	ldr	r3, [r3, #0]
  401e86:	b18b      	cbz	r3, 401eac <xTaskResumeAll+0x98>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401e88:	4b1b      	ldr	r3, [pc, #108]	; (401ef8 <xTaskResumeAll+0xe4>)
  401e8a:	681b      	ldr	r3, [r3, #0]
  401e8c:	b173      	cbz	r3, 401eac <xTaskResumeAll+0x98>
						if( xTaskIncrementTick() != pdFALSE )
  401e8e:	4d1b      	ldr	r5, [pc, #108]	; (401efc <xTaskResumeAll+0xe8>)
							xYieldPending = pdTRUE;
  401e90:	4e18      	ldr	r6, [pc, #96]	; (401ef4 <xTaskResumeAll+0xe0>)
						--uxPendedTicks;
  401e92:	4c19      	ldr	r4, [pc, #100]	; (401ef8 <xTaskResumeAll+0xe4>)
  401e94:	e004      	b.n	401ea0 <xTaskResumeAll+0x8c>
  401e96:	6823      	ldr	r3, [r4, #0]
  401e98:	3b01      	subs	r3, #1
  401e9a:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401e9c:	6823      	ldr	r3, [r4, #0]
  401e9e:	b12b      	cbz	r3, 401eac <xTaskResumeAll+0x98>
						if( xTaskIncrementTick() != pdFALSE )
  401ea0:	47a8      	blx	r5
  401ea2:	2800      	cmp	r0, #0
  401ea4:	d0f7      	beq.n	401e96 <xTaskResumeAll+0x82>
							xYieldPending = pdTRUE;
  401ea6:	2301      	movs	r3, #1
  401ea8:	6033      	str	r3, [r6, #0]
  401eaa:	e7f4      	b.n	401e96 <xTaskResumeAll+0x82>
				if( xYieldPending == pdTRUE )
  401eac:	4b11      	ldr	r3, [pc, #68]	; (401ef4 <xTaskResumeAll+0xe0>)
  401eae:	681b      	ldr	r3, [r3, #0]
  401eb0:	2b01      	cmp	r3, #1
  401eb2:	d001      	beq.n	401eb8 <xTaskResumeAll+0xa4>
BaseType_t xAlreadyYielded = pdFALSE;
  401eb4:	2400      	movs	r4, #0
  401eb6:	e00a      	b.n	401ece <xTaskResumeAll+0xba>
					taskYIELD_IF_USING_PREEMPTION();
  401eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401ebc:	4b10      	ldr	r3, [pc, #64]	; (401f00 <xTaskResumeAll+0xec>)
  401ebe:	601a      	str	r2, [r3, #0]
  401ec0:	f3bf 8f4f 	dsb	sy
  401ec4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  401ec8:	2401      	movs	r4, #1
  401eca:	e000      	b.n	401ece <xTaskResumeAll+0xba>
BaseType_t xAlreadyYielded = pdFALSE;
  401ecc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401ece:	4b0d      	ldr	r3, [pc, #52]	; (401f04 <xTaskResumeAll+0xf0>)
  401ed0:	4798      	blx	r3
}
  401ed2:	4620      	mov	r0, r4
  401ed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401ed8:	004011c1 	.word	0x004011c1
  401edc:	20400b20 	.word	0x20400b20
  401ee0:	20400b18 	.word	0x20400b18
  401ee4:	20400b60 	.word	0x20400b60
  401ee8:	20400b2c 	.word	0x20400b2c
  401eec:	004010b9 	.word	0x004010b9
  401ef0:	20400aa8 	.word	0x20400aa8
  401ef4:	20400ba4 	.word	0x20400ba4
  401ef8:	20400b1c 	.word	0x20400b1c
  401efc:	00401cdd 	.word	0x00401cdd
  401f00:	e000ed04 	.word	0xe000ed04
  401f04:	004011e5 	.word	0x004011e5
  401f08:	00401105 	.word	0x00401105
  401f0c:	20400ab4 	.word	0x20400ab4

00401f10 <vTaskDelay>:
	{
  401f10:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  401f12:	b940      	cbnz	r0, 401f26 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
  401f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f18:	4b12      	ldr	r3, [pc, #72]	; (401f64 <vTaskDelay+0x54>)
  401f1a:	601a      	str	r2, [r3, #0]
  401f1c:	f3bf 8f4f 	dsb	sy
  401f20:	f3bf 8f6f 	isb	sy
  401f24:	bd10      	pop	{r4, pc}
  401f26:	4604      	mov	r4, r0
			vTaskSuspendAll();
  401f28:	4b0f      	ldr	r3, [pc, #60]	; (401f68 <vTaskDelay+0x58>)
  401f2a:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  401f2c:	4b0f      	ldr	r3, [pc, #60]	; (401f6c <vTaskDelay+0x5c>)
  401f2e:	681b      	ldr	r3, [r3, #0]
  401f30:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401f32:	4b0f      	ldr	r3, [pc, #60]	; (401f70 <vTaskDelay+0x60>)
  401f34:	6818      	ldr	r0, [r3, #0]
  401f36:	3004      	adds	r0, #4
  401f38:	4b0e      	ldr	r3, [pc, #56]	; (401f74 <vTaskDelay+0x64>)
  401f3a:	4798      	blx	r3
  401f3c:	b948      	cbnz	r0, 401f52 <vTaskDelay+0x42>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401f3e:	4b0c      	ldr	r3, [pc, #48]	; (401f70 <vTaskDelay+0x60>)
  401f40:	681a      	ldr	r2, [r3, #0]
  401f42:	490d      	ldr	r1, [pc, #52]	; (401f78 <vTaskDelay+0x68>)
  401f44:	680b      	ldr	r3, [r1, #0]
  401f46:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401f48:	2201      	movs	r2, #1
  401f4a:	4082      	lsls	r2, r0
  401f4c:	ea23 0302 	bic.w	r3, r3, r2
  401f50:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401f52:	4620      	mov	r0, r4
  401f54:	4b09      	ldr	r3, [pc, #36]	; (401f7c <vTaskDelay+0x6c>)
  401f56:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  401f58:	4b09      	ldr	r3, [pc, #36]	; (401f80 <vTaskDelay+0x70>)
  401f5a:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  401f5c:	2800      	cmp	r0, #0
  401f5e:	d1e1      	bne.n	401f24 <vTaskDelay+0x14>
  401f60:	e7d8      	b.n	401f14 <vTaskDelay+0x4>
  401f62:	bf00      	nop
  401f64:	e000ed04 	.word	0xe000ed04
  401f68:	00401cc1 	.word	0x00401cc1
  401f6c:	20400ba0 	.word	0x20400ba0
  401f70:	20400aa8 	.word	0x20400aa8
  401f74:	00401105 	.word	0x00401105
  401f78:	20400b2c 	.word	0x20400b2c
  401f7c:	004019f5 	.word	0x004019f5
  401f80:	00401e15 	.word	0x00401e15

00401f84 <prvIdleTask>:
{
  401f84:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  401f86:	f8df 8088 	ldr.w	r8, [pc, #136]	; 402010 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401f8a:	4e19      	ldr	r6, [pc, #100]	; (401ff0 <prvIdleTask+0x6c>)
				taskYIELD();
  401f8c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402014 <prvIdleTask+0x90>
  401f90:	e02a      	b.n	401fe8 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401f92:	4b18      	ldr	r3, [pc, #96]	; (401ff4 <prvIdleTask+0x70>)
  401f94:	681b      	ldr	r3, [r3, #0]
  401f96:	2b01      	cmp	r3, #1
  401f98:	d81e      	bhi.n	401fd8 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401f9a:	682b      	ldr	r3, [r5, #0]
  401f9c:	2b00      	cmp	r3, #0
  401f9e:	d0f8      	beq.n	401f92 <prvIdleTask+0xe>
			vTaskSuspendAll();
  401fa0:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401fa2:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  401fa4:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  401fa6:	2c00      	cmp	r4, #0
  401fa8:	d0f7      	beq.n	401f9a <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  401faa:	4b13      	ldr	r3, [pc, #76]	; (401ff8 <prvIdleTask+0x74>)
  401fac:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401fae:	68f3      	ldr	r3, [r6, #12]
  401fb0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401fb2:	1d20      	adds	r0, r4, #4
  401fb4:	4b11      	ldr	r3, [pc, #68]	; (401ffc <prvIdleTask+0x78>)
  401fb6:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401fb8:	4a11      	ldr	r2, [pc, #68]	; (402000 <prvIdleTask+0x7c>)
  401fba:	6813      	ldr	r3, [r2, #0]
  401fbc:	3b01      	subs	r3, #1
  401fbe:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401fc0:	682b      	ldr	r3, [r5, #0]
  401fc2:	3b01      	subs	r3, #1
  401fc4:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  401fc6:	4b0f      	ldr	r3, [pc, #60]	; (402004 <prvIdleTask+0x80>)
  401fc8:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  401fca:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401fcc:	f8df a048 	ldr.w	sl, [pc, #72]	; 402018 <prvIdleTask+0x94>
  401fd0:	47d0      	blx	sl
		vPortFree( pxTCB );
  401fd2:	4620      	mov	r0, r4
  401fd4:	47d0      	blx	sl
  401fd6:	e7e0      	b.n	401f9a <prvIdleTask+0x16>
				taskYIELD();
  401fd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401fdc:	f8c9 3000 	str.w	r3, [r9]
  401fe0:	f3bf 8f4f 	dsb	sy
  401fe4:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401fe8:	4d07      	ldr	r5, [pc, #28]	; (402008 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  401fea:	4f08      	ldr	r7, [pc, #32]	; (40200c <prvIdleTask+0x88>)
  401fec:	e7d5      	b.n	401f9a <prvIdleTask+0x16>
  401fee:	bf00      	nop
  401ff0:	20400b8c 	.word	0x20400b8c
  401ff4:	20400ab4 	.word	0x20400ab4
  401ff8:	004011c1 	.word	0x004011c1
  401ffc:	00401105 	.word	0x00401105
  402000:	20400b18 	.word	0x20400b18
  402004:	004011e5 	.word	0x004011e5
  402008:	20400b28 	.word	0x20400b28
  40200c:	00401e15 	.word	0x00401e15
  402010:	00401cc1 	.word	0x00401cc1
  402014:	e000ed04 	.word	0xe000ed04
  402018:	00401331 	.word	0x00401331

0040201c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  40201c:	4b25      	ldr	r3, [pc, #148]	; (4020b4 <vTaskSwitchContext+0x98>)
  40201e:	681b      	ldr	r3, [r3, #0]
  402020:	2b00      	cmp	r3, #0
  402022:	d12e      	bne.n	402082 <vTaskSwitchContext+0x66>
{
  402024:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  402026:	2200      	movs	r2, #0
  402028:	4b23      	ldr	r3, [pc, #140]	; (4020b8 <vTaskSwitchContext+0x9c>)
  40202a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  40202c:	4b23      	ldr	r3, [pc, #140]	; (4020bc <vTaskSwitchContext+0xa0>)
  40202e:	681b      	ldr	r3, [r3, #0]
  402030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402032:	681a      	ldr	r2, [r3, #0]
  402034:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402038:	d027      	beq.n	40208a <vTaskSwitchContext+0x6e>
  40203a:	4b20      	ldr	r3, [pc, #128]	; (4020bc <vTaskSwitchContext+0xa0>)
  40203c:	6818      	ldr	r0, [r3, #0]
  40203e:	6819      	ldr	r1, [r3, #0]
  402040:	3134      	adds	r1, #52	; 0x34
  402042:	4b1f      	ldr	r3, [pc, #124]	; (4020c0 <vTaskSwitchContext+0xa4>)
  402044:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402046:	4b1f      	ldr	r3, [pc, #124]	; (4020c4 <vTaskSwitchContext+0xa8>)
  402048:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  40204a:	fab3 f383 	clz	r3, r3
  40204e:	b2db      	uxtb	r3, r3
  402050:	f1c3 031f 	rsb	r3, r3, #31
  402054:	4a1c      	ldr	r2, [pc, #112]	; (4020c8 <vTaskSwitchContext+0xac>)
  402056:	0099      	lsls	r1, r3, #2
  402058:	18c8      	adds	r0, r1, r3
  40205a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  40205e:	6844      	ldr	r4, [r0, #4]
  402060:	6864      	ldr	r4, [r4, #4]
  402062:	6044      	str	r4, [r0, #4]
  402064:	4419      	add	r1, r3
  402066:	4602      	mov	r2, r0
  402068:	3208      	adds	r2, #8
  40206a:	4294      	cmp	r4, r2
  40206c:	d01a      	beq.n	4020a4 <vTaskSwitchContext+0x88>
  40206e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402072:	4a15      	ldr	r2, [pc, #84]	; (4020c8 <vTaskSwitchContext+0xac>)
  402074:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402078:	685b      	ldr	r3, [r3, #4]
  40207a:	68da      	ldr	r2, [r3, #12]
  40207c:	4b0f      	ldr	r3, [pc, #60]	; (4020bc <vTaskSwitchContext+0xa0>)
  40207e:	601a      	str	r2, [r3, #0]
  402080:	bd10      	pop	{r4, pc}
		xYieldPending = pdTRUE;
  402082:	2201      	movs	r2, #1
  402084:	4b0c      	ldr	r3, [pc, #48]	; (4020b8 <vTaskSwitchContext+0x9c>)
  402086:	601a      	str	r2, [r3, #0]
  402088:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  40208a:	685a      	ldr	r2, [r3, #4]
  40208c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402090:	d1d3      	bne.n	40203a <vTaskSwitchContext+0x1e>
  402092:	689a      	ldr	r2, [r3, #8]
  402094:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402098:	d1cf      	bne.n	40203a <vTaskSwitchContext+0x1e>
  40209a:	68db      	ldr	r3, [r3, #12]
  40209c:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  4020a0:	d1cb      	bne.n	40203a <vTaskSwitchContext+0x1e>
  4020a2:	e7d0      	b.n	402046 <vTaskSwitchContext+0x2a>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4020a4:	6860      	ldr	r0, [r4, #4]
  4020a6:	460a      	mov	r2, r1
  4020a8:	4907      	ldr	r1, [pc, #28]	; (4020c8 <vTaskSwitchContext+0xac>)
  4020aa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4020ae:	6050      	str	r0, [r2, #4]
  4020b0:	e7dd      	b.n	40206e <vTaskSwitchContext+0x52>
  4020b2:	bf00      	nop
  4020b4:	20400b20 	.word	0x20400b20
  4020b8:	20400ba4 	.word	0x20400ba4
  4020bc:	20400aa8 	.word	0x20400aa8
  4020c0:	00402ce1 	.word	0x00402ce1
  4020c4:	20400b2c 	.word	0x20400b2c
  4020c8:	20400ab4 	.word	0x20400ab4

004020cc <vTaskPlaceOnEventList>:
{
  4020cc:	b538      	push	{r3, r4, r5, lr}
  4020ce:	460d      	mov	r5, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4020d0:	4c11      	ldr	r4, [pc, #68]	; (402118 <vTaskPlaceOnEventList+0x4c>)
  4020d2:	6821      	ldr	r1, [r4, #0]
  4020d4:	3118      	adds	r1, #24
  4020d6:	4b11      	ldr	r3, [pc, #68]	; (40211c <vTaskPlaceOnEventList+0x50>)
  4020d8:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4020da:	6820      	ldr	r0, [r4, #0]
  4020dc:	3004      	adds	r0, #4
  4020de:	4b10      	ldr	r3, [pc, #64]	; (402120 <vTaskPlaceOnEventList+0x54>)
  4020e0:	4798      	blx	r3
  4020e2:	b940      	cbnz	r0, 4020f6 <vTaskPlaceOnEventList+0x2a>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4020e4:	6822      	ldr	r2, [r4, #0]
  4020e6:	490f      	ldr	r1, [pc, #60]	; (402124 <vTaskPlaceOnEventList+0x58>)
  4020e8:	680b      	ldr	r3, [r1, #0]
  4020ea:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4020ec:	2201      	movs	r2, #1
  4020ee:	4082      	lsls	r2, r0
  4020f0:	ea23 0302 	bic.w	r3, r3, r2
  4020f4:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  4020f6:	f1b5 3fff 	cmp.w	r5, #4294967295
  4020fa:	d005      	beq.n	402108 <vTaskPlaceOnEventList+0x3c>
			xTimeToWake = xTickCount + xTicksToWait;
  4020fc:	4b0a      	ldr	r3, [pc, #40]	; (402128 <vTaskPlaceOnEventList+0x5c>)
  4020fe:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402100:	4428      	add	r0, r5
  402102:	4b0a      	ldr	r3, [pc, #40]	; (40212c <vTaskPlaceOnEventList+0x60>)
  402104:	4798      	blx	r3
  402106:	bd38      	pop	{r3, r4, r5, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402108:	4b03      	ldr	r3, [pc, #12]	; (402118 <vTaskPlaceOnEventList+0x4c>)
  40210a:	6819      	ldr	r1, [r3, #0]
  40210c:	3104      	adds	r1, #4
  40210e:	4808      	ldr	r0, [pc, #32]	; (402130 <vTaskPlaceOnEventList+0x64>)
  402110:	4b08      	ldr	r3, [pc, #32]	; (402134 <vTaskPlaceOnEventList+0x68>)
  402112:	4798      	blx	r3
  402114:	bd38      	pop	{r3, r4, r5, pc}
  402116:	bf00      	nop
  402118:	20400aa8 	.word	0x20400aa8
  40211c:	004010d1 	.word	0x004010d1
  402120:	00401105 	.word	0x00401105
  402124:	20400b2c 	.word	0x20400b2c
  402128:	20400ba0 	.word	0x20400ba0
  40212c:	004019f5 	.word	0x004019f5
  402130:	20400b78 	.word	0x20400b78
  402134:	004010b9 	.word	0x004010b9

00402138 <vTaskPlaceOnEventListRestricted>:
	{
  402138:	b570      	push	{r4, r5, r6, lr}
  40213a:	460e      	mov	r6, r1
  40213c:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40213e:	4c11      	ldr	r4, [pc, #68]	; (402184 <vTaskPlaceOnEventListRestricted+0x4c>)
  402140:	6821      	ldr	r1, [r4, #0]
  402142:	3118      	adds	r1, #24
  402144:	4b10      	ldr	r3, [pc, #64]	; (402188 <vTaskPlaceOnEventListRestricted+0x50>)
  402146:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402148:	6820      	ldr	r0, [r4, #0]
  40214a:	3004      	adds	r0, #4
  40214c:	4b0f      	ldr	r3, [pc, #60]	; (40218c <vTaskPlaceOnEventListRestricted+0x54>)
  40214e:	4798      	blx	r3
  402150:	b940      	cbnz	r0, 402164 <vTaskPlaceOnEventListRestricted+0x2c>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402152:	6822      	ldr	r2, [r4, #0]
  402154:	490e      	ldr	r1, [pc, #56]	; (402190 <vTaskPlaceOnEventListRestricted+0x58>)
  402156:	680b      	ldr	r3, [r1, #0]
  402158:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40215a:	2201      	movs	r2, #1
  40215c:	4082      	lsls	r2, r0
  40215e:	ea23 0302 	bic.w	r3, r3, r2
  402162:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  402164:	2d01      	cmp	r5, #1
  402166:	d005      	beq.n	402174 <vTaskPlaceOnEventListRestricted+0x3c>
				xTimeToWake = xTickCount + xTicksToWait;
  402168:	4b0a      	ldr	r3, [pc, #40]	; (402194 <vTaskPlaceOnEventListRestricted+0x5c>)
  40216a:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40216c:	4430      	add	r0, r6
  40216e:	4b0a      	ldr	r3, [pc, #40]	; (402198 <vTaskPlaceOnEventListRestricted+0x60>)
  402170:	4798      	blx	r3
  402172:	bd70      	pop	{r4, r5, r6, pc}
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402174:	4b03      	ldr	r3, [pc, #12]	; (402184 <vTaskPlaceOnEventListRestricted+0x4c>)
  402176:	6819      	ldr	r1, [r3, #0]
  402178:	3104      	adds	r1, #4
  40217a:	4808      	ldr	r0, [pc, #32]	; (40219c <vTaskPlaceOnEventListRestricted+0x64>)
  40217c:	4b02      	ldr	r3, [pc, #8]	; (402188 <vTaskPlaceOnEventListRestricted+0x50>)
  40217e:	4798      	blx	r3
  402180:	bd70      	pop	{r4, r5, r6, pc}
  402182:	bf00      	nop
  402184:	20400aa8 	.word	0x20400aa8
  402188:	004010b9 	.word	0x004010b9
  40218c:	00401105 	.word	0x00401105
  402190:	20400b2c 	.word	0x20400b2c
  402194:	20400ba0 	.word	0x20400ba0
  402198:	004019f5 	.word	0x004019f5
  40219c:	20400b78 	.word	0x20400b78

004021a0 <xTaskRemoveFromEventList>:
{
  4021a0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4021a2:	68c3      	ldr	r3, [r0, #12]
  4021a4:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4021a6:	f104 0518 	add.w	r5, r4, #24
  4021aa:	4628      	mov	r0, r5
  4021ac:	4b14      	ldr	r3, [pc, #80]	; (402200 <xTaskRemoveFromEventList+0x60>)
  4021ae:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4021b0:	4b14      	ldr	r3, [pc, #80]	; (402204 <xTaskRemoveFromEventList+0x64>)
  4021b2:	681b      	ldr	r3, [r3, #0]
  4021b4:	b9e3      	cbnz	r3, 4021f0 <xTaskRemoveFromEventList+0x50>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  4021b6:	1d25      	adds	r5, r4, #4
  4021b8:	4628      	mov	r0, r5
  4021ba:	4b11      	ldr	r3, [pc, #68]	; (402200 <xTaskRemoveFromEventList+0x60>)
  4021bc:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  4021be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4021c0:	4a11      	ldr	r2, [pc, #68]	; (402208 <xTaskRemoveFromEventList+0x68>)
  4021c2:	6811      	ldr	r1, [r2, #0]
  4021c4:	2301      	movs	r3, #1
  4021c6:	4083      	lsls	r3, r0
  4021c8:	430b      	orrs	r3, r1
  4021ca:	6013      	str	r3, [r2, #0]
  4021cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4021d0:	4629      	mov	r1, r5
  4021d2:	4b0e      	ldr	r3, [pc, #56]	; (40220c <xTaskRemoveFromEventList+0x6c>)
  4021d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4021d8:	4b0d      	ldr	r3, [pc, #52]	; (402210 <xTaskRemoveFromEventList+0x70>)
  4021da:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4021dc:	4b0d      	ldr	r3, [pc, #52]	; (402214 <xTaskRemoveFromEventList+0x74>)
  4021de:	681b      	ldr	r3, [r3, #0]
  4021e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4021e4:	429a      	cmp	r2, r3
  4021e6:	d908      	bls.n	4021fa <xTaskRemoveFromEventList+0x5a>
		xYieldPending = pdTRUE;
  4021e8:	2001      	movs	r0, #1
  4021ea:	4b0b      	ldr	r3, [pc, #44]	; (402218 <xTaskRemoveFromEventList+0x78>)
  4021ec:	6018      	str	r0, [r3, #0]
  4021ee:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4021f0:	4629      	mov	r1, r5
  4021f2:	480a      	ldr	r0, [pc, #40]	; (40221c <xTaskRemoveFromEventList+0x7c>)
  4021f4:	4b06      	ldr	r3, [pc, #24]	; (402210 <xTaskRemoveFromEventList+0x70>)
  4021f6:	4798      	blx	r3
  4021f8:	e7f0      	b.n	4021dc <xTaskRemoveFromEventList+0x3c>
		xReturn = pdFALSE;
  4021fa:	2000      	movs	r0, #0
}
  4021fc:	bd38      	pop	{r3, r4, r5, pc}
  4021fe:	bf00      	nop
  402200:	00401105 	.word	0x00401105
  402204:	20400b20 	.word	0x20400b20
  402208:	20400b2c 	.word	0x20400b2c
  40220c:	20400ab4 	.word	0x20400ab4
  402210:	004010b9 	.word	0x004010b9
  402214:	20400aa8 	.word	0x20400aa8
  402218:	20400ba4 	.word	0x20400ba4
  40221c:	20400b60 	.word	0x20400b60

00402220 <vTaskSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402220:	4b03      	ldr	r3, [pc, #12]	; (402230 <vTaskSetTimeOutState+0x10>)
  402222:	681b      	ldr	r3, [r3, #0]
  402224:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402226:	4b03      	ldr	r3, [pc, #12]	; (402234 <vTaskSetTimeOutState+0x14>)
  402228:	681b      	ldr	r3, [r3, #0]
  40222a:	6043      	str	r3, [r0, #4]
  40222c:	4770      	bx	lr
  40222e:	bf00      	nop
  402230:	20400b5c 	.word	0x20400b5c
  402234:	20400ba0 	.word	0x20400ba0

00402238 <xTaskCheckForTimeOut>:
{
  402238:	b538      	push	{r3, r4, r5, lr}
  40223a:	4604      	mov	r4, r0
  40223c:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  40223e:	4b12      	ldr	r3, [pc, #72]	; (402288 <xTaskCheckForTimeOut+0x50>)
  402240:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402242:	4b12      	ldr	r3, [pc, #72]	; (40228c <xTaskCheckForTimeOut+0x54>)
  402244:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  402246:	682b      	ldr	r3, [r5, #0]
  402248:	f1b3 3fff 	cmp.w	r3, #4294967295
  40224c:	d018      	beq.n	402280 <xTaskCheckForTimeOut+0x48>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  40224e:	4910      	ldr	r1, [pc, #64]	; (402290 <xTaskCheckForTimeOut+0x58>)
  402250:	6809      	ldr	r1, [r1, #0]
  402252:	6820      	ldr	r0, [r4, #0]
  402254:	4288      	cmp	r0, r1
  402256:	d002      	beq.n	40225e <xTaskCheckForTimeOut+0x26>
  402258:	6861      	ldr	r1, [r4, #4]
  40225a:	428a      	cmp	r2, r1
  40225c:	d212      	bcs.n	402284 <xTaskCheckForTimeOut+0x4c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  40225e:	6861      	ldr	r1, [r4, #4]
  402260:	1a50      	subs	r0, r2, r1
  402262:	4283      	cmp	r3, r0
  402264:	d804      	bhi.n	402270 <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
  402266:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  402268:	4b0a      	ldr	r3, [pc, #40]	; (402294 <xTaskCheckForTimeOut+0x5c>)
  40226a:	4798      	blx	r3
}
  40226c:	4620      	mov	r0, r4
  40226e:	bd38      	pop	{r3, r4, r5, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  402270:	1a8a      	subs	r2, r1, r2
  402272:	4413      	add	r3, r2
  402274:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402276:	4620      	mov	r0, r4
  402278:	4b07      	ldr	r3, [pc, #28]	; (402298 <xTaskCheckForTimeOut+0x60>)
  40227a:	4798      	blx	r3
			xReturn = pdFALSE;
  40227c:	2400      	movs	r4, #0
  40227e:	e7f3      	b.n	402268 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
  402280:	2400      	movs	r4, #0
  402282:	e7f1      	b.n	402268 <xTaskCheckForTimeOut+0x30>
			xReturn = pdTRUE;
  402284:	2401      	movs	r4, #1
  402286:	e7ef      	b.n	402268 <xTaskCheckForTimeOut+0x30>
  402288:	004011c1 	.word	0x004011c1
  40228c:	20400ba0 	.word	0x20400ba0
  402290:	20400b5c 	.word	0x20400b5c
  402294:	004011e5 	.word	0x004011e5
  402298:	00402221 	.word	0x00402221

0040229c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  40229c:	2201      	movs	r2, #1
  40229e:	4b01      	ldr	r3, [pc, #4]	; (4022a4 <vTaskMissedYield+0x8>)
  4022a0:	601a      	str	r2, [r3, #0]
  4022a2:	4770      	bx	lr
  4022a4:	20400ba4 	.word	0x20400ba4

004022a8 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  4022a8:	4b05      	ldr	r3, [pc, #20]	; (4022c0 <xTaskGetSchedulerState+0x18>)
  4022aa:	681b      	ldr	r3, [r3, #0]
  4022ac:	b133      	cbz	r3, 4022bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4022ae:	4b05      	ldr	r3, [pc, #20]	; (4022c4 <xTaskGetSchedulerState+0x1c>)
  4022b0:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4022b2:	2b00      	cmp	r3, #0
  4022b4:	bf0c      	ite	eq
  4022b6:	2002      	moveq	r0, #2
  4022b8:	2000      	movne	r0, #0
  4022ba:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  4022bc:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  4022be:	4770      	bx	lr
  4022c0:	20400b74 	.word	0x20400b74
  4022c4:	20400b20 	.word	0x20400b20

004022c8 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  4022c8:	2800      	cmp	r0, #0
  4022ca:	d044      	beq.n	402356 <vTaskPriorityInherit+0x8e>
	{
  4022cc:	b538      	push	{r3, r4, r5, lr}
  4022ce:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  4022d0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4022d2:	4921      	ldr	r1, [pc, #132]	; (402358 <vTaskPriorityInherit+0x90>)
  4022d4:	6809      	ldr	r1, [r1, #0]
  4022d6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4022d8:	428a      	cmp	r2, r1
  4022da:	d214      	bcs.n	402306 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  4022dc:	6981      	ldr	r1, [r0, #24]
  4022de:	2900      	cmp	r1, #0
  4022e0:	db05      	blt.n	4022ee <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4022e2:	491d      	ldr	r1, [pc, #116]	; (402358 <vTaskPriorityInherit+0x90>)
  4022e4:	6809      	ldr	r1, [r1, #0]
  4022e6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4022e8:	f1c1 0105 	rsb	r1, r1, #5
  4022ec:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4022ee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4022f2:	491a      	ldr	r1, [pc, #104]	; (40235c <vTaskPriorityInherit+0x94>)
  4022f4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4022f8:	6961      	ldr	r1, [r4, #20]
  4022fa:	4291      	cmp	r1, r2
  4022fc:	d004      	beq.n	402308 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4022fe:	4a16      	ldr	r2, [pc, #88]	; (402358 <vTaskPriorityInherit+0x90>)
  402300:	6812      	ldr	r2, [r2, #0]
  402302:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402304:	62e2      	str	r2, [r4, #44]	; 0x2c
  402306:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402308:	1d25      	adds	r5, r4, #4
  40230a:	4628      	mov	r0, r5
  40230c:	4b14      	ldr	r3, [pc, #80]	; (402360 <vTaskPriorityInherit+0x98>)
  40230e:	4798      	blx	r3
  402310:	b970      	cbnz	r0, 402330 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402312:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402314:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402318:	4a10      	ldr	r2, [pc, #64]	; (40235c <vTaskPriorityInherit+0x94>)
  40231a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40231e:	b93a      	cbnz	r2, 402330 <vTaskPriorityInherit+0x68>
  402320:	4810      	ldr	r0, [pc, #64]	; (402364 <vTaskPriorityInherit+0x9c>)
  402322:	6802      	ldr	r2, [r0, #0]
  402324:	2101      	movs	r1, #1
  402326:	fa01 f303 	lsl.w	r3, r1, r3
  40232a:	ea22 0303 	bic.w	r3, r2, r3
  40232e:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402330:	4b09      	ldr	r3, [pc, #36]	; (402358 <vTaskPriorityInherit+0x90>)
  402332:	681b      	ldr	r3, [r3, #0]
  402334:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402336:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402338:	4a0a      	ldr	r2, [pc, #40]	; (402364 <vTaskPriorityInherit+0x9c>)
  40233a:	6811      	ldr	r1, [r2, #0]
  40233c:	2301      	movs	r3, #1
  40233e:	4083      	lsls	r3, r0
  402340:	430b      	orrs	r3, r1
  402342:	6013      	str	r3, [r2, #0]
  402344:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402348:	4629      	mov	r1, r5
  40234a:	4b04      	ldr	r3, [pc, #16]	; (40235c <vTaskPriorityInherit+0x94>)
  40234c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402350:	4b05      	ldr	r3, [pc, #20]	; (402368 <vTaskPriorityInherit+0xa0>)
  402352:	4798      	blx	r3
  402354:	bd38      	pop	{r3, r4, r5, pc}
  402356:	4770      	bx	lr
  402358:	20400aa8 	.word	0x20400aa8
  40235c:	20400ab4 	.word	0x20400ab4
  402360:	00401105 	.word	0x00401105
  402364:	20400b2c 	.word	0x20400b2c
  402368:	004010b9 	.word	0x004010b9

0040236c <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  40236c:	2800      	cmp	r0, #0
  40236e:	d033      	beq.n	4023d8 <xTaskPriorityDisinherit+0x6c>
	{
  402370:	b538      	push	{r3, r4, r5, lr}
  402372:	4604      	mov	r4, r0
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
  402374:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402376:	3a01      	subs	r2, #1
  402378:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  40237a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  40237c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  40237e:	4288      	cmp	r0, r1
  402380:	d02c      	beq.n	4023dc <xTaskPriorityDisinherit+0x70>
  402382:	bb5a      	cbnz	r2, 4023dc <xTaskPriorityDisinherit+0x70>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402384:	1d25      	adds	r5, r4, #4
  402386:	4628      	mov	r0, r5
  402388:	4b15      	ldr	r3, [pc, #84]	; (4023e0 <xTaskPriorityDisinherit+0x74>)
  40238a:	4798      	blx	r3
  40238c:	b970      	cbnz	r0, 4023ac <xTaskPriorityDisinherit+0x40>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40238e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402390:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402394:	4a13      	ldr	r2, [pc, #76]	; (4023e4 <xTaskPriorityDisinherit+0x78>)
  402396:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40239a:	b93a      	cbnz	r2, 4023ac <xTaskPriorityDisinherit+0x40>
  40239c:	4812      	ldr	r0, [pc, #72]	; (4023e8 <xTaskPriorityDisinherit+0x7c>)
  40239e:	6802      	ldr	r2, [r0, #0]
  4023a0:	2101      	movs	r1, #1
  4023a2:	fa01 f303 	lsl.w	r3, r1, r3
  4023a6:	ea22 0303 	bic.w	r3, r2, r3
  4023aa:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4023ac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  4023ae:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4023b0:	f1c0 0305 	rsb	r3, r0, #5
  4023b4:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  4023b6:	4a0c      	ldr	r2, [pc, #48]	; (4023e8 <xTaskPriorityDisinherit+0x7c>)
  4023b8:	6811      	ldr	r1, [r2, #0]
  4023ba:	2401      	movs	r4, #1
  4023bc:	fa04 f300 	lsl.w	r3, r4, r0
  4023c0:	430b      	orrs	r3, r1
  4023c2:	6013      	str	r3, [r2, #0]
  4023c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4023c8:	4629      	mov	r1, r5
  4023ca:	4b06      	ldr	r3, [pc, #24]	; (4023e4 <xTaskPriorityDisinherit+0x78>)
  4023cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4023d0:	4b06      	ldr	r3, [pc, #24]	; (4023ec <xTaskPriorityDisinherit+0x80>)
  4023d2:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  4023d4:	4620      	mov	r0, r4
  4023d6:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  4023d8:	2000      	movs	r0, #0
  4023da:	4770      	bx	lr
  4023dc:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4023de:	bd38      	pop	{r3, r4, r5, pc}
  4023e0:	00401105 	.word	0x00401105
  4023e4:	20400ab4 	.word	0x20400ab4
  4023e8:	20400b2c 	.word	0x20400b2c
  4023ec:	004010b9 	.word	0x004010b9

004023f0 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  4023f0:	4b05      	ldr	r3, [pc, #20]	; (402408 <pvTaskIncrementMutexHeldCount+0x18>)
  4023f2:	681b      	ldr	r3, [r3, #0]
  4023f4:	b123      	cbz	r3, 402400 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  4023f6:	4b04      	ldr	r3, [pc, #16]	; (402408 <pvTaskIncrementMutexHeldCount+0x18>)
  4023f8:	681a      	ldr	r2, [r3, #0]
  4023fa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  4023fc:	3301      	adds	r3, #1
  4023fe:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402400:	4b01      	ldr	r3, [pc, #4]	; (402408 <pvTaskIncrementMutexHeldCount+0x18>)
  402402:	6818      	ldr	r0, [r3, #0]
	}
  402404:	4770      	bx	lr
  402406:	bf00      	nop
  402408:	20400aa8 	.word	0x20400aa8

0040240c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  40240c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40240e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402410:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402412:	4291      	cmp	r1, r2
  402414:	d80c      	bhi.n	402430 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402416:	1ad2      	subs	r2, r2, r3
  402418:	6983      	ldr	r3, [r0, #24]
  40241a:	429a      	cmp	r2, r3
  40241c:	d301      	bcc.n	402422 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40241e:	2001      	movs	r0, #1
  402420:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402422:	1d01      	adds	r1, r0, #4
  402424:	4b09      	ldr	r3, [pc, #36]	; (40244c <prvInsertTimerInActiveList+0x40>)
  402426:	6818      	ldr	r0, [r3, #0]
  402428:	4b09      	ldr	r3, [pc, #36]	; (402450 <prvInsertTimerInActiveList+0x44>)
  40242a:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  40242c:	2000      	movs	r0, #0
  40242e:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402430:	429a      	cmp	r2, r3
  402432:	d203      	bcs.n	40243c <prvInsertTimerInActiveList+0x30>
  402434:	4299      	cmp	r1, r3
  402436:	d301      	bcc.n	40243c <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402438:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  40243a:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40243c:	1d01      	adds	r1, r0, #4
  40243e:	4b05      	ldr	r3, [pc, #20]	; (402454 <prvInsertTimerInActiveList+0x48>)
  402440:	6818      	ldr	r0, [r3, #0]
  402442:	4b03      	ldr	r3, [pc, #12]	; (402450 <prvInsertTimerInActiveList+0x44>)
  402444:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402446:	2000      	movs	r0, #0
  402448:	bd08      	pop	{r3, pc}
  40244a:	bf00      	nop
  40244c:	20400bac 	.word	0x20400bac
  402450:	004010d1 	.word	0x004010d1
  402454:	20400ba8 	.word	0x20400ba8

00402458 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402458:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  40245a:	4b10      	ldr	r3, [pc, #64]	; (40249c <prvCheckForValidListAndQueue+0x44>)
  40245c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  40245e:	4b10      	ldr	r3, [pc, #64]	; (4024a0 <prvCheckForValidListAndQueue+0x48>)
  402460:	681b      	ldr	r3, [r3, #0]
  402462:	b113      	cbz	r3, 40246a <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402464:	4b0f      	ldr	r3, [pc, #60]	; (4024a4 <prvCheckForValidListAndQueue+0x4c>)
  402466:	4798      	blx	r3
  402468:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  40246a:	4d0f      	ldr	r5, [pc, #60]	; (4024a8 <prvCheckForValidListAndQueue+0x50>)
  40246c:	4628      	mov	r0, r5
  40246e:	4e0f      	ldr	r6, [pc, #60]	; (4024ac <prvCheckForValidListAndQueue+0x54>)
  402470:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402472:	4c0f      	ldr	r4, [pc, #60]	; (4024b0 <prvCheckForValidListAndQueue+0x58>)
  402474:	4620      	mov	r0, r4
  402476:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402478:	4b0e      	ldr	r3, [pc, #56]	; (4024b4 <prvCheckForValidListAndQueue+0x5c>)
  40247a:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  40247c:	4b0e      	ldr	r3, [pc, #56]	; (4024b8 <prvCheckForValidListAndQueue+0x60>)
  40247e:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402480:	2200      	movs	r2, #0
  402482:	2110      	movs	r1, #16
  402484:	2005      	movs	r0, #5
  402486:	4b0d      	ldr	r3, [pc, #52]	; (4024bc <prvCheckForValidListAndQueue+0x64>)
  402488:	4798      	blx	r3
  40248a:	4b05      	ldr	r3, [pc, #20]	; (4024a0 <prvCheckForValidListAndQueue+0x48>)
  40248c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
  40248e:	2800      	cmp	r0, #0
  402490:	d0e8      	beq.n	402464 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402492:	490b      	ldr	r1, [pc, #44]	; (4024c0 <prvCheckForValidListAndQueue+0x68>)
  402494:	4b0b      	ldr	r3, [pc, #44]	; (4024c4 <prvCheckForValidListAndQueue+0x6c>)
  402496:	4798      	blx	r3
  402498:	e7e4      	b.n	402464 <prvCheckForValidListAndQueue+0xc>
  40249a:	bf00      	nop
  40249c:	004011c1 	.word	0x004011c1
  4024a0:	20400bdc 	.word	0x20400bdc
  4024a4:	004011e5 	.word	0x004011e5
  4024a8:	20400bb0 	.word	0x20400bb0
  4024ac:	0040109d 	.word	0x0040109d
  4024b0:	20400bc4 	.word	0x20400bc4
  4024b4:	20400ba8 	.word	0x20400ba8
  4024b8:	20400bac 	.word	0x20400bac
  4024bc:	00401575 	.word	0x00401575
  4024c0:	00406410 	.word	0x00406410
  4024c4:	0040193d 	.word	0x0040193d

004024c8 <xTimerCreateTimerTask>:
{
  4024c8:	b510      	push	{r4, lr}
  4024ca:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  4024cc:	4b0a      	ldr	r3, [pc, #40]	; (4024f8 <xTimerCreateTimerTask+0x30>)
  4024ce:	4798      	blx	r3
	if( xTimerQueue != NULL )
  4024d0:	4b0a      	ldr	r3, [pc, #40]	; (4024fc <xTimerCreateTimerTask+0x34>)
  4024d2:	681b      	ldr	r3, [r3, #0]
  4024d4:	b16b      	cbz	r3, 4024f2 <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  4024d6:	2300      	movs	r3, #0
  4024d8:	9303      	str	r3, [sp, #12]
  4024da:	9302      	str	r3, [sp, #8]
  4024dc:	9301      	str	r3, [sp, #4]
  4024de:	2204      	movs	r2, #4
  4024e0:	9200      	str	r2, [sp, #0]
  4024e2:	f44f 7282 	mov.w	r2, #260	; 0x104
  4024e6:	4906      	ldr	r1, [pc, #24]	; (402500 <xTimerCreateTimerTask+0x38>)
  4024e8:	4806      	ldr	r0, [pc, #24]	; (402504 <xTimerCreateTimerTask+0x3c>)
  4024ea:	4c07      	ldr	r4, [pc, #28]	; (402508 <xTimerCreateTimerTask+0x40>)
  4024ec:	47a0      	blx	r4
}
  4024ee:	b004      	add	sp, #16
  4024f0:	bd10      	pop	{r4, pc}
BaseType_t xReturn = pdFAIL;
  4024f2:	2000      	movs	r0, #0
	return xReturn;
  4024f4:	e7fb      	b.n	4024ee <xTimerCreateTimerTask+0x26>
  4024f6:	bf00      	nop
  4024f8:	00402459 	.word	0x00402459
  4024fc:	20400bdc 	.word	0x20400bdc
  402500:	00406418 	.word	0x00406418
  402504:	00402609 	.word	0x00402609
  402508:	00401a4d 	.word	0x00401a4d

0040250c <xTimerGenericCommand>:
{
  40250c:	b530      	push	{r4, r5, lr}
  40250e:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
  402510:	4c10      	ldr	r4, [pc, #64]	; (402554 <xTimerGenericCommand+0x48>)
  402512:	6825      	ldr	r5, [r4, #0]
  402514:	b1dd      	cbz	r5, 40254e <xTimerGenericCommand+0x42>
  402516:	461c      	mov	r4, r3
		xMessage.xMessageID = xCommandID;
  402518:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  40251a:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  40251c:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  40251e:	2905      	cmp	r1, #5
  402520:	dc0e      	bgt.n	402540 <xTimerGenericCommand+0x34>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402522:	4b0d      	ldr	r3, [pc, #52]	; (402558 <xTimerGenericCommand+0x4c>)
  402524:	4798      	blx	r3
  402526:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402528:	f04f 0300 	mov.w	r3, #0
  40252c:	bf0c      	ite	eq
  40252e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402530:	461a      	movne	r2, r3
  402532:	4669      	mov	r1, sp
  402534:	4807      	ldr	r0, [pc, #28]	; (402554 <xTimerGenericCommand+0x48>)
  402536:	6800      	ldr	r0, [r0, #0]
  402538:	4c08      	ldr	r4, [pc, #32]	; (40255c <xTimerGenericCommand+0x50>)
  40253a:	47a0      	blx	r4
}
  40253c:	b005      	add	sp, #20
  40253e:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402540:	2300      	movs	r3, #0
  402542:	4622      	mov	r2, r4
  402544:	4669      	mov	r1, sp
  402546:	4628      	mov	r0, r5
  402548:	4c05      	ldr	r4, [pc, #20]	; (402560 <xTimerGenericCommand+0x54>)
  40254a:	47a0      	blx	r4
  40254c:	e7f6      	b.n	40253c <xTimerGenericCommand+0x30>
BaseType_t xReturn = pdFAIL;
  40254e:	2000      	movs	r0, #0
	return xReturn;
  402550:	e7f4      	b.n	40253c <xTimerGenericCommand+0x30>
  402552:	bf00      	nop
  402554:	20400bdc 	.word	0x20400bdc
  402558:	004022a9 	.word	0x004022a9
  40255c:	004015c5 	.word	0x004015c5
  402560:	00401731 	.word	0x00401731

00402564 <prvSampleTimeNow>:
{
  402564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402568:	b082      	sub	sp, #8
  40256a:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  40256c:	4b1f      	ldr	r3, [pc, #124]	; (4025ec <prvSampleTimeNow+0x88>)
  40256e:	4798      	blx	r3
  402570:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  402572:	4b1f      	ldr	r3, [pc, #124]	; (4025f0 <prvSampleTimeNow+0x8c>)
  402574:	681b      	ldr	r3, [r3, #0]
  402576:	4298      	cmp	r0, r3
  402578:	d310      	bcc.n	40259c <prvSampleTimeNow+0x38>
		*pxTimerListsWereSwitched = pdFALSE;
  40257a:	2300      	movs	r3, #0
  40257c:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402580:	4b1b      	ldr	r3, [pc, #108]	; (4025f0 <prvSampleTimeNow+0x8c>)
  402582:	601f      	str	r7, [r3, #0]
}
  402584:	4638      	mov	r0, r7
  402586:	b002      	add	sp, #8
  402588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  40258c:	2100      	movs	r1, #0
  40258e:	9100      	str	r1, [sp, #0]
  402590:	460b      	mov	r3, r1
  402592:	4652      	mov	r2, sl
  402594:	4620      	mov	r0, r4
  402596:	4c17      	ldr	r4, [pc, #92]	; (4025f4 <prvSampleTimeNow+0x90>)
  402598:	47a0      	blx	r4
  40259a:	e001      	b.n	4025a0 <prvSampleTimeNow+0x3c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40259c:	4d16      	ldr	r5, [pc, #88]	; (4025f8 <prvSampleTimeNow+0x94>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40259e:	4e17      	ldr	r6, [pc, #92]	; (4025fc <prvSampleTimeNow+0x98>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4025a0:	682b      	ldr	r3, [r5, #0]
  4025a2:	681a      	ldr	r2, [r3, #0]
  4025a4:	b1c2      	cbz	r2, 4025d8 <prvSampleTimeNow+0x74>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4025a6:	68db      	ldr	r3, [r3, #12]
  4025a8:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4025ac:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4025ae:	f104 0904 	add.w	r9, r4, #4
  4025b2:	4648      	mov	r0, r9
  4025b4:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4025b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4025b8:	4620      	mov	r0, r4
  4025ba:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4025bc:	69e3      	ldr	r3, [r4, #28]
  4025be:	2b01      	cmp	r3, #1
  4025c0:	d1ee      	bne.n	4025a0 <prvSampleTimeNow+0x3c>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4025c2:	69a3      	ldr	r3, [r4, #24]
  4025c4:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  4025c6:	459a      	cmp	sl, r3
  4025c8:	d2e0      	bcs.n	40258c <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  4025ca:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4025cc:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4025ce:	4649      	mov	r1, r9
  4025d0:	6828      	ldr	r0, [r5, #0]
  4025d2:	4b0b      	ldr	r3, [pc, #44]	; (402600 <prvSampleTimeNow+0x9c>)
  4025d4:	4798      	blx	r3
  4025d6:	e7e3      	b.n	4025a0 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
  4025d8:	4a0a      	ldr	r2, [pc, #40]	; (402604 <prvSampleTimeNow+0xa0>)
  4025da:	6810      	ldr	r0, [r2, #0]
  4025dc:	4906      	ldr	r1, [pc, #24]	; (4025f8 <prvSampleTimeNow+0x94>)
  4025de:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  4025e0:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  4025e2:	2301      	movs	r3, #1
  4025e4:	f8c8 3000 	str.w	r3, [r8]
  4025e8:	e7ca      	b.n	402580 <prvSampleTimeNow+0x1c>
  4025ea:	bf00      	nop
  4025ec:	00401cd1 	.word	0x00401cd1
  4025f0:	20400bd8 	.word	0x20400bd8
  4025f4:	0040250d 	.word	0x0040250d
  4025f8:	20400ba8 	.word	0x20400ba8
  4025fc:	00401105 	.word	0x00401105
  402600:	004010d1 	.word	0x004010d1
  402604:	20400bac 	.word	0x20400bac

00402608 <prvTimerTask>:
{
  402608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40260c:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40260e:	4e63      	ldr	r6, [pc, #396]	; (40279c <prvTimerTask+0x194>)
	vTaskSuspendAll();
  402610:	4f63      	ldr	r7, [pc, #396]	; (4027a0 <prvTimerTask+0x198>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402612:	4d64      	ldr	r5, [pc, #400]	; (4027a4 <prvTimerTask+0x19c>)
					portYIELD_WITHIN_API();
  402614:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 4027c8 <prvTimerTask+0x1c0>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402618:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 4027cc <prvTimerTask+0x1c4>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40261c:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  40261e:	681a      	ldr	r2, [r3, #0]
  402620:	2a00      	cmp	r2, #0
  402622:	f000 80a9 	beq.w	402778 <prvTimerTask+0x170>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402626:	68db      	ldr	r3, [r3, #12]
  402628:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
  40262c:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40262e:	a804      	add	r0, sp, #16
  402630:	4b5d      	ldr	r3, [pc, #372]	; (4027a8 <prvTimerTask+0x1a0>)
  402632:	4798      	blx	r3
  402634:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402636:	9b04      	ldr	r3, [sp, #16]
  402638:	2b00      	cmp	r3, #0
  40263a:	d137      	bne.n	4026ac <prvTimerTask+0xa4>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  40263c:	4550      	cmp	r0, sl
  40263e:	d211      	bcs.n	402664 <prvTimerTask+0x5c>
  402640:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402642:	ebaa 0104 	sub.w	r1, sl, r4
  402646:	6828      	ldr	r0, [r5, #0]
  402648:	4b58      	ldr	r3, [pc, #352]	; (4027ac <prvTimerTask+0x1a4>)
  40264a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40264c:	4b58      	ldr	r3, [pc, #352]	; (4027b0 <prvTimerTask+0x1a8>)
  40264e:	4798      	blx	r3
  402650:	bb70      	cbnz	r0, 4026b0 <prvTimerTask+0xa8>
					portYIELD_WITHIN_API();
  402652:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402656:	f8c9 3000 	str.w	r3, [r9]
  40265a:	f3bf 8f4f 	dsb	sy
  40265e:	f3bf 8f6f 	isb	sy
  402662:	e025      	b.n	4026b0 <prvTimerTask+0xa8>
				( void ) xTaskResumeAll();
  402664:	4b52      	ldr	r3, [pc, #328]	; (4027b0 <prvTimerTask+0x1a8>)
  402666:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402668:	6833      	ldr	r3, [r6, #0]
  40266a:	68db      	ldr	r3, [r3, #12]
  40266c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402670:	f10b 0004 	add.w	r0, fp, #4
  402674:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402676:	f8db 301c 	ldr.w	r3, [fp, #28]
  40267a:	2b01      	cmp	r3, #1
  40267c:	d004      	beq.n	402688 <prvTimerTask+0x80>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40267e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
  402682:	4658      	mov	r0, fp
  402684:	4798      	blx	r3
  402686:	e013      	b.n	4026b0 <prvTimerTask+0xa8>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402688:	f8db 1018 	ldr.w	r1, [fp, #24]
  40268c:	4653      	mov	r3, sl
  40268e:	4622      	mov	r2, r4
  402690:	4451      	add	r1, sl
  402692:	4658      	mov	r0, fp
  402694:	4c47      	ldr	r4, [pc, #284]	; (4027b4 <prvTimerTask+0x1ac>)
  402696:	47a0      	blx	r4
  402698:	2801      	cmp	r0, #1
  40269a:	d1f0      	bne.n	40267e <prvTimerTask+0x76>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  40269c:	2100      	movs	r1, #0
  40269e:	9100      	str	r1, [sp, #0]
  4026a0:	460b      	mov	r3, r1
  4026a2:	4652      	mov	r2, sl
  4026a4:	4658      	mov	r0, fp
  4026a6:	4c44      	ldr	r4, [pc, #272]	; (4027b8 <prvTimerTask+0x1b0>)
  4026a8:	47a0      	blx	r4
  4026aa:	e7e8      	b.n	40267e <prvTimerTask+0x76>
			( void ) xTaskResumeAll();
  4026ac:	4b40      	ldr	r3, [pc, #256]	; (4027b0 <prvTimerTask+0x1a8>)
  4026ae:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4026b0:	4c42      	ldr	r4, [pc, #264]	; (4027bc <prvTimerTask+0x1b4>)
  4026b2:	e006      	b.n	4026c2 <prvTimerTask+0xba>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  4026b4:	9907      	ldr	r1, [sp, #28]
  4026b6:	9806      	ldr	r0, [sp, #24]
  4026b8:	9b05      	ldr	r3, [sp, #20]
  4026ba:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  4026bc:	9b04      	ldr	r3, [sp, #16]
  4026be:	2b00      	cmp	r3, #0
  4026c0:	da09      	bge.n	4026d6 <prvTimerTask+0xce>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4026c2:	2300      	movs	r3, #0
  4026c4:	461a      	mov	r2, r3
  4026c6:	a904      	add	r1, sp, #16
  4026c8:	6828      	ldr	r0, [r5, #0]
  4026ca:	47a0      	blx	r4
  4026cc:	2800      	cmp	r0, #0
  4026ce:	d0a5      	beq.n	40261c <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  4026d0:	9b04      	ldr	r3, [sp, #16]
  4026d2:	2b00      	cmp	r3, #0
  4026d4:	dbee      	blt.n	4026b4 <prvTimerTask+0xac>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  4026d6:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  4026da:	f8da 3014 	ldr.w	r3, [sl, #20]
  4026de:	b113      	cbz	r3, 4026e6 <prvTimerTask+0xde>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4026e0:	f10a 0004 	add.w	r0, sl, #4
  4026e4:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4026e6:	a803      	add	r0, sp, #12
  4026e8:	4b2f      	ldr	r3, [pc, #188]	; (4027a8 <prvTimerTask+0x1a0>)
  4026ea:	4798      	blx	r3
			switch( xMessage.xMessageID )
  4026ec:	9b04      	ldr	r3, [sp, #16]
  4026ee:	2b09      	cmp	r3, #9
  4026f0:	d8e7      	bhi.n	4026c2 <prvTimerTask+0xba>
  4026f2:	a201      	add	r2, pc, #4	; (adr r2, 4026f8 <prvTimerTask+0xf0>)
  4026f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4026f8:	00402721 	.word	0x00402721
  4026fc:	00402721 	.word	0x00402721
  402700:	00402721 	.word	0x00402721
  402704:	004026c3 	.word	0x004026c3
  402708:	0040275d 	.word	0x0040275d
  40270c:	00402771 	.word	0x00402771
  402710:	00402721 	.word	0x00402721
  402714:	00402721 	.word	0x00402721
  402718:	004026c3 	.word	0x004026c3
  40271c:	0040275d 	.word	0x0040275d
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402720:	9c05      	ldr	r4, [sp, #20]
  402722:	f8da 1018 	ldr.w	r1, [sl, #24]
  402726:	4623      	mov	r3, r4
  402728:	4602      	mov	r2, r0
  40272a:	4421      	add	r1, r4
  40272c:	4650      	mov	r0, sl
  40272e:	4c21      	ldr	r4, [pc, #132]	; (4027b4 <prvTimerTask+0x1ac>)
  402730:	47a0      	blx	r4
  402732:	2801      	cmp	r0, #1
  402734:	d1bc      	bne.n	4026b0 <prvTimerTask+0xa8>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402736:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40273a:	4650      	mov	r0, sl
  40273c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40273e:	f8da 301c 	ldr.w	r3, [sl, #28]
  402742:	2b01      	cmp	r3, #1
  402744:	d1b4      	bne.n	4026b0 <prvTimerTask+0xa8>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402746:	f8da 2018 	ldr.w	r2, [sl, #24]
  40274a:	2100      	movs	r1, #0
  40274c:	9100      	str	r1, [sp, #0]
  40274e:	460b      	mov	r3, r1
  402750:	9805      	ldr	r0, [sp, #20]
  402752:	4402      	add	r2, r0
  402754:	4650      	mov	r0, sl
  402756:	4c18      	ldr	r4, [pc, #96]	; (4027b8 <prvTimerTask+0x1b0>)
  402758:	47a0      	blx	r4
  40275a:	e7a9      	b.n	4026b0 <prvTimerTask+0xa8>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  40275c:	9905      	ldr	r1, [sp, #20]
  40275e:	f8ca 1018 	str.w	r1, [sl, #24]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402762:	4603      	mov	r3, r0
  402764:	4602      	mov	r2, r0
  402766:	4401      	add	r1, r0
  402768:	4650      	mov	r0, sl
  40276a:	4c12      	ldr	r4, [pc, #72]	; (4027b4 <prvTimerTask+0x1ac>)
  40276c:	47a0      	blx	r4
  40276e:	e79f      	b.n	4026b0 <prvTimerTask+0xa8>
					vPortFree( pxTimer );
  402770:	4650      	mov	r0, sl
  402772:	4b13      	ldr	r3, [pc, #76]	; (4027c0 <prvTimerTask+0x1b8>)
  402774:	4798      	blx	r3
  402776:	e79b      	b.n	4026b0 <prvTimerTask+0xa8>
	vTaskSuspendAll();
  402778:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40277a:	a804      	add	r0, sp, #16
  40277c:	4b0a      	ldr	r3, [pc, #40]	; (4027a8 <prvTimerTask+0x1a0>)
  40277e:	4798      	blx	r3
  402780:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402782:	9b04      	ldr	r3, [sp, #16]
  402784:	2b00      	cmp	r3, #0
  402786:	d191      	bne.n	4026ac <prvTimerTask+0xa4>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402788:	4b0e      	ldr	r3, [pc, #56]	; (4027c4 <prvTimerTask+0x1bc>)
  40278a:	681b      	ldr	r3, [r3, #0]
  40278c:	681a      	ldr	r2, [r3, #0]
  40278e:	fab2 f282 	clz	r2, r2
  402792:	0952      	lsrs	r2, r2, #5
  402794:	f04f 0a00 	mov.w	sl, #0
  402798:	e753      	b.n	402642 <prvTimerTask+0x3a>
  40279a:	bf00      	nop
  40279c:	20400ba8 	.word	0x20400ba8
  4027a0:	00401cc1 	.word	0x00401cc1
  4027a4:	20400bdc 	.word	0x20400bdc
  4027a8:	00402565 	.word	0x00402565
  4027ac:	00401971 	.word	0x00401971
  4027b0:	00401e15 	.word	0x00401e15
  4027b4:	0040240d 	.word	0x0040240d
  4027b8:	0040250d 	.word	0x0040250d
  4027bc:	004017c1 	.word	0x004017c1
  4027c0:	00401331 	.word	0x00401331
  4027c4:	20400bac 	.word	0x20400bac
  4027c8:	e000ed04 	.word	0xe000ed04
  4027cc:	00401105 	.word	0x00401105

004027d0 <usart_serial_putchar>:
{
  4027d0:	b570      	push	{r4, r5, r6, lr}
  4027d2:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4027d4:	4b2a      	ldr	r3, [pc, #168]	; (402880 <usart_serial_putchar+0xb0>)
  4027d6:	4298      	cmp	r0, r3
  4027d8:	d013      	beq.n	402802 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  4027da:	4b2a      	ldr	r3, [pc, #168]	; (402884 <usart_serial_putchar+0xb4>)
  4027dc:	4298      	cmp	r0, r3
  4027de:	d019      	beq.n	402814 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  4027e0:	4b29      	ldr	r3, [pc, #164]	; (402888 <usart_serial_putchar+0xb8>)
  4027e2:	4298      	cmp	r0, r3
  4027e4:	d01f      	beq.n	402826 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  4027e6:	4b29      	ldr	r3, [pc, #164]	; (40288c <usart_serial_putchar+0xbc>)
  4027e8:	4298      	cmp	r0, r3
  4027ea:	d025      	beq.n	402838 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4027ec:	4b28      	ldr	r3, [pc, #160]	; (402890 <usart_serial_putchar+0xc0>)
  4027ee:	4298      	cmp	r0, r3
  4027f0:	d02b      	beq.n	40284a <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4027f2:	4b28      	ldr	r3, [pc, #160]	; (402894 <usart_serial_putchar+0xc4>)
  4027f4:	4298      	cmp	r0, r3
  4027f6:	d031      	beq.n	40285c <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4027f8:	4b27      	ldr	r3, [pc, #156]	; (402898 <usart_serial_putchar+0xc8>)
  4027fa:	4298      	cmp	r0, r3
  4027fc:	d037      	beq.n	40286e <usart_serial_putchar+0x9e>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4027fe:	2000      	movs	r0, #0
}
  402800:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402802:	461e      	mov	r6, r3
  402804:	4d25      	ldr	r5, [pc, #148]	; (40289c <usart_serial_putchar+0xcc>)
  402806:	4621      	mov	r1, r4
  402808:	4630      	mov	r0, r6
  40280a:	47a8      	blx	r5
  40280c:	2800      	cmp	r0, #0
  40280e:	d1fa      	bne.n	402806 <usart_serial_putchar+0x36>
		return 1;
  402810:	2001      	movs	r0, #1
  402812:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402814:	461e      	mov	r6, r3
  402816:	4d21      	ldr	r5, [pc, #132]	; (40289c <usart_serial_putchar+0xcc>)
  402818:	4621      	mov	r1, r4
  40281a:	4630      	mov	r0, r6
  40281c:	47a8      	blx	r5
  40281e:	2800      	cmp	r0, #0
  402820:	d1fa      	bne.n	402818 <usart_serial_putchar+0x48>
		return 1;
  402822:	2001      	movs	r0, #1
  402824:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402826:	461e      	mov	r6, r3
  402828:	4d1c      	ldr	r5, [pc, #112]	; (40289c <usart_serial_putchar+0xcc>)
  40282a:	4621      	mov	r1, r4
  40282c:	4630      	mov	r0, r6
  40282e:	47a8      	blx	r5
  402830:	2800      	cmp	r0, #0
  402832:	d1fa      	bne.n	40282a <usart_serial_putchar+0x5a>
		return 1;
  402834:	2001      	movs	r0, #1
  402836:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402838:	461e      	mov	r6, r3
  40283a:	4d18      	ldr	r5, [pc, #96]	; (40289c <usart_serial_putchar+0xcc>)
  40283c:	4621      	mov	r1, r4
  40283e:	4630      	mov	r0, r6
  402840:	47a8      	blx	r5
  402842:	2800      	cmp	r0, #0
  402844:	d1fa      	bne.n	40283c <usart_serial_putchar+0x6c>
		return 1;
  402846:	2001      	movs	r0, #1
  402848:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40284a:	461e      	mov	r6, r3
  40284c:	4d14      	ldr	r5, [pc, #80]	; (4028a0 <usart_serial_putchar+0xd0>)
  40284e:	4621      	mov	r1, r4
  402850:	4630      	mov	r0, r6
  402852:	47a8      	blx	r5
  402854:	2800      	cmp	r0, #0
  402856:	d1fa      	bne.n	40284e <usart_serial_putchar+0x7e>
		return 1;
  402858:	2001      	movs	r0, #1
  40285a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40285c:	461e      	mov	r6, r3
  40285e:	4d10      	ldr	r5, [pc, #64]	; (4028a0 <usart_serial_putchar+0xd0>)
  402860:	4621      	mov	r1, r4
  402862:	4630      	mov	r0, r6
  402864:	47a8      	blx	r5
  402866:	2800      	cmp	r0, #0
  402868:	d1fa      	bne.n	402860 <usart_serial_putchar+0x90>
		return 1;
  40286a:	2001      	movs	r0, #1
  40286c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40286e:	461e      	mov	r6, r3
  402870:	4d0b      	ldr	r5, [pc, #44]	; (4028a0 <usart_serial_putchar+0xd0>)
  402872:	4621      	mov	r1, r4
  402874:	4630      	mov	r0, r6
  402876:	47a8      	blx	r5
  402878:	2800      	cmp	r0, #0
  40287a:	d1fa      	bne.n	402872 <usart_serial_putchar+0xa2>
		return 1;
  40287c:	2001      	movs	r0, #1
  40287e:	bd70      	pop	{r4, r5, r6, pc}
  402880:	400e0800 	.word	0x400e0800
  402884:	400e0a00 	.word	0x400e0a00
  402888:	400e1a00 	.word	0x400e1a00
  40288c:	400e1c00 	.word	0x400e1c00
  402890:	40024000 	.word	0x40024000
  402894:	40028000 	.word	0x40028000
  402898:	4002c000 	.word	0x4002c000
  40289c:	00400cad 	.word	0x00400cad
  4028a0:	00400dbd 	.word	0x00400dbd

004028a4 <Button0_Handler>:
	y.axis = 1;
	y.value = afec_channel_get_value(AFEC0, AFEC_CHANNEL_RES_PIN);
	xQueueSendFromISR( xQueueAfec, &y, 0);
}

void Button0_Handler(void){
  4028a4:	b510      	push	{r4, lr}
  4028a6:	b082      	sub	sp, #8
	press press0;
	press0.button = 0;
  4028a8:	2400      	movs	r4, #0
  4028aa:	9400      	str	r4, [sp, #0]
 	press0.status = !pio_get(BUT0_PIO, PIO_INPUT, BUT0_PIO_IDX_MASK);
  4028ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4028b0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4028b4:	4807      	ldr	r0, [pc, #28]	; (4028d4 <Button0_Handler+0x30>)
  4028b6:	4b08      	ldr	r3, [pc, #32]	; (4028d8 <Button0_Handler+0x34>)
  4028b8:	4798      	blx	r3
  4028ba:	fab0 f080 	clz	r0, r0
  4028be:	0940      	lsrs	r0, r0, #5
  4028c0:	9001      	str	r0, [sp, #4]
	xQueueSendFromISR( xQueueBut, &press0, 0);
  4028c2:	4623      	mov	r3, r4
  4028c4:	4622      	mov	r2, r4
  4028c6:	4669      	mov	r1, sp
  4028c8:	4804      	ldr	r0, [pc, #16]	; (4028dc <Button0_Handler+0x38>)
  4028ca:	6800      	ldr	r0, [r0, #0]
  4028cc:	4c04      	ldr	r4, [pc, #16]	; (4028e0 <Button0_Handler+0x3c>)
  4028ce:	47a0      	blx	r4
}
  4028d0:	b002      	add	sp, #8
  4028d2:	bd10      	pop	{r4, pc}
  4028d4:	400e1200 	.word	0x400e1200
  4028d8:	0040083b 	.word	0x0040083b
  4028dc:	20400ce8 	.word	0x20400ce8
  4028e0:	00401731 	.word	0x00401731

004028e4 <Button1_Handler>:
 
void Button1_Handler(void){
  4028e4:	b510      	push	{r4, lr}
  4028e6:	b082      	sub	sp, #8
	press press1;
	press1.button = 1;
  4028e8:	2301      	movs	r3, #1
  4028ea:	9300      	str	r3, [sp, #0]
	press1.status = !pio_get(BUT1_PIO, PIO_INPUT, BUT1_PIO_IDX_MASK);
  4028ec:	2208      	movs	r2, #8
  4028ee:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4028f2:	4808      	ldr	r0, [pc, #32]	; (402914 <Button1_Handler+0x30>)
  4028f4:	4b08      	ldr	r3, [pc, #32]	; (402918 <Button1_Handler+0x34>)
  4028f6:	4798      	blx	r3
  4028f8:	fab0 f080 	clz	r0, r0
  4028fc:	0940      	lsrs	r0, r0, #5
  4028fe:	9001      	str	r0, [sp, #4]
	xQueueSendFromISR(xQueueBut, &press1, 0);
  402900:	2300      	movs	r3, #0
  402902:	461a      	mov	r2, r3
  402904:	4669      	mov	r1, sp
  402906:	4805      	ldr	r0, [pc, #20]	; (40291c <Button1_Handler+0x38>)
  402908:	6800      	ldr	r0, [r0, #0]
  40290a:	4c05      	ldr	r4, [pc, #20]	; (402920 <Button1_Handler+0x3c>)
  40290c:	47a0      	blx	r4
 }
  40290e:	b002      	add	sp, #8
  402910:	bd10      	pop	{r4, pc}
  402912:	bf00      	nop
  402914:	400e0e00 	.word	0x400e0e00
  402918:	0040083b 	.word	0x0040083b
  40291c:	20400ce8 	.word	0x20400ce8
  402920:	00401731 	.word	0x00401731

00402924 <Button2_Handler>:

void Button2_Handler(void){
  402924:	b510      	push	{r4, lr}
  402926:	b082      	sub	sp, #8
	press press2;
	press2.button = 2;
  402928:	2302      	movs	r3, #2
  40292a:	9300      	str	r3, [sp, #0]
	press2.status = !pio_get(BUT2_PIO, PIO_INPUT, BUT2_PIO_IDX_MASK);
  40292c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  402930:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402934:	4807      	ldr	r0, [pc, #28]	; (402954 <Button2_Handler+0x30>)
  402936:	4b08      	ldr	r3, [pc, #32]	; (402958 <Button2_Handler+0x34>)
  402938:	4798      	blx	r3
  40293a:	fab0 f080 	clz	r0, r0
  40293e:	0940      	lsrs	r0, r0, #5
  402940:	9001      	str	r0, [sp, #4]
	xQueueSendFromISR( xQueueBut, &press2, 0);
  402942:	2300      	movs	r3, #0
  402944:	461a      	mov	r2, r3
  402946:	4669      	mov	r1, sp
  402948:	4804      	ldr	r0, [pc, #16]	; (40295c <Button2_Handler+0x38>)
  40294a:	6800      	ldr	r0, [r0, #0]
  40294c:	4c04      	ldr	r4, [pc, #16]	; (402960 <Button2_Handler+0x3c>)
  40294e:	47a0      	blx	r4
}
  402950:	b002      	add	sp, #8
  402952:	bd10      	pop	{r4, pc}
  402954:	400e1200 	.word	0x400e1200
  402958:	0040083b 	.word	0x0040083b
  40295c:	20400ce8 	.word	0x20400ce8
  402960:	00401731 	.word	0x00401731

00402964 <Button3_Handler>:

void Button3_Handler(void){
  402964:	b510      	push	{r4, lr}
  402966:	b082      	sub	sp, #8
	press press3;
	press3.button = 3;
  402968:	2303      	movs	r3, #3
  40296a:	9300      	str	r3, [sp, #0]
	press3.status = !pio_get(BUT3_PIO, PIO_INPUT, BUT3_PIO_IDX_MASK);
  40296c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402970:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402974:	4807      	ldr	r0, [pc, #28]	; (402994 <Button3_Handler+0x30>)
  402976:	4b08      	ldr	r3, [pc, #32]	; (402998 <Button3_Handler+0x34>)
  402978:	4798      	blx	r3
  40297a:	fab0 f080 	clz	r0, r0
  40297e:	0940      	lsrs	r0, r0, #5
  402980:	9001      	str	r0, [sp, #4]
	xQueueSendFromISR(xQueueBut, &press3, 0);
  402982:	2300      	movs	r3, #0
  402984:	461a      	mov	r2, r3
  402986:	4669      	mov	r1, sp
  402988:	4804      	ldr	r0, [pc, #16]	; (40299c <Button3_Handler+0x38>)
  40298a:	6800      	ldr	r0, [r0, #0]
  40298c:	4c04      	ldr	r4, [pc, #16]	; (4029a0 <Button3_Handler+0x3c>)
  40298e:	47a0      	blx	r4
}
  402990:	b002      	add	sp, #8
  402992:	bd10      	pop	{r4, pc}
  402994:	400e0e00 	.word	0x400e0e00
  402998:	0040083b 	.word	0x0040083b
  40299c:	20400ce8 	.word	0x20400ce8
  4029a0:	00401731 	.word	0x00401731

004029a4 <Button4_Handler>:

void Button4_Handler(void){
  4029a4:	b510      	push	{r4, lr}
  4029a6:	b082      	sub	sp, #8
	press press4;
	press4.button = 4;
  4029a8:	2304      	movs	r3, #4
  4029aa:	9300      	str	r3, [sp, #0]
	press4.status = !pio_get(BUT4_PIO, PIO_INPUT, BUT4_PIO_IDX_MASK);
  4029ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4029b0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4029b4:	4807      	ldr	r0, [pc, #28]	; (4029d4 <Button4_Handler+0x30>)
  4029b6:	4b08      	ldr	r3, [pc, #32]	; (4029d8 <Button4_Handler+0x34>)
  4029b8:	4798      	blx	r3
  4029ba:	fab0 f080 	clz	r0, r0
  4029be:	0940      	lsrs	r0, r0, #5
  4029c0:	9001      	str	r0, [sp, #4]
	xQueueSendFromISR(xQueueBut, &press4, 0);
  4029c2:	2300      	movs	r3, #0
  4029c4:	461a      	mov	r2, r3
  4029c6:	4669      	mov	r1, sp
  4029c8:	4804      	ldr	r0, [pc, #16]	; (4029dc <Button4_Handler+0x38>)
  4029ca:	6800      	ldr	r0, [r0, #0]
  4029cc:	4c04      	ldr	r4, [pc, #16]	; (4029e0 <Button4_Handler+0x3c>)
  4029ce:	47a0      	blx	r4
}
  4029d0:	b002      	add	sp, #8
  4029d2:	bd10      	pop	{r4, pc}
  4029d4:	400e1400 	.word	0x400e1400
  4029d8:	0040083b 	.word	0x0040083b
  4029dc:	20400ce8 	.word	0x20400ce8
  4029e0:	00401731 	.word	0x00401731

004029e4 <Button8_Handler>:

void Button8_Handler(void){
  4029e4:	b510      	push	{r4, lr}
  4029e6:	b082      	sub	sp, #8
	press press8;
	press8.button = 8;
  4029e8:	2308      	movs	r3, #8
  4029ea:	9300      	str	r3, [sp, #0]
	press8.status = !pio_get(BUT8_PIO, PIO_INPUT, BUT8_PIO_IDX_MASK);
  4029ec:	2201      	movs	r2, #1
  4029ee:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4029f2:	4808      	ldr	r0, [pc, #32]	; (402a14 <Button8_Handler+0x30>)
  4029f4:	4b08      	ldr	r3, [pc, #32]	; (402a18 <Button8_Handler+0x34>)
  4029f6:	4798      	blx	r3
  4029f8:	fab0 f080 	clz	r0, r0
  4029fc:	0940      	lsrs	r0, r0, #5
  4029fe:	9001      	str	r0, [sp, #4]
	xQueueSendFromISR(xQueueBut, &press8, 0);
  402a00:	2300      	movs	r3, #0
  402a02:	461a      	mov	r2, r3
  402a04:	4669      	mov	r1, sp
  402a06:	4805      	ldr	r0, [pc, #20]	; (402a1c <Button8_Handler+0x38>)
  402a08:	6800      	ldr	r0, [r0, #0]
  402a0a:	4c05      	ldr	r4, [pc, #20]	; (402a20 <Button8_Handler+0x3c>)
  402a0c:	47a0      	blx	r4
}
  402a0e:	b002      	add	sp, #8
  402a10:	bd10      	pop	{r4, pc}
  402a12:	bf00      	nop
  402a14:	400e0e00 	.word	0x400e0e00
  402a18:	0040083b 	.word	0x0040083b
  402a1c:	20400ce8 	.word	0x20400ce8
  402a20:	00401731 	.word	0x00401731

00402a24 <Button9_Handler>:

void Button9_Handler(void){
  402a24:	b510      	push	{r4, lr}
  402a26:	b082      	sub	sp, #8
	press press9;
	press9.button = 9;
  402a28:	2309      	movs	r3, #9
  402a2a:	9300      	str	r3, [sp, #0]
	press9.status = !pio_get(BUT9_PIO, PIO_INPUT, BUT9_PIO_IDX_MASK);
  402a2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  402a30:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402a34:	4807      	ldr	r0, [pc, #28]	; (402a54 <Button9_Handler+0x30>)
  402a36:	4b08      	ldr	r3, [pc, #32]	; (402a58 <Button9_Handler+0x34>)
  402a38:	4798      	blx	r3
  402a3a:	fab0 f080 	clz	r0, r0
  402a3e:	0940      	lsrs	r0, r0, #5
  402a40:	9001      	str	r0, [sp, #4]
	xQueueSendFromISR(xQueueBut, &press9, 0);
  402a42:	2300      	movs	r3, #0
  402a44:	461a      	mov	r2, r3
  402a46:	4669      	mov	r1, sp
  402a48:	4804      	ldr	r0, [pc, #16]	; (402a5c <Button9_Handler+0x38>)
  402a4a:	6800      	ldr	r0, [r0, #0]
  402a4c:	4c04      	ldr	r4, [pc, #16]	; (402a60 <Button9_Handler+0x3c>)
  402a4e:	47a0      	blx	r4
}
  402a50:	b002      	add	sp, #8
  402a52:	bd10      	pop	{r4, pc}
  402a54:	400e1200 	.word	0x400e1200
  402a58:	0040083b 	.word	0x0040083b
  402a5c:	20400ce8 	.word	0x20400ce8
  402a60:	00401731 	.word	0x00401731

00402a64 <Button10_Handler>:

void Button10_Handler(void){
  402a64:	b510      	push	{r4, lr}
  402a66:	b082      	sub	sp, #8
	press press10;
	press10.button = 10;
  402a68:	230a      	movs	r3, #10
  402a6a:	9300      	str	r3, [sp, #0]
	press10.status = !pio_get(BUT10_PIO, PIO_INPUT, BUT10_PIO_IDX_MASK);
  402a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402a70:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402a74:	4807      	ldr	r0, [pc, #28]	; (402a94 <Button10_Handler+0x30>)
  402a76:	4b08      	ldr	r3, [pc, #32]	; (402a98 <Button10_Handler+0x34>)
  402a78:	4798      	blx	r3
  402a7a:	fab0 f080 	clz	r0, r0
  402a7e:	0940      	lsrs	r0, r0, #5
  402a80:	9001      	str	r0, [sp, #4]
	xQueueSendFromISR(xQueueBut, &press10, 0);
  402a82:	2300      	movs	r3, #0
  402a84:	461a      	mov	r2, r3
  402a86:	4669      	mov	r1, sp
  402a88:	4804      	ldr	r0, [pc, #16]	; (402a9c <Button10_Handler+0x38>)
  402a8a:	6800      	ldr	r0, [r0, #0]
  402a8c:	4c04      	ldr	r4, [pc, #16]	; (402aa0 <Button10_Handler+0x3c>)
  402a8e:	47a0      	blx	r4
}
  402a90:	b002      	add	sp, #8
  402a92:	bd10      	pop	{r4, pc}
  402a94:	400e1400 	.word	0x400e1400
  402a98:	0040083b 	.word	0x0040083b
  402a9c:	20400ce8 	.word	0x20400ce8
  402aa0:	00401731 	.word	0x00401731

00402aa4 <Button11_Handler>:

void Button11_Handler(void){
  402aa4:	b510      	push	{r4, lr}
  402aa6:	b082      	sub	sp, #8
	press press11;
	press11.button = 11;
  402aa8:	230b      	movs	r3, #11
  402aaa:	9300      	str	r3, [sp, #0]
	press11.status = !pio_get(BUT11_PIO, PIO_INPUT, BUT11_PIO_IDX_MASK);
  402aac:	2210      	movs	r2, #16
  402aae:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402ab2:	4808      	ldr	r0, [pc, #32]	; (402ad4 <Button11_Handler+0x30>)
  402ab4:	4b08      	ldr	r3, [pc, #32]	; (402ad8 <Button11_Handler+0x34>)
  402ab6:	4798      	blx	r3
  402ab8:	fab0 f080 	clz	r0, r0
  402abc:	0940      	lsrs	r0, r0, #5
  402abe:	9001      	str	r0, [sp, #4]
	xQueueSendFromISR( xQueueBut, &press11, 0);
  402ac0:	2300      	movs	r3, #0
  402ac2:	461a      	mov	r2, r3
  402ac4:	4669      	mov	r1, sp
  402ac6:	4805      	ldr	r0, [pc, #20]	; (402adc <Button11_Handler+0x38>)
  402ac8:	6800      	ldr	r0, [r0, #0]
  402aca:	4c05      	ldr	r4, [pc, #20]	; (402ae0 <Button11_Handler+0x3c>)
  402acc:	47a0      	blx	r4
}
  402ace:	b002      	add	sp, #8
  402ad0:	bd10      	pop	{r4, pc}
  402ad2:	bf00      	nop
  402ad4:	400e0e00 	.word	0x400e0e00
  402ad8:	0040083b 	.word	0x0040083b
  402adc:	20400ce8 	.word	0x20400ce8
  402ae0:	00401731 	.word	0x00401731

00402ae4 <AFEC_Res_callback>:
{
  402ae4:	b510      	push	{r4, lr}
  402ae6:	b082      	sub	sp, #8
	y.axis = 1;
  402ae8:	2301      	movs	r3, #1
  402aea:	9300      	str	r3, [sp, #0]
	afec->AFEC_CSELR = afec_ch;
  402aec:	4b06      	ldr	r3, [pc, #24]	; (402b08 <AFEC_Res_callback+0x24>)
  402aee:	2205      	movs	r2, #5
  402af0:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  402af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	y.value = afec_channel_get_value(AFEC0, AFEC_CHANNEL_RES_PIN);
  402af4:	9301      	str	r3, [sp, #4]
	xQueueSendFromISR( xQueueAfec, &y, 0);
  402af6:	2300      	movs	r3, #0
  402af8:	461a      	mov	r2, r3
  402afa:	4669      	mov	r1, sp
  402afc:	4803      	ldr	r0, [pc, #12]	; (402b0c <AFEC_Res_callback+0x28>)
  402afe:	6800      	ldr	r0, [r0, #0]
  402b00:	4c03      	ldr	r4, [pc, #12]	; (402b10 <AFEC_Res_callback+0x2c>)
  402b02:	47a0      	blx	r4
}
  402b04:	b002      	add	sp, #8
  402b06:	bd10      	pop	{r4, pc}
  402b08:	4003c000 	.word	0x4003c000
  402b0c:	20400cec 	.word	0x20400cec
  402b10:	00401731 	.word	0x00401731

00402b14 <AFEC_Temp_callback>:
{
  402b14:	b510      	push	{r4, lr}
  402b16:	b082      	sub	sp, #8
	x.axis = 0;
  402b18:	2200      	movs	r2, #0
  402b1a:	9200      	str	r2, [sp, #0]
	afec->AFEC_CSELR = afec_ch;
  402b1c:	4b06      	ldr	r3, [pc, #24]	; (402b38 <AFEC_Temp_callback+0x24>)
  402b1e:	2102      	movs	r1, #2
  402b20:	6659      	str	r1, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  402b22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	x.value = afec_channel_get_value(AFEC0, AFEC_CHANNEL_TEMP_SENSOR);
  402b24:	9301      	str	r3, [sp, #4]
	xQueueSendFromISR( xQueueAfec, &x, 0);
  402b26:	4613      	mov	r3, r2
  402b28:	4669      	mov	r1, sp
  402b2a:	4804      	ldr	r0, [pc, #16]	; (402b3c <AFEC_Temp_callback+0x28>)
  402b2c:	6800      	ldr	r0, [r0, #0]
  402b2e:	4c04      	ldr	r4, [pc, #16]	; (402b40 <AFEC_Temp_callback+0x2c>)
  402b30:	47a0      	blx	r4
}
  402b32:	b002      	add	sp, #8
  402b34:	bd10      	pop	{r4, pc}
  402b36:	bf00      	nop
  402b38:	4003c000 	.word	0x4003c000
  402b3c:	20400cec 	.word	0x20400cec
  402b40:	00401731 	.word	0x00401731

00402b44 <task_afec>:
		usart_write(USART_COM, eof);
		vTaskDelay( 10 / portTICK_PERIOD_MS);
	}
}

void task_afec(void){
  402b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402b48:	b08a      	sub	sp, #40	; 0x28
	afec_enable(AFEC0);
  402b4a:	4c22      	ldr	r4, [pc, #136]	; (402bd4 <task_afec+0x90>)
  402b4c:	4620      	mov	r0, r4
  402b4e:	4b22      	ldr	r3, [pc, #136]	; (402bd8 <task_afec+0x94>)
  402b50:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  402b52:	a804      	add	r0, sp, #16
  402b54:	4b21      	ldr	r3, [pc, #132]	; (402bdc <task_afec+0x98>)
  402b56:	4798      	blx	r3
	afec_init(AFEC0, &afec_cfg);
  402b58:	a904      	add	r1, sp, #16
  402b5a:	4620      	mov	r0, r4
  402b5c:	4b20      	ldr	r3, [pc, #128]	; (402be0 <task_afec+0x9c>)
  402b5e:	4798      	blx	r3
	reg = afec->AFEC_MR;
  402b60:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  402b62:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  402b66:	6063      	str	r3, [r4, #4]
	afec_set_callback(AFEC0, AFEC_INTERRUPT_EOC_2,	AFEC_Temp_callback, 1);
  402b68:	2301      	movs	r3, #1
  402b6a:	4a1e      	ldr	r2, [pc, #120]	; (402be4 <task_afec+0xa0>)
  402b6c:	2102      	movs	r1, #2
  402b6e:	4620      	mov	r0, r4
  402b70:	4d1d      	ldr	r5, [pc, #116]	; (402be8 <task_afec+0xa4>)
  402b72:	47a8      	blx	r5
	afec_set_callback(AFEC0, AFEC_INTERRUPT_EOC_5,	AFEC_Res_callback, 1);
  402b74:	2301      	movs	r3, #1
  402b76:	4a1d      	ldr	r2, [pc, #116]	; (402bec <task_afec+0xa8>)
  402b78:	2105      	movs	r1, #5
  402b7a:	4620      	mov	r0, r4
  402b7c:	47a8      	blx	r5
	afec_ch_get_config_defaults(&afec_ch_cfg);
  402b7e:	a801      	add	r0, sp, #4
  402b80:	4b1b      	ldr	r3, [pc, #108]	; (402bf0 <task_afec+0xac>)
  402b82:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  402b84:	2300      	movs	r3, #0
  402b86:	f88d 3005 	strb.w	r3, [sp, #5]
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_TEMP_SENSOR, &afec_ch_cfg);
  402b8a:	aa01      	add	r2, sp, #4
  402b8c:	2102      	movs	r1, #2
  402b8e:	4620      	mov	r0, r4
  402b90:	4b18      	ldr	r3, [pc, #96]	; (402bf4 <task_afec+0xb0>)
  402b92:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  402b94:	2302      	movs	r3, #2
  402b96:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  402b98:	f44f 7300 	mov.w	r3, #512	; 0x200
  402b9c:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec->AFEC_CSELR = afec_ch;
  402b9e:	2205      	movs	r2, #5
  402ba0:	6662      	str	r2, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  402ba2:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  402ba4:	a802      	add	r0, sp, #8
  402ba6:	4b14      	ldr	r3, [pc, #80]	; (402bf8 <task_afec+0xb4>)
  402ba8:	4798      	blx	r3
	afec_temp_sensor_set_config(AFEC0, &afec_temp_sensor_cfg);
  402baa:	a902      	add	r1, sp, #8
  402bac:	4620      	mov	r0, r4
  402bae:	4b13      	ldr	r3, [pc, #76]	; (402bfc <task_afec+0xb8>)
  402bb0:	4798      	blx	r3
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  402bb2:	f04f 0804 	mov.w	r8, #4
	config_ADC_TEMP_RES();
	const TickType_t xDelay = 100 / portTICK_PERIOD_MS;
	for(;;){
		afec_channel_enable(AFEC0, AFEC_CHANNEL_TEMP_SENSOR);
		afec_start_software_conversion(AFEC0);
		vTaskDelay(xDelay);
  402bb6:	2764      	movs	r7, #100	; 0x64
  402bb8:	f8c4 8014 	str.w	r8, [r4, #20]
	afec->AFEC_CR = AFEC_CR_START;
  402bbc:	2602      	movs	r6, #2
  402bbe:	6026      	str	r6, [r4, #0]
  402bc0:	4638      	mov	r0, r7
  402bc2:	4d0f      	ldr	r5, [pc, #60]	; (402c00 <task_afec+0xbc>)
  402bc4:	47a8      	blx	r5
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  402bc6:	2320      	movs	r3, #32
  402bc8:	6163      	str	r3, [r4, #20]
	afec->AFEC_CR = AFEC_CR_START;
  402bca:	6026      	str	r6, [r4, #0]
		afec_channel_enable(AFEC0, AFEC_CHANNEL_RES_PIN);
		afec_start_software_conversion(AFEC0);
		vTaskDelay(xDelay);
  402bcc:	4638      	mov	r0, r7
  402bce:	47a8      	blx	r5
  402bd0:	e7f2      	b.n	402bb8 <task_afec+0x74>
  402bd2:	bf00      	nop
  402bd4:	4003c000 	.word	0x4003c000
  402bd8:	004007b5 	.word	0x004007b5
  402bdc:	004005e5 	.word	0x004005e5
  402be0:	00400635 	.word	0x00400635
  402be4:	00402b15 	.word	0x00402b15
  402be8:	00400735 	.word	0x00400735
  402bec:	00402ae5 	.word	0x00402ae5
  402bf0:	00400615 	.word	0x00400615
  402bf4:	004005a1 	.word	0x004005a1
  402bf8:	0040061f 	.word	0x0040061f
  402bfc:	004005d1 	.word	0x004005d1
  402c00:	00401f11 	.word	0x00401f11

00402c04 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402c04:	b5f0      	push	{r4, r5, r6, r7, lr}
  402c06:	b083      	sub	sp, #12
  402c08:	4605      	mov	r5, r0
  402c0a:	460c      	mov	r4, r1
	uint32_t val = 0;
  402c0c:	2300      	movs	r3, #0
  402c0e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402c10:	4b2a      	ldr	r3, [pc, #168]	; (402cbc <usart_serial_getchar+0xb8>)
  402c12:	4298      	cmp	r0, r3
  402c14:	d013      	beq.n	402c3e <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402c16:	4b2a      	ldr	r3, [pc, #168]	; (402cc0 <usart_serial_getchar+0xbc>)
  402c18:	4298      	cmp	r0, r3
  402c1a:	d018      	beq.n	402c4e <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402c1c:	4b29      	ldr	r3, [pc, #164]	; (402cc4 <usart_serial_getchar+0xc0>)
  402c1e:	4298      	cmp	r0, r3
  402c20:	d01d      	beq.n	402c5e <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402c22:	4b29      	ldr	r3, [pc, #164]	; (402cc8 <usart_serial_getchar+0xc4>)
  402c24:	429d      	cmp	r5, r3
  402c26:	d022      	beq.n	402c6e <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402c28:	4b28      	ldr	r3, [pc, #160]	; (402ccc <usart_serial_getchar+0xc8>)
  402c2a:	429d      	cmp	r5, r3
  402c2c:	d027      	beq.n	402c7e <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402c2e:	4b28      	ldr	r3, [pc, #160]	; (402cd0 <usart_serial_getchar+0xcc>)
  402c30:	429d      	cmp	r5, r3
  402c32:	d02e      	beq.n	402c92 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402c34:	4b27      	ldr	r3, [pc, #156]	; (402cd4 <usart_serial_getchar+0xd0>)
  402c36:	429d      	cmp	r5, r3
  402c38:	d035      	beq.n	402ca6 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402c3a:	b003      	add	sp, #12
  402c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  402c3e:	461f      	mov	r7, r3
  402c40:	4e25      	ldr	r6, [pc, #148]	; (402cd8 <usart_serial_getchar+0xd4>)
  402c42:	4621      	mov	r1, r4
  402c44:	4638      	mov	r0, r7
  402c46:	47b0      	blx	r6
  402c48:	2800      	cmp	r0, #0
  402c4a:	d1fa      	bne.n	402c42 <usart_serial_getchar+0x3e>
  402c4c:	e7e9      	b.n	402c22 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  402c4e:	461f      	mov	r7, r3
  402c50:	4e21      	ldr	r6, [pc, #132]	; (402cd8 <usart_serial_getchar+0xd4>)
  402c52:	4621      	mov	r1, r4
  402c54:	4638      	mov	r0, r7
  402c56:	47b0      	blx	r6
  402c58:	2800      	cmp	r0, #0
  402c5a:	d1fa      	bne.n	402c52 <usart_serial_getchar+0x4e>
  402c5c:	e7e4      	b.n	402c28 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  402c5e:	461f      	mov	r7, r3
  402c60:	4e1d      	ldr	r6, [pc, #116]	; (402cd8 <usart_serial_getchar+0xd4>)
  402c62:	4621      	mov	r1, r4
  402c64:	4638      	mov	r0, r7
  402c66:	47b0      	blx	r6
  402c68:	2800      	cmp	r0, #0
  402c6a:	d1fa      	bne.n	402c62 <usart_serial_getchar+0x5e>
  402c6c:	e7df      	b.n	402c2e <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  402c6e:	461f      	mov	r7, r3
  402c70:	4e19      	ldr	r6, [pc, #100]	; (402cd8 <usart_serial_getchar+0xd4>)
  402c72:	4621      	mov	r1, r4
  402c74:	4638      	mov	r0, r7
  402c76:	47b0      	blx	r6
  402c78:	2800      	cmp	r0, #0
  402c7a:	d1fa      	bne.n	402c72 <usart_serial_getchar+0x6e>
  402c7c:	e7da      	b.n	402c34 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  402c7e:	461e      	mov	r6, r3
  402c80:	4d16      	ldr	r5, [pc, #88]	; (402cdc <usart_serial_getchar+0xd8>)
  402c82:	a901      	add	r1, sp, #4
  402c84:	4630      	mov	r0, r6
  402c86:	47a8      	blx	r5
  402c88:	2800      	cmp	r0, #0
  402c8a:	d1fa      	bne.n	402c82 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  402c8c:	9b01      	ldr	r3, [sp, #4]
  402c8e:	7023      	strb	r3, [r4, #0]
  402c90:	e7d3      	b.n	402c3a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402c92:	461e      	mov	r6, r3
  402c94:	4d11      	ldr	r5, [pc, #68]	; (402cdc <usart_serial_getchar+0xd8>)
  402c96:	a901      	add	r1, sp, #4
  402c98:	4630      	mov	r0, r6
  402c9a:	47a8      	blx	r5
  402c9c:	2800      	cmp	r0, #0
  402c9e:	d1fa      	bne.n	402c96 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  402ca0:	9b01      	ldr	r3, [sp, #4]
  402ca2:	7023      	strb	r3, [r4, #0]
  402ca4:	e7c9      	b.n	402c3a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402ca6:	461e      	mov	r6, r3
  402ca8:	4d0c      	ldr	r5, [pc, #48]	; (402cdc <usart_serial_getchar+0xd8>)
  402caa:	a901      	add	r1, sp, #4
  402cac:	4630      	mov	r0, r6
  402cae:	47a8      	blx	r5
  402cb0:	2800      	cmp	r0, #0
  402cb2:	d1fa      	bne.n	402caa <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  402cb4:	9b01      	ldr	r3, [sp, #4]
  402cb6:	7023      	strb	r3, [r4, #0]
}
  402cb8:	e7bf      	b.n	402c3a <usart_serial_getchar+0x36>
  402cba:	bf00      	nop
  402cbc:	400e0800 	.word	0x400e0800
  402cc0:	400e0a00 	.word	0x400e0a00
  402cc4:	400e1a00 	.word	0x400e1a00
  402cc8:	400e1c00 	.word	0x400e1c00
  402ccc:	40024000 	.word	0x40024000
  402cd0:	40028000 	.word	0x40028000
  402cd4:	4002c000 	.word	0x4002c000
  402cd8:	00400cbf 	.word	0x00400cbf
  402cdc:	00400dd3 	.word	0x00400dd3

00402ce0 <vApplicationStackOverflowHook>:
{
  402ce0:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  402ce2:	460a      	mov	r2, r1
  402ce4:	4601      	mov	r1, r0
  402ce6:	4802      	ldr	r0, [pc, #8]	; (402cf0 <vApplicationStackOverflowHook+0x10>)
  402ce8:	4b02      	ldr	r3, [pc, #8]	; (402cf4 <vApplicationStackOverflowHook+0x14>)
  402cea:	4798      	blx	r3
  402cec:	e7fe      	b.n	402cec <vApplicationStackOverflowHook+0xc>
  402cee:	bf00      	nop
  402cf0:	00406524 	.word	0x00406524
  402cf4:	004037bd 	.word	0x004037bd

00402cf8 <vApplicationTickHook>:
{
  402cf8:	4770      	bx	lr

00402cfa <vApplicationMallocFailedHook>:
{
  402cfa:	4770      	bx	lr

00402cfc <io_init>:
void io_init(void){
  402cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  402cfe:	b083      	sub	sp, #12
	pmc_enable_periph_clk(ID_PIOA);
  402d00:	200a      	movs	r0, #10
  402d02:	4c77      	ldr	r4, [pc, #476]	; (402ee0 <io_init+0x1e4>)
  402d04:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOB);
  402d06:	200b      	movs	r0, #11
  402d08:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOC);
  402d0a:	200c      	movs	r0, #12
  402d0c:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOD);
  402d0e:	2010      	movs	r0, #16
  402d10:	47a0      	blx	r4
	pio_set_input(BUT0_PIO, BUT0_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  402d12:	4d74      	ldr	r5, [pc, #464]	; (402ee4 <io_init+0x1e8>)
  402d14:	2209      	movs	r2, #9
  402d16:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402d1a:	4628      	mov	r0, r5
  402d1c:	4e72      	ldr	r6, [pc, #456]	; (402ee8 <io_init+0x1ec>)
  402d1e:	47b0      	blx	r6
	pio_set_input(BUT1_PIO, BUT1_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  402d20:	4c72      	ldr	r4, [pc, #456]	; (402eec <io_init+0x1f0>)
  402d22:	2209      	movs	r2, #9
  402d24:	2108      	movs	r1, #8
  402d26:	4620      	mov	r0, r4
  402d28:	47b0      	blx	r6
	pio_set_input(BUT2_PIO, BUT2_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  402d2a:	2209      	movs	r2, #9
  402d2c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402d30:	4628      	mov	r0, r5
  402d32:	47b0      	blx	r6
	pio_set_input(BUT3_PIO, BUT3_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  402d34:	2209      	movs	r2, #9
  402d36:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  402d3a:	4620      	mov	r0, r4
  402d3c:	47b0      	blx	r6
	pio_set_input(BUT4_PIO, BUT4_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  402d3e:	4f6c      	ldr	r7, [pc, #432]	; (402ef0 <io_init+0x1f4>)
  402d40:	2209      	movs	r2, #9
  402d42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  402d46:	4638      	mov	r0, r7
  402d48:	47b0      	blx	r6
	pio_set_input(BUT8_PIO, BUT8_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  402d4a:	2209      	movs	r2, #9
  402d4c:	2101      	movs	r1, #1
  402d4e:	4620      	mov	r0, r4
  402d50:	47b0      	blx	r6
	pio_set_input(BUT9_PIO, BUT9_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  402d52:	2209      	movs	r2, #9
  402d54:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  402d58:	4628      	mov	r0, r5
  402d5a:	47b0      	blx	r6
	pio_set_input(BUT10_PIO, BUT10_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  402d5c:	2209      	movs	r2, #9
  402d5e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402d62:	4638      	mov	r0, r7
  402d64:	47b0      	blx	r6
	pio_set_input(BUT11_PIO, BUT11_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  402d66:	2209      	movs	r2, #9
  402d68:	2110      	movs	r1, #16
  402d6a:	4620      	mov	r0, r4
  402d6c:	47b0      	blx	r6
	pio_set_debounce_filter(BUT0_PIO, BUT0_PIO_IDX_MASK, BUT0_DEBOUNCING_VALUE);
  402d6e:	224f      	movs	r2, #79	; 0x4f
  402d70:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402d74:	4628      	mov	r0, r5
  402d76:	4e5f      	ldr	r6, [pc, #380]	; (402ef4 <io_init+0x1f8>)
  402d78:	47b0      	blx	r6
	pio_set_debounce_filter(BUT1_PIO, BUT1_PIO_IDX_MASK, BUT1_DEBOUNCING_VALUE);
  402d7a:	224f      	movs	r2, #79	; 0x4f
  402d7c:	2108      	movs	r1, #8
  402d7e:	4620      	mov	r0, r4
  402d80:	47b0      	blx	r6
	pio_set_debounce_filter(BUT2_PIO, BUT2_PIO_IDX_MASK, BUT2_DEBOUNCING_VALUE);
  402d82:	224f      	movs	r2, #79	; 0x4f
  402d84:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402d88:	4628      	mov	r0, r5
  402d8a:	47b0      	blx	r6
	pio_set_debounce_filter(BUT3_PIO, BUT3_PIO_IDX_MASK, BUT3_DEBOUNCING_VALUE);
  402d8c:	224f      	movs	r2, #79	; 0x4f
  402d8e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  402d92:	4620      	mov	r0, r4
  402d94:	47b0      	blx	r6
	pio_set_debounce_filter(BUT4_PIO, BUT4_PIO_IDX_MASK, BUT4_DEBOUNCING_VALUE);
  402d96:	224f      	movs	r2, #79	; 0x4f
  402d98:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  402d9c:	4638      	mov	r0, r7
  402d9e:	47b0      	blx	r6
	pio_set_debounce_filter(BUT8_PIO, BUT8_PIO_IDX_MASK, BUT8_DEBOUNCING_VALUE);
  402da0:	224f      	movs	r2, #79	; 0x4f
  402da2:	2101      	movs	r1, #1
  402da4:	4620      	mov	r0, r4
  402da6:	47b0      	blx	r6
	pio_set_debounce_filter(BUT9_PIO, BUT9_PIO_IDX_MASK, BUT9_DEBOUNCING_VALUE);
  402da8:	224f      	movs	r2, #79	; 0x4f
  402daa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  402dae:	4628      	mov	r0, r5
  402db0:	47b0      	blx	r6
	pio_set_debounce_filter(BUT10_PIO, BUT10_PIO_IDX_MASK, BUT10_DEBOUNCING_VALUE);
  402db2:	224f      	movs	r2, #79	; 0x4f
  402db4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402db8:	4638      	mov	r0, r7
  402dba:	47b0      	blx	r6
	pio_set_debounce_filter(BUT11_PIO, BUT11_PIO_IDX_MASK, BUT11_DEBOUNCING_VALUE);
  402dbc:	224f      	movs	r2, #79	; 0x4f
  402dbe:	2110      	movs	r1, #16
  402dc0:	4620      	mov	r0, r4
  402dc2:	47b0      	blx	r6
	pio_handler_set(BUT0_PIO, BUT0_PIO_ID, BUT0_PIO_IDX_MASK, PIO_IT_EDGE, Button0_Handler);
  402dc4:	4b4c      	ldr	r3, [pc, #304]	; (402ef8 <io_init+0x1fc>)
  402dc6:	9300      	str	r3, [sp, #0]
  402dc8:	2340      	movs	r3, #64	; 0x40
  402dca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402dce:	210c      	movs	r1, #12
  402dd0:	4628      	mov	r0, r5
  402dd2:	4e4a      	ldr	r6, [pc, #296]	; (402efc <io_init+0x200>)
  402dd4:	47b0      	blx	r6
	pio_handler_set(BUT1_PIO, BUT1_PIO_ID, BUT1_PIO_IDX_MASK, PIO_IT_EDGE, Button1_Handler);
  402dd6:	4b4a      	ldr	r3, [pc, #296]	; (402f00 <io_init+0x204>)
  402dd8:	9300      	str	r3, [sp, #0]
  402dda:	2340      	movs	r3, #64	; 0x40
  402ddc:	2208      	movs	r2, #8
  402dde:	210a      	movs	r1, #10
  402de0:	4620      	mov	r0, r4
  402de2:	47b0      	blx	r6
	pio_handler_set(BUT2_PIO, BUT2_PIO_ID, BUT2_PIO_IDX_MASK, PIO_IT_EDGE, Button2_Handler);
  402de4:	4b47      	ldr	r3, [pc, #284]	; (402f04 <io_init+0x208>)
  402de6:	9300      	str	r3, [sp, #0]
  402de8:	2340      	movs	r3, #64	; 0x40
  402dea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  402dee:	210c      	movs	r1, #12
  402df0:	4628      	mov	r0, r5
  402df2:	47b0      	blx	r6
	pio_handler_set(BUT3_PIO, BUT3_PIO_ID, BUT3_PIO_IDX_MASK, PIO_IT_EDGE, Button3_Handler);
  402df4:	4b44      	ldr	r3, [pc, #272]	; (402f08 <io_init+0x20c>)
  402df6:	9300      	str	r3, [sp, #0]
  402df8:	2340      	movs	r3, #64	; 0x40
  402dfa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402dfe:	210a      	movs	r1, #10
  402e00:	4620      	mov	r0, r4
  402e02:	47b0      	blx	r6
	pio_handler_set(BUT4_PIO, BUT4_PIO_ID, BUT4_PIO_IDX_MASK, PIO_IT_EDGE, Button4_Handler);
  402e04:	4b41      	ldr	r3, [pc, #260]	; (402f0c <io_init+0x210>)
  402e06:	9300      	str	r3, [sp, #0]
  402e08:	2340      	movs	r3, #64	; 0x40
  402e0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  402e0e:	2110      	movs	r1, #16
  402e10:	4638      	mov	r0, r7
  402e12:	47b0      	blx	r6
	pio_handler_set(BUT8_PIO, BUT8_PIO_ID, BUT8_PIO_IDX_MASK, PIO_IT_EDGE, Button8_Handler);
  402e14:	4b3e      	ldr	r3, [pc, #248]	; (402f10 <io_init+0x214>)
  402e16:	9300      	str	r3, [sp, #0]
  402e18:	2340      	movs	r3, #64	; 0x40
  402e1a:	2201      	movs	r2, #1
  402e1c:	210a      	movs	r1, #10
  402e1e:	4620      	mov	r0, r4
  402e20:	47b0      	blx	r6
	pio_handler_set(BUT9_PIO, BUT9_PIO_ID, BUT9_PIO_IDX_MASK, PIO_IT_EDGE, Button9_Handler);
  402e22:	4b3c      	ldr	r3, [pc, #240]	; (402f14 <io_init+0x218>)
  402e24:	9300      	str	r3, [sp, #0]
  402e26:	2340      	movs	r3, #64	; 0x40
  402e28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  402e2c:	210c      	movs	r1, #12
  402e2e:	4628      	mov	r0, r5
  402e30:	47b0      	blx	r6
	pio_handler_set(BUT10_PIO, BUT10_PIO_ID, BUT10_PIO_IDX_MASK, PIO_IT_EDGE, Button10_Handler);
  402e32:	4b39      	ldr	r3, [pc, #228]	; (402f18 <io_init+0x21c>)
  402e34:	9300      	str	r3, [sp, #0]
  402e36:	2340      	movs	r3, #64	; 0x40
  402e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402e3c:	2110      	movs	r1, #16
  402e3e:	4638      	mov	r0, r7
  402e40:	47b0      	blx	r6
	pio_handler_set(BUT11_PIO, BUT11_PIO_ID, BUT11_PIO_IDX_MASK, PIO_IT_EDGE, Button11_Handler);
  402e42:	4b36      	ldr	r3, [pc, #216]	; (402f1c <io_init+0x220>)
  402e44:	9300      	str	r3, [sp, #0]
  402e46:	2340      	movs	r3, #64	; 0x40
  402e48:	2210      	movs	r2, #16
  402e4a:	210a      	movs	r1, #10
  402e4c:	4620      	mov	r0, r4
  402e4e:	47b0      	blx	r6
  402e50:	4b33      	ldr	r3, [pc, #204]	; (402f20 <io_init+0x224>)
  402e52:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  402e56:	6018      	str	r0, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402e58:	22a0      	movs	r2, #160	; 0xa0
  402e5a:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402e5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402e62:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402e64:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402e68:	6018      	str	r0, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402e6a:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402e6e:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402e70:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402e74:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  402e78:	601e      	str	r6, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402e7a:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402e7e:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402e80:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402e84:	6018      	str	r0, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402e86:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402e8a:	601e      	str	r6, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402e8c:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402e90:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402e92:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
	pio_enable_interrupt(BUT0_PIO, BUT0_PIO_IDX_MASK);
  402e96:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402e9a:	4628      	mov	r0, r5
  402e9c:	4e21      	ldr	r6, [pc, #132]	; (402f24 <io_init+0x228>)
  402e9e:	47b0      	blx	r6
	pio_enable_interrupt(BUT1_PIO, BUT1_PIO_IDX_MASK);
  402ea0:	2108      	movs	r1, #8
  402ea2:	4620      	mov	r0, r4
  402ea4:	47b0      	blx	r6
	pio_enable_interrupt(BUT2_PIO, BUT2_PIO_IDX_MASK);
  402ea6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402eaa:	4628      	mov	r0, r5
  402eac:	47b0      	blx	r6
	pio_enable_interrupt(BUT3_PIO, BUT3_PIO_IDX_MASK);
  402eae:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  402eb2:	4620      	mov	r0, r4
  402eb4:	47b0      	blx	r6
	pio_enable_interrupt(BUT4_PIO, BUT4_PIO_IDX_MASK);
  402eb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  402eba:	4638      	mov	r0, r7
  402ebc:	47b0      	blx	r6
	pio_enable_interrupt(BUT8_PIO, BUT8_PIO_IDX_MASK);
  402ebe:	2101      	movs	r1, #1
  402ec0:	4620      	mov	r0, r4
  402ec2:	47b0      	blx	r6
	pio_enable_interrupt(BUT9_PIO, BUT9_PIO_IDX_MASK);
  402ec4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  402ec8:	4628      	mov	r0, r5
  402eca:	47b0      	blx	r6
	pio_enable_interrupt(BUT10_PIO, BUT10_PIO_IDX_MASK);
  402ecc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402ed0:	4638      	mov	r0, r7
  402ed2:	47b0      	blx	r6
	pio_enable_interrupt(BUT11_PIO, BUT11_PIO_IDX_MASK);
  402ed4:	2110      	movs	r1, #16
  402ed6:	4620      	mov	r0, r4
  402ed8:	47b0      	blx	r6
}
  402eda:	b003      	add	sp, #12
  402edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402ede:	bf00      	nop
  402ee0:	00400c59 	.word	0x00400c59
  402ee4:	400e1200 	.word	0x400e1200
  402ee8:	004008e7 	.word	0x004008e7
  402eec:	400e0e00 	.word	0x400e0e00
  402ef0:	400e1400 	.word	0x400e1400
  402ef4:	00400819 	.word	0x00400819
  402ef8:	004028a5 	.word	0x004028a5
  402efc:	00400a65 	.word	0x00400a65
  402f00:	004028e5 	.word	0x004028e5
  402f04:	00402925 	.word	0x00402925
  402f08:	00402965 	.word	0x00402965
  402f0c:	004029a5 	.word	0x004029a5
  402f10:	004029e5 	.word	0x004029e5
  402f14:	00402a25 	.word	0x00402a25
  402f18:	00402a65 	.word	0x00402a65
  402f1c:	00402aa5 	.word	0x00402aa5
  402f20:	e000e100 	.word	0xe000e100
  402f24:	00400a07 	.word	0x00400a07

00402f28 <usart_put_string>:
void usart_put_string(Usart *usart, char str[]) {
  402f28:	b538      	push	{r3, r4, r5, lr}
  402f2a:	4605      	mov	r5, r0
  402f2c:	460c      	mov	r4, r1
  usart_serial_write_packet(usart, str, strlen(str));
  402f2e:	4608      	mov	r0, r1
  402f30:	4b03      	ldr	r3, [pc, #12]	; (402f40 <usart_put_string+0x18>)
  402f32:	4798      	blx	r3
  402f34:	4602      	mov	r2, r0
  402f36:	4621      	mov	r1, r4
  402f38:	4628      	mov	r0, r5
  402f3a:	4b02      	ldr	r3, [pc, #8]	; (402f44 <usart_put_string+0x1c>)
  402f3c:	4798      	blx	r3
  402f3e:	bd38      	pop	{r3, r4, r5, pc}
  402f40:	00404141 	.word	0x00404141
  402f44:	0040021d 	.word	0x0040021d

00402f48 <usart_get_string>:
int usart_get_string(Usart *usart, char buffer[], int bufferlen, uint timeout_ms) {
  402f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402f4c:	b085      	sub	sp, #20
  402f4e:	9001      	str	r0, [sp, #4]
  402f50:	468b      	mov	fp, r1
  402f52:	4615      	mov	r5, r2
  402f54:	4698      	mov	r8, r3
  uint32_t start = xTaskGetTickCount();
  402f56:	4b10      	ldr	r3, [pc, #64]	; (402f98 <usart_get_string+0x50>)
  402f58:	4798      	blx	r3
  402f5a:	4607      	mov	r7, r0
  402f5c:	f10b 3aff 	add.w	sl, fp, #4294967295
  402f60:	3d01      	subs	r5, #1
  uint32_t counter = 0;
  402f62:	2400      	movs	r4, #0
  while( (xTaskGetTickCount() - start < timeout_ms) && (counter < bufferlen - 1)) {
  402f64:	4e0c      	ldr	r6, [pc, #48]	; (402f98 <usart_get_string+0x50>)
    if(usart_read(usart, &rx) == 0) {
  402f66:	f8df 9034 	ldr.w	r9, [pc, #52]	; 402f9c <usart_get_string+0x54>
  while( (xTaskGetTickCount() - start < timeout_ms) && (counter < bufferlen - 1)) {
  402f6a:	47b0      	blx	r6
  402f6c:	1bc0      	subs	r0, r0, r7
  402f6e:	4540      	cmp	r0, r8
  402f70:	d20b      	bcs.n	402f8a <usart_get_string+0x42>
  402f72:	42ac      	cmp	r4, r5
  402f74:	d009      	beq.n	402f8a <usart_get_string+0x42>
    if(usart_read(usart, &rx) == 0) {
  402f76:	a903      	add	r1, sp, #12
  402f78:	9801      	ldr	r0, [sp, #4]
  402f7a:	47c8      	blx	r9
  402f7c:	2800      	cmp	r0, #0
  402f7e:	d1f4      	bne.n	402f6a <usart_get_string+0x22>
      buffer[counter++] = rx;
  402f80:	3401      	adds	r4, #1
  402f82:	9b03      	ldr	r3, [sp, #12]
  402f84:	f80a 3f01 	strb.w	r3, [sl, #1]!
  402f88:	e7ef      	b.n	402f6a <usart_get_string+0x22>
  buffer[counter] = 0x00;
  402f8a:	2300      	movs	r3, #0
  402f8c:	f80b 3004 	strb.w	r3, [fp, r4]
}
  402f90:	4620      	mov	r0, r4
  402f92:	b005      	add	sp, #20
  402f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f98:	00401cd1 	.word	0x00401cd1
  402f9c:	00400dd3 	.word	0x00400dd3

00402fa0 <usart_send_command>:
void usart_send_command(Usart *usart, char buffer_rx[], int bufferlen, char buffer_tx[], int timeout) {
  402fa0:	b570      	push	{r4, r5, r6, lr}
  402fa2:	4604      	mov	r4, r0
  402fa4:	460d      	mov	r5, r1
  402fa6:	4616      	mov	r6, r2
  usart_put_string(usart, buffer_tx);
  402fa8:	4619      	mov	r1, r3
  402faa:	4b04      	ldr	r3, [pc, #16]	; (402fbc <usart_send_command+0x1c>)
  402fac:	4798      	blx	r3
  usart_get_string(usart, buffer_rx, bufferlen, timeout);
  402fae:	9b04      	ldr	r3, [sp, #16]
  402fb0:	4632      	mov	r2, r6
  402fb2:	4629      	mov	r1, r5
  402fb4:	4620      	mov	r0, r4
  402fb6:	4c02      	ldr	r4, [pc, #8]	; (402fc0 <usart_send_command+0x20>)
  402fb8:	47a0      	blx	r4
  402fba:	bd70      	pop	{r4, r5, r6, pc}
  402fbc:	00402f29 	.word	0x00402f29
  402fc0:	00402f49 	.word	0x00402f49

00402fc4 <hc05_config_server>:
void hc05_config_server(void) {
  402fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
  402fc6:	b087      	sub	sp, #28
  402fc8:	200d      	movs	r0, #13
  402fca:	4c17      	ldr	r4, [pc, #92]	; (403028 <hc05_config_server+0x64>)
  402fcc:	47a0      	blx	r4
	usart_settings.baudrate = opt->baudrate;
  402fce:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  402fd2:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  402fd4:	23c0      	movs	r3, #192	; 0xc0
  402fd6:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  402fd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402fdc:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  402fde:	2500      	movs	r5, #0
  402fe0:	9503      	str	r5, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  402fe2:	9504      	str	r5, [sp, #16]
  402fe4:	200d      	movs	r0, #13
  402fe6:	47a0      	blx	r4
		usart_init_rs232(p_usart, &usart_settings,
  402fe8:	4c10      	ldr	r4, [pc, #64]	; (40302c <hc05_config_server+0x68>)
  402fea:	4a11      	ldr	r2, [pc, #68]	; (403030 <hc05_config_server+0x6c>)
  402fec:	4669      	mov	r1, sp
  402fee:	4620      	mov	r0, r4
  402ff0:	4b10      	ldr	r3, [pc, #64]	; (403034 <hc05_config_server+0x70>)
  402ff2:	4798      	blx	r3
		usart_enable_tx(p_usart);
  402ff4:	4620      	mov	r0, r4
  402ff6:	4f10      	ldr	r7, [pc, #64]	; (403038 <hc05_config_server+0x74>)
  402ff8:	47b8      	blx	r7
		usart_enable_rx(p_usart);
  402ffa:	4620      	mov	r0, r4
  402ffc:	4e0f      	ldr	r6, [pc, #60]	; (40303c <hc05_config_server+0x78>)
  402ffe:	47b0      	blx	r6
  usart_enable_tx(USART_COM);
  403000:	4620      	mov	r0, r4
  403002:	47b8      	blx	r7
  usart_enable_rx(USART_COM);
  403004:	4620      	mov	r0, r4
  403006:	47b0      	blx	r6
  pio_configure(PIOB, PIO_PERIPH_C, (1 << 0), PIO_DEFAULT);
  403008:	4e0d      	ldr	r6, [pc, #52]	; (403040 <hc05_config_server+0x7c>)
  40300a:	462b      	mov	r3, r5
  40300c:	2201      	movs	r2, #1
  40300e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403012:	4630      	mov	r0, r6
  403014:	4c0b      	ldr	r4, [pc, #44]	; (403044 <hc05_config_server+0x80>)
  403016:	47a0      	blx	r4
  pio_configure(PIOB, PIO_PERIPH_C, (1 << 1), PIO_DEFAULT);
  403018:	462b      	mov	r3, r5
  40301a:	2202      	movs	r2, #2
  40301c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403020:	4630      	mov	r0, r6
  403022:	47a0      	blx	r4
}
  403024:	b007      	add	sp, #28
  403026:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403028:	00400c59 	.word	0x00400c59
  40302c:	40024000 	.word	0x40024000
  403030:	08f0d180 	.word	0x08f0d180
  403034:	00400d55 	.word	0x00400d55
  403038:	00400da9 	.word	0x00400da9
  40303c:	00400daf 	.word	0x00400daf
  403040:	400e1000 	.word	0x400e1000
  403044:	00400945 	.word	0x00400945

00403048 <hc05_server_init>:
int hc05_server_init(void) {
  403048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40304c:	b0a2      	sub	sp, #136	; 0x88
  usart_send_command(USART0, buffer_rx, 1000, "AT", 100); printf(buffer_rx);
  40304e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 4030e0 <hc05_server_init+0x98>
  403052:	4e1e      	ldr	r6, [pc, #120]	; (4030cc <hc05_server_init+0x84>)
  403054:	2764      	movs	r7, #100	; 0x64
  403056:	9700      	str	r7, [sp, #0]
  403058:	4643      	mov	r3, r8
  40305a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40305e:	a902      	add	r1, sp, #8
  403060:	4630      	mov	r0, r6
  403062:	4d1b      	ldr	r5, [pc, #108]	; (4030d0 <hc05_server_init+0x88>)
  403064:	47a8      	blx	r5
  403066:	a802      	add	r0, sp, #8
  403068:	4c1a      	ldr	r4, [pc, #104]	; (4030d4 <hc05_server_init+0x8c>)
  40306a:	47a0      	blx	r4
  usart_send_command(USART0, buffer_rx, 1000, "AT", 100); printf(buffer_rx);
  40306c:	9700      	str	r7, [sp, #0]
  40306e:	4643      	mov	r3, r8
  403070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403074:	a902      	add	r1, sp, #8
  403076:	4630      	mov	r0, r6
  403078:	47a8      	blx	r5
  40307a:	a802      	add	r0, sp, #8
  40307c:	47a0      	blx	r4
    usart_send_command(USART0, buffer_rx, 1000, "AT", 100); printf(buffer_rx);
  40307e:	9700      	str	r7, [sp, #0]
  403080:	4643      	mov	r3, r8
  403082:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403086:	a902      	add	r1, sp, #8
  403088:	4630      	mov	r0, r6
  40308a:	47a8      	blx	r5
  40308c:	a802      	add	r0, sp, #8
  40308e:	47a0      	blx	r4
  usart_send_command(USART0, buffer_rx, 1000, "AT+NAMEFolCos", 1000); printf(buffer_rx);
  403090:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
  403094:	9700      	str	r7, [sp, #0]
  403096:	4b10      	ldr	r3, [pc, #64]	; (4030d8 <hc05_server_init+0x90>)
  403098:	463a      	mov	r2, r7
  40309a:	a902      	add	r1, sp, #8
  40309c:	4630      	mov	r0, r6
  40309e:	47a8      	blx	r5
  4030a0:	a802      	add	r0, sp, #8
  4030a2:	47a0      	blx	r4
  usart_send_command(USART0, buffer_rx, 1000, "AT", 1000); printf(buffer_rx);
  4030a4:	9700      	str	r7, [sp, #0]
  4030a6:	4643      	mov	r3, r8
  4030a8:	463a      	mov	r2, r7
  4030aa:	a902      	add	r1, sp, #8
  4030ac:	4630      	mov	r0, r6
  4030ae:	47a8      	blx	r5
  4030b0:	a802      	add	r0, sp, #8
  4030b2:	47a0      	blx	r4
  usart_send_command(USART0, buffer_rx, 1000, "AT+PIN1337", 1000); printf(buffer_rx);
  4030b4:	9700      	str	r7, [sp, #0]
  4030b6:	4b09      	ldr	r3, [pc, #36]	; (4030dc <hc05_server_init+0x94>)
  4030b8:	463a      	mov	r2, r7
  4030ba:	a902      	add	r1, sp, #8
  4030bc:	4630      	mov	r0, r6
  4030be:	47a8      	blx	r5
  4030c0:	a802      	add	r0, sp, #8
  4030c2:	47a0      	blx	r4
}
  4030c4:	b022      	add	sp, #136	; 0x88
  4030c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4030ca:	bf00      	nop
  4030cc:	40024000 	.word	0x40024000
  4030d0:	00402fa1 	.word	0x00402fa1
  4030d4:	004037bd 	.word	0x004037bd
  4030d8:	00406424 	.word	0x00406424
  4030dc:	00406434 	.word	0x00406434
  4030e0:	00406420 	.word	0x00406420

004030e4 <task_bluetooth>:
void task_bluetooth(void){
  4030e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4030e8:	b08b      	sub	sp, #44	; 0x2c
	xQueueAfec = xQueueCreate( 10, sizeof( analog ) );
  4030ea:	2200      	movs	r2, #0
  4030ec:	2108      	movs	r1, #8
  4030ee:	200a      	movs	r0, #10
  4030f0:	4c6e      	ldr	r4, [pc, #440]	; (4032ac <task_bluetooth+0x1c8>)
  4030f2:	47a0      	blx	r4
  4030f4:	4b6e      	ldr	r3, [pc, #440]	; (4032b0 <task_bluetooth+0x1cc>)
  4030f6:	6018      	str	r0, [r3, #0]
	xQueueBut = xQueueCreate( 13, sizeof( press ) );
  4030f8:	2200      	movs	r2, #0
  4030fa:	2108      	movs	r1, #8
  4030fc:	200d      	movs	r0, #13
  4030fe:	47a0      	blx	r4
  403100:	4b6c      	ldr	r3, [pc, #432]	; (4032b4 <task_bluetooth+0x1d0>)
  403102:	6018      	str	r0, [r3, #0]
	printf("Bluetooth initializing \n");
  403104:	486c      	ldr	r0, [pc, #432]	; (4032b8 <task_bluetooth+0x1d4>)
  403106:	4c6d      	ldr	r4, [pc, #436]	; (4032bc <task_bluetooth+0x1d8>)
  403108:	47a0      	blx	r4
	hc05_config_server();
  40310a:	4b6d      	ldr	r3, [pc, #436]	; (4032c0 <task_bluetooth+0x1dc>)
  40310c:	4798      	blx	r3
	hc05_server_init();
  40310e:	4b6d      	ldr	r3, [pc, #436]	; (4032c4 <task_bluetooth+0x1e0>)
  403110:	4798      	blx	r3
	printf("init" );
  403112:	486d      	ldr	r0, [pc, #436]	; (4032c8 <task_bluetooth+0x1e4>)
  403114:	47a0      	blx	r4
	io_init();
  403116:	4b6d      	ldr	r3, [pc, #436]	; (4032cc <task_bluetooth+0x1e8>)
  403118:	4798      	blx	r3
	pio_clear(BUZ_PIO, BUZ_PIO_IDX_MASK);
  40311a:	4c6d      	ldr	r4, [pc, #436]	; (4032d0 <task_bluetooth+0x1ec>)
  40311c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403120:	4620      	mov	r0, r4
  403122:	4b6c      	ldr	r3, [pc, #432]	; (4032d4 <task_bluetooth+0x1f0>)
  403124:	4798      	blx	r3
	delay_ms(200);
  403126:	486c      	ldr	r0, [pc, #432]	; (4032d8 <task_bluetooth+0x1f4>)
  403128:	4b6c      	ldr	r3, [pc, #432]	; (4032dc <task_bluetooth+0x1f8>)
  40312a:	4798      	blx	r3
	pio_set(BUZ_PIO, BUZ_PIO_IDX_MASK);
  40312c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403130:	4620      	mov	r0, r4
  403132:	4b6b      	ldr	r3, [pc, #428]	; (4032e0 <task_bluetooth+0x1fc>)
  403134:	4798      	blx	r3
	char axisY = '0';
  403136:	f04f 0a30 	mov.w	sl, #48	; 0x30
	char axisX = '0';
  40313a:	f8cd a004 	str.w	sl, [sp, #4]
		if (xQueueReceive(xQueueBut, &(press_main), ( TickType_t )  1 / portTICK_PERIOD_MS)) {
  40313e:	f8df b174 	ldr.w	fp, [pc, #372]	; 4032b4 <task_bluetooth+0x1d0>
  403142:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 403320 <task_bluetooth+0x23c>
  403146:	e05d      	b.n	403204 <task_bluetooth+0x120>
			printf("Button: %d   Status: %d\n", press_main.button, press_main.status);
  403148:	9a05      	ldr	r2, [sp, #20]
  40314a:	9904      	ldr	r1, [sp, #16]
  40314c:	4865      	ldr	r0, [pc, #404]	; (4032e4 <task_bluetooth+0x200>)
  40314e:	4b5b      	ldr	r3, [pc, #364]	; (4032bc <task_bluetooth+0x1d8>)
  403150:	4798      	blx	r3
			if (press_main.status){
  403152:	9b05      	ldr	r3, [sp, #20]
  403154:	b15b      	cbz	r3, 40316e <task_bluetooth+0x8a>
				buttons[press_main.button] = '1';
  403156:	9b04      	ldr	r3, [sp, #16]
  403158:	aa0a      	add	r2, sp, #40	; 0x28
  40315a:	4413      	add	r3, r2
  40315c:	2231      	movs	r2, #49	; 0x31
  40315e:	f803 2c10 	strb.w	r2, [r3, #-16]
				pio_clear(LED_PIO, LED_PIO_IDX_MASK);
  403162:	f44f 7180 	mov.w	r1, #256	; 0x100
  403166:	4860      	ldr	r0, [pc, #384]	; (4032e8 <task_bluetooth+0x204>)
  403168:	4b5a      	ldr	r3, [pc, #360]	; (4032d4 <task_bluetooth+0x1f0>)
  40316a:	4798      	blx	r3
  40316c:	e05b      	b.n	403226 <task_bluetooth+0x142>
				buttons[press_main.button] = '0';
  40316e:	9b04      	ldr	r3, [sp, #16]
  403170:	aa0a      	add	r2, sp, #40	; 0x28
  403172:	4413      	add	r3, r2
  403174:	2230      	movs	r2, #48	; 0x30
  403176:	f803 2c10 	strb.w	r2, [r3, #-16]
				pio_set(LED_PIO, LED_PIO_IDX_MASK);
  40317a:	f44f 7180 	mov.w	r1, #256	; 0x100
  40317e:	485a      	ldr	r0, [pc, #360]	; (4032e8 <task_bluetooth+0x204>)
  403180:	4b57      	ldr	r3, [pc, #348]	; (4032e0 <task_bluetooth+0x1fc>)
  403182:	4798      	blx	r3
  403184:	e04f      	b.n	403226 <task_bluetooth+0x142>
					usart_put_string(USART1, "X positivo \n");
  403186:	4959      	ldr	r1, [pc, #356]	; (4032ec <task_bluetooth+0x208>)
  403188:	4859      	ldr	r0, [pc, #356]	; (4032f0 <task_bluetooth+0x20c>)
  40318a:	4b5a      	ldr	r3, [pc, #360]	; (4032f4 <task_bluetooth+0x210>)
  40318c:	4798      	blx	r3
					axisX = 'P';
  40318e:	2350      	movs	r3, #80	; 0x50
  403190:	9301      	str	r3, [sp, #4]
  403192:	e008      	b.n	4031a6 <task_bluetooth+0xc2>
					usart_put_string(USART1, "X negativo \n");
  403194:	4958      	ldr	r1, [pc, #352]	; (4032f8 <task_bluetooth+0x214>)
  403196:	4856      	ldr	r0, [pc, #344]	; (4032f0 <task_bluetooth+0x20c>)
  403198:	4b56      	ldr	r3, [pc, #344]	; (4032f4 <task_bluetooth+0x210>)
  40319a:	4798      	blx	r3
					axisX = 'N';
  40319c:	234e      	movs	r3, #78	; 0x4e
  40319e:	9301      	str	r3, [sp, #4]
  4031a0:	e001      	b.n	4031a6 <task_bluetooth+0xc2>
			else if (axis_main.axis == 1){
  4031a2:	2b01      	cmp	r3, #1
  4031a4:	d05d      	beq.n	403262 <task_bluetooth+0x17e>
			while(!usart_is_tx_ready(USART_COM));
  4031a6:	4c55      	ldr	r4, [pc, #340]	; (4032fc <task_bluetooth+0x218>)
  4031a8:	4d55      	ldr	r5, [pc, #340]	; (403300 <task_bluetooth+0x21c>)
			usart_write(USART_COM, buttons[i]);
  4031aa:	f8df 8158 	ldr.w	r8, [pc, #344]	; 403304 <task_bluetooth+0x220>
			while(!usart_is_tx_ready(USART_COM));
  4031ae:	4620      	mov	r0, r4
  4031b0:	47a8      	blx	r5
  4031b2:	2800      	cmp	r0, #0
  4031b4:	d0fb      	beq.n	4031ae <task_bluetooth+0xca>
			usart_write(USART_COM, buttons[i]);
  4031b6:	f817 1b01 	ldrb.w	r1, [r7], #1
  4031ba:	4620      	mov	r0, r4
  4031bc:	47c0      	blx	r8
		for (int i = 0; i<=12; i++){
  4031be:	42b7      	cmp	r7, r6
  4031c0:	d1f5      	bne.n	4031ae <task_bluetooth+0xca>
		while(!usart_is_tx_ready(USART_COM));
  4031c2:	4d4e      	ldr	r5, [pc, #312]	; (4032fc <task_bluetooth+0x218>)
  4031c4:	4c4e      	ldr	r4, [pc, #312]	; (403300 <task_bluetooth+0x21c>)
  4031c6:	4628      	mov	r0, r5
  4031c8:	47a0      	blx	r4
  4031ca:	2800      	cmp	r0, #0
  4031cc:	d0fb      	beq.n	4031c6 <task_bluetooth+0xe2>
		usart_write(USART_COM, axisX);
  4031ce:	9901      	ldr	r1, [sp, #4]
  4031d0:	484a      	ldr	r0, [pc, #296]	; (4032fc <task_bluetooth+0x218>)
  4031d2:	4b4c      	ldr	r3, [pc, #304]	; (403304 <task_bluetooth+0x220>)
  4031d4:	4798      	blx	r3
		while(!usart_is_tx_ready(USART_COM));
  4031d6:	4d49      	ldr	r5, [pc, #292]	; (4032fc <task_bluetooth+0x218>)
  4031d8:	4c49      	ldr	r4, [pc, #292]	; (403300 <task_bluetooth+0x21c>)
  4031da:	4628      	mov	r0, r5
  4031dc:	47a0      	blx	r4
  4031de:	2800      	cmp	r0, #0
  4031e0:	d0fb      	beq.n	4031da <task_bluetooth+0xf6>
		usart_write(USART_COM, axisY);
  4031e2:	4651      	mov	r1, sl
  4031e4:	4845      	ldr	r0, [pc, #276]	; (4032fc <task_bluetooth+0x218>)
  4031e6:	4b47      	ldr	r3, [pc, #284]	; (403304 <task_bluetooth+0x220>)
  4031e8:	4798      	blx	r3
		while(!usart_is_tx_ready(USART_COM));
  4031ea:	4d44      	ldr	r5, [pc, #272]	; (4032fc <task_bluetooth+0x218>)
  4031ec:	4c44      	ldr	r4, [pc, #272]	; (403300 <task_bluetooth+0x21c>)
  4031ee:	4628      	mov	r0, r5
  4031f0:	47a0      	blx	r4
  4031f2:	2800      	cmp	r0, #0
  4031f4:	d0fb      	beq.n	4031ee <task_bluetooth+0x10a>
		usart_write(USART_COM, eof);
  4031f6:	2158      	movs	r1, #88	; 0x58
  4031f8:	4840      	ldr	r0, [pc, #256]	; (4032fc <task_bluetooth+0x218>)
  4031fa:	4b42      	ldr	r3, [pc, #264]	; (403304 <task_bluetooth+0x220>)
  4031fc:	4798      	blx	r3
		vTaskDelay( 10 / portTICK_PERIOD_MS);
  4031fe:	200a      	movs	r0, #10
  403200:	4b41      	ldr	r3, [pc, #260]	; (403308 <task_bluetooth+0x224>)
  403202:	4798      	blx	r3
  403204:	af06      	add	r7, sp, #24
  403206:	f10d 0225 	add.w	r2, sp, #37	; 0x25
	char axisX = '0';
  40320a:	463e      	mov	r6, r7
			buttons[i] = 'N';
  40320c:	234e      	movs	r3, #78	; 0x4e
  40320e:	f806 3b01 	strb.w	r3, [r6], #1
		for (int i = 0; i<=12; i++){
  403212:	4296      	cmp	r6, r2
  403214:	d1fb      	bne.n	40320e <task_bluetooth+0x12a>
		if (xQueueReceive(xQueueBut, &(press_main), ( TickType_t )  1 / portTICK_PERIOD_MS)) {
  403216:	2300      	movs	r3, #0
  403218:	2201      	movs	r2, #1
  40321a:	a904      	add	r1, sp, #16
  40321c:	f8db 0000 	ldr.w	r0, [fp]
  403220:	47c8      	blx	r9
  403222:	2800      	cmp	r0, #0
  403224:	d190      	bne.n	403148 <task_bluetooth+0x64>
		if (xQueueReceive(xQueueAfec, &(axis_main), ( TickType_t )  1 / portTICK_PERIOD_MS)){
  403226:	2300      	movs	r3, #0
  403228:	2201      	movs	r2, #1
  40322a:	a902      	add	r1, sp, #8
  40322c:	4820      	ldr	r0, [pc, #128]	; (4032b0 <task_bluetooth+0x1cc>)
  40322e:	6800      	ldr	r0, [r0, #0]
  403230:	47c8      	blx	r9
  403232:	2800      	cmp	r0, #0
  403234:	d0b7      	beq.n	4031a6 <task_bluetooth+0xc2>
			if(axis_main.axis == 0){
  403236:	9b02      	ldr	r3, [sp, #8]
  403238:	2b00      	cmp	r3, #0
  40323a:	d1b2      	bne.n	4031a2 <task_bluetooth+0xbe>
	return (ADC_value-2200);
  40323c:	9b03      	ldr	r3, [sp, #12]
  40323e:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
				if(x>500){
  403242:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  403246:	dc9e      	bgt.n	403186 <task_bluetooth+0xa2>
					} else if(x <-500){
  403248:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
  40324c:	dba2      	blt.n	403194 <task_bluetooth+0xb0>
					if (axisX != '0'){
  40324e:	9b01      	ldr	r3, [sp, #4]
  403250:	2b30      	cmp	r3, #48	; 0x30
  403252:	d0a8      	beq.n	4031a6 <task_bluetooth+0xc2>
						usart_put_string(USART1, "X parado \n");
  403254:	492d      	ldr	r1, [pc, #180]	; (40330c <task_bluetooth+0x228>)
  403256:	4826      	ldr	r0, [pc, #152]	; (4032f0 <task_bluetooth+0x20c>)
  403258:	4b26      	ldr	r3, [pc, #152]	; (4032f4 <task_bluetooth+0x210>)
  40325a:	4798      	blx	r3
						axisX = '0';
  40325c:	2330      	movs	r3, #48	; 0x30
  40325e:	9301      	str	r3, [sp, #4]
  403260:	e7a1      	b.n	4031a6 <task_bluetooth+0xc2>
	return (ADC_value-2200);
  403262:	9b03      	ldr	r3, [sp, #12]
  403264:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
				if(y>500){
  403268:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  40326c:	dc0c      	bgt.n	403288 <task_bluetooth+0x1a4>
					} else if(y <-500){
  40326e:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
  403272:	db14      	blt.n	40329e <task_bluetooth+0x1ba>
						if (axisY != '0'){
  403274:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
  403278:	d095      	beq.n	4031a6 <task_bluetooth+0xc2>
							usart_put_string(USART1, "Y parado \n");
  40327a:	4925      	ldr	r1, [pc, #148]	; (403310 <task_bluetooth+0x22c>)
  40327c:	481c      	ldr	r0, [pc, #112]	; (4032f0 <task_bluetooth+0x20c>)
  40327e:	4b1d      	ldr	r3, [pc, #116]	; (4032f4 <task_bluetooth+0x210>)
  403280:	4798      	blx	r3
							axisY = '0';
  403282:	f04f 0a30 	mov.w	sl, #48	; 0x30
  403286:	e78e      	b.n	4031a6 <task_bluetooth+0xc2>
					usart_put_string(USART1, "Y positivo \n");
  403288:	4d19      	ldr	r5, [pc, #100]	; (4032f0 <task_bluetooth+0x20c>)
  40328a:	4922      	ldr	r1, [pc, #136]	; (403314 <task_bluetooth+0x230>)
  40328c:	4628      	mov	r0, r5
  40328e:	4c19      	ldr	r4, [pc, #100]	; (4032f4 <task_bluetooth+0x210>)
  403290:	47a0      	blx	r4
					usart_put_string(USART1, "VAI SE FUDER ATMEL/SAME \n");
  403292:	4921      	ldr	r1, [pc, #132]	; (403318 <task_bluetooth+0x234>)
  403294:	4628      	mov	r0, r5
  403296:	47a0      	blx	r4
					axisY = 'P';
  403298:	f04f 0a50 	mov.w	sl, #80	; 0x50
  40329c:	e783      	b.n	4031a6 <task_bluetooth+0xc2>
					usart_put_string(USART1, "Y negativo \n");
  40329e:	491f      	ldr	r1, [pc, #124]	; (40331c <task_bluetooth+0x238>)
  4032a0:	4813      	ldr	r0, [pc, #76]	; (4032f0 <task_bluetooth+0x20c>)
  4032a2:	4b14      	ldr	r3, [pc, #80]	; (4032f4 <task_bluetooth+0x210>)
  4032a4:	4798      	blx	r3
					axisY = 'N';
  4032a6:	f04f 0a4e 	mov.w	sl, #78	; 0x4e
  4032aa:	e77c      	b.n	4031a6 <task_bluetooth+0xc2>
  4032ac:	00401575 	.word	0x00401575
  4032b0:	20400cec 	.word	0x20400cec
  4032b4:	20400ce8 	.word	0x20400ce8
  4032b8:	00406470 	.word	0x00406470
  4032bc:	004037bd 	.word	0x004037bd
  4032c0:	00402fc5 	.word	0x00402fc5
  4032c4:	00403049 	.word	0x00403049
  4032c8:	0040648c 	.word	0x0040648c
  4032cc:	00402cfd 	.word	0x00402cfd
  4032d0:	400e1400 	.word	0x400e1400
  4032d4:	00400837 	.word	0x00400837
  4032d8:	009a5649 	.word	0x009a5649
  4032dc:	20400001 	.word	0x20400001
  4032e0:	00400833 	.word	0x00400833
  4032e4:	00406494 	.word	0x00406494
  4032e8:	400e1200 	.word	0x400e1200
  4032ec:	004064b0 	.word	0x004064b0
  4032f0:	40028000 	.word	0x40028000
  4032f4:	00402f29 	.word	0x00402f29
  4032f8:	004064c0 	.word	0x004064c0
  4032fc:	40024000 	.word	0x40024000
  403300:	00400db5 	.word	0x00400db5
  403304:	00400dbd 	.word	0x00400dbd
  403308:	00401f11 	.word	0x00401f11
  40330c:	004064d0 	.word	0x004064d0
  403310:	00406518 	.word	0x00406518
  403314:	004064dc 	.word	0x004064dc
  403318:	004064ec 	.word	0x004064ec
  40331c:	00406508 	.word	0x00406508
  403320:	004017c1 	.word	0x004017c1

00403324 <main>:

/************************************************************************/
/* main                                                                 */
/************************************************************************/

int main(void){
  403324:	b580      	push	{r7, lr}
  403326:	b08a      	sub	sp, #40	; 0x28
	/* Initialize the SAM system */
	sysclk_init();
  403328:	4b31      	ldr	r3, [pc, #196]	; (4033f0 <main+0xcc>)
  40332a:	4798      	blx	r3
	board_init();
  40332c:	4b31      	ldr	r3, [pc, #196]	; (4033f4 <main+0xd0>)
  40332e:	4798      	blx	r3
	pio_set_output(LED_PIO, LED_PIO_IDX_MASK, 0, 0, 0);
  403330:	2400      	movs	r4, #0
  403332:	9400      	str	r4, [sp, #0]
  403334:	4623      	mov	r3, r4
  403336:	4622      	mov	r2, r4
  403338:	f44f 7180 	mov.w	r1, #256	; 0x100
  40333c:	482e      	ldr	r0, [pc, #184]	; (4033f8 <main+0xd4>)
  40333e:	4e2f      	ldr	r6, [pc, #188]	; (4033fc <main+0xd8>)
  403340:	47b0      	blx	r6
	pio_set_output(BUZ_PIO, BUZ_PIO_IDX_MASK, 0, 0, 0);
  403342:	4d2f      	ldr	r5, [pc, #188]	; (403400 <main+0xdc>)
  403344:	9400      	str	r4, [sp, #0]
  403346:	4623      	mov	r3, r4
  403348:	4622      	mov	r2, r4
  40334a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40334e:	4628      	mov	r0, r5
  403350:	47b0      	blx	r6
	pio_set(BUZ_PIO, BUZ_PIO_IDX_MASK);
  403352:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403356:	4628      	mov	r0, r5
  403358:	4b2a      	ldr	r3, [pc, #168]	; (403404 <main+0xe0>)
  40335a:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40335c:	4d2a      	ldr	r5, [pc, #168]	; (403408 <main+0xe4>)
  40335e:	4b2b      	ldr	r3, [pc, #172]	; (40340c <main+0xe8>)
  403360:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403362:	4a2b      	ldr	r2, [pc, #172]	; (403410 <main+0xec>)
  403364:	4b2b      	ldr	r3, [pc, #172]	; (403414 <main+0xf0>)
  403366:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403368:	4a2b      	ldr	r2, [pc, #172]	; (403418 <main+0xf4>)
  40336a:	4b2c      	ldr	r3, [pc, #176]	; (40341c <main+0xf8>)
  40336c:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  40336e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403372:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  403374:	23c0      	movs	r3, #192	; 0xc0
  403376:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  403378:	f44f 6600 	mov.w	r6, #2048	; 0x800
  40337c:	9606      	str	r6, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  40337e:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403380:	9408      	str	r4, [sp, #32]
  403382:	200e      	movs	r0, #14
  403384:	4b26      	ldr	r3, [pc, #152]	; (403420 <main+0xfc>)
  403386:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  403388:	4a26      	ldr	r2, [pc, #152]	; (403424 <main+0x100>)
  40338a:	a904      	add	r1, sp, #16
  40338c:	4628      	mov	r0, r5
  40338e:	4b26      	ldr	r3, [pc, #152]	; (403428 <main+0x104>)
  403390:	4798      	blx	r3
		usart_enable_tx(p_usart);
  403392:	4628      	mov	r0, r5
  403394:	4b25      	ldr	r3, [pc, #148]	; (40342c <main+0x108>)
  403396:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403398:	4628      	mov	r0, r5
  40339a:	4b25      	ldr	r3, [pc, #148]	; (403430 <main+0x10c>)
  40339c:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40339e:	4f25      	ldr	r7, [pc, #148]	; (403434 <main+0x110>)
  4033a0:	683b      	ldr	r3, [r7, #0]
  4033a2:	4621      	mov	r1, r4
  4033a4:	6898      	ldr	r0, [r3, #8]
  4033a6:	4d24      	ldr	r5, [pc, #144]	; (403438 <main+0x114>)
  4033a8:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4033aa:	683b      	ldr	r3, [r7, #0]
  4033ac:	4621      	mov	r1, r4
  4033ae:	6858      	ldr	r0, [r3, #4]
  4033b0:	47a8      	blx	r5
	setbuf(stdout, NULL);
  4033b2:	683b      	ldr	r3, [r7, #0]
  4033b4:	4621      	mov	r1, r4
  4033b6:	6898      	ldr	r0, [r3, #8]
  4033b8:	47a8      	blx	r5

	/* Initialize the console uart */
	configure_console();

	/* Create task to make led blink */
	xTaskCreate(task_bluetooth, "BLT", TASK_PROCESS_STACK_SIZE, NULL,	TASK_PROCESS_STACK_PRIORITY, NULL);
  4033ba:	9403      	str	r4, [sp, #12]
  4033bc:	9402      	str	r4, [sp, #8]
  4033be:	9401      	str	r4, [sp, #4]
  4033c0:	9400      	str	r4, [sp, #0]
  4033c2:	4623      	mov	r3, r4
  4033c4:	4632      	mov	r2, r6
  4033c6:	491d      	ldr	r1, [pc, #116]	; (40343c <main+0x118>)
  4033c8:	481d      	ldr	r0, [pc, #116]	; (403440 <main+0x11c>)
  4033ca:	4d1e      	ldr	r5, [pc, #120]	; (403444 <main+0x120>)
  4033cc:	47a8      	blx	r5
	
	
	
	if (xTaskCreate(task_afec, "afec", TASK_PROCESS_STACK_SIZE, NULL, TASK_PROCESS_STACK_PRIORITY, NULL) != pdPASS) {
  4033ce:	9403      	str	r4, [sp, #12]
  4033d0:	9402      	str	r4, [sp, #8]
  4033d2:	9401      	str	r4, [sp, #4]
  4033d4:	9400      	str	r4, [sp, #0]
  4033d6:	4623      	mov	r3, r4
  4033d8:	4632      	mov	r2, r6
  4033da:	491b      	ldr	r1, [pc, #108]	; (403448 <main+0x124>)
  4033dc:	481b      	ldr	r0, [pc, #108]	; (40344c <main+0x128>)
  4033de:	47a8      	blx	r5
  4033e0:	2801      	cmp	r0, #1
  4033e2:	d002      	beq.n	4033ea <main+0xc6>
		printf("Failed to create test afec task\r\n");
  4033e4:	481a      	ldr	r0, [pc, #104]	; (403450 <main+0x12c>)
  4033e6:	4b1b      	ldr	r3, [pc, #108]	; (403454 <main+0x130>)
  4033e8:	4798      	blx	r3
	}

	//pio_clear(BUZ_PIO, BUZ_PIO_IDX_MASK);

	/* Start the scheduler. */
	vTaskStartScheduler();
  4033ea:	4b1b      	ldr	r3, [pc, #108]	; (403458 <main+0x134>)
  4033ec:	4798      	blx	r3
  4033ee:	e7fe      	b.n	4033ee <main+0xca>
  4033f0:	004001ad 	.word	0x004001ad
  4033f4:	00400381 	.word	0x00400381
  4033f8:	400e1200 	.word	0x400e1200
  4033fc:	0040091d 	.word	0x0040091d
  403400:	400e1400 	.word	0x400e1400
  403404:	00400833 	.word	0x00400833
  403408:	40028000 	.word	0x40028000
  40340c:	20400c24 	.word	0x20400c24
  403410:	004027d1 	.word	0x004027d1
  403414:	20400c20 	.word	0x20400c20
  403418:	00402c05 	.word	0x00402c05
  40341c:	20400c1c 	.word	0x20400c1c
  403420:	00400c59 	.word	0x00400c59
  403424:	08f0d180 	.word	0x08f0d180
  403428:	00400d55 	.word	0x00400d55
  40342c:	00400da9 	.word	0x00400da9
  403430:	00400daf 	.word	0x00400daf
  403434:	20400014 	.word	0x20400014
  403438:	00403f71 	.word	0x00403f71
  40343c:	00406440 	.word	0x00406440
  403440:	004030e5 	.word	0x004030e5
  403444:	00401a4d 	.word	0x00401a4d
  403448:	00406444 	.word	0x00406444
  40344c:	00402b45 	.word	0x00402b45
  403450:	0040644c 	.word	0x0040644c
  403454:	004037bd 	.word	0x004037bd
  403458:	00401c49 	.word	0x00401c49

0040345c <__aeabi_uldivmod>:
  40345c:	b953      	cbnz	r3, 403474 <__aeabi_uldivmod+0x18>
  40345e:	b94a      	cbnz	r2, 403474 <__aeabi_uldivmod+0x18>
  403460:	2900      	cmp	r1, #0
  403462:	bf08      	it	eq
  403464:	2800      	cmpeq	r0, #0
  403466:	bf1c      	itt	ne
  403468:	f04f 31ff 	movne.w	r1, #4294967295
  40346c:	f04f 30ff 	movne.w	r0, #4294967295
  403470:	f000 b97a 	b.w	403768 <__aeabi_idiv0>
  403474:	f1ad 0c08 	sub.w	ip, sp, #8
  403478:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40347c:	f000 f806 	bl	40348c <__udivmoddi4>
  403480:	f8dd e004 	ldr.w	lr, [sp, #4]
  403484:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403488:	b004      	add	sp, #16
  40348a:	4770      	bx	lr

0040348c <__udivmoddi4>:
  40348c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403490:	468c      	mov	ip, r1
  403492:	460d      	mov	r5, r1
  403494:	4604      	mov	r4, r0
  403496:	9e08      	ldr	r6, [sp, #32]
  403498:	2b00      	cmp	r3, #0
  40349a:	d151      	bne.n	403540 <__udivmoddi4+0xb4>
  40349c:	428a      	cmp	r2, r1
  40349e:	4617      	mov	r7, r2
  4034a0:	d96d      	bls.n	40357e <__udivmoddi4+0xf2>
  4034a2:	fab2 fe82 	clz	lr, r2
  4034a6:	f1be 0f00 	cmp.w	lr, #0
  4034aa:	d00b      	beq.n	4034c4 <__udivmoddi4+0x38>
  4034ac:	f1ce 0c20 	rsb	ip, lr, #32
  4034b0:	fa01 f50e 	lsl.w	r5, r1, lr
  4034b4:	fa20 fc0c 	lsr.w	ip, r0, ip
  4034b8:	fa02 f70e 	lsl.w	r7, r2, lr
  4034bc:	ea4c 0c05 	orr.w	ip, ip, r5
  4034c0:	fa00 f40e 	lsl.w	r4, r0, lr
  4034c4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4034c8:	0c25      	lsrs	r5, r4, #16
  4034ca:	fbbc f8fa 	udiv	r8, ip, sl
  4034ce:	fa1f f987 	uxth.w	r9, r7
  4034d2:	fb0a cc18 	mls	ip, sl, r8, ip
  4034d6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4034da:	fb08 f309 	mul.w	r3, r8, r9
  4034de:	42ab      	cmp	r3, r5
  4034e0:	d90a      	bls.n	4034f8 <__udivmoddi4+0x6c>
  4034e2:	19ed      	adds	r5, r5, r7
  4034e4:	f108 32ff 	add.w	r2, r8, #4294967295
  4034e8:	f080 8123 	bcs.w	403732 <__udivmoddi4+0x2a6>
  4034ec:	42ab      	cmp	r3, r5
  4034ee:	f240 8120 	bls.w	403732 <__udivmoddi4+0x2a6>
  4034f2:	f1a8 0802 	sub.w	r8, r8, #2
  4034f6:	443d      	add	r5, r7
  4034f8:	1aed      	subs	r5, r5, r3
  4034fa:	b2a4      	uxth	r4, r4
  4034fc:	fbb5 f0fa 	udiv	r0, r5, sl
  403500:	fb0a 5510 	mls	r5, sl, r0, r5
  403504:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403508:	fb00 f909 	mul.w	r9, r0, r9
  40350c:	45a1      	cmp	r9, r4
  40350e:	d909      	bls.n	403524 <__udivmoddi4+0x98>
  403510:	19e4      	adds	r4, r4, r7
  403512:	f100 33ff 	add.w	r3, r0, #4294967295
  403516:	f080 810a 	bcs.w	40372e <__udivmoddi4+0x2a2>
  40351a:	45a1      	cmp	r9, r4
  40351c:	f240 8107 	bls.w	40372e <__udivmoddi4+0x2a2>
  403520:	3802      	subs	r0, #2
  403522:	443c      	add	r4, r7
  403524:	eba4 0409 	sub.w	r4, r4, r9
  403528:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40352c:	2100      	movs	r1, #0
  40352e:	2e00      	cmp	r6, #0
  403530:	d061      	beq.n	4035f6 <__udivmoddi4+0x16a>
  403532:	fa24 f40e 	lsr.w	r4, r4, lr
  403536:	2300      	movs	r3, #0
  403538:	6034      	str	r4, [r6, #0]
  40353a:	6073      	str	r3, [r6, #4]
  40353c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403540:	428b      	cmp	r3, r1
  403542:	d907      	bls.n	403554 <__udivmoddi4+0xc8>
  403544:	2e00      	cmp	r6, #0
  403546:	d054      	beq.n	4035f2 <__udivmoddi4+0x166>
  403548:	2100      	movs	r1, #0
  40354a:	e886 0021 	stmia.w	r6, {r0, r5}
  40354e:	4608      	mov	r0, r1
  403550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403554:	fab3 f183 	clz	r1, r3
  403558:	2900      	cmp	r1, #0
  40355a:	f040 808e 	bne.w	40367a <__udivmoddi4+0x1ee>
  40355e:	42ab      	cmp	r3, r5
  403560:	d302      	bcc.n	403568 <__udivmoddi4+0xdc>
  403562:	4282      	cmp	r2, r0
  403564:	f200 80fa 	bhi.w	40375c <__udivmoddi4+0x2d0>
  403568:	1a84      	subs	r4, r0, r2
  40356a:	eb65 0503 	sbc.w	r5, r5, r3
  40356e:	2001      	movs	r0, #1
  403570:	46ac      	mov	ip, r5
  403572:	2e00      	cmp	r6, #0
  403574:	d03f      	beq.n	4035f6 <__udivmoddi4+0x16a>
  403576:	e886 1010 	stmia.w	r6, {r4, ip}
  40357a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40357e:	b912      	cbnz	r2, 403586 <__udivmoddi4+0xfa>
  403580:	2701      	movs	r7, #1
  403582:	fbb7 f7f2 	udiv	r7, r7, r2
  403586:	fab7 fe87 	clz	lr, r7
  40358a:	f1be 0f00 	cmp.w	lr, #0
  40358e:	d134      	bne.n	4035fa <__udivmoddi4+0x16e>
  403590:	1beb      	subs	r3, r5, r7
  403592:	0c3a      	lsrs	r2, r7, #16
  403594:	fa1f fc87 	uxth.w	ip, r7
  403598:	2101      	movs	r1, #1
  40359a:	fbb3 f8f2 	udiv	r8, r3, r2
  40359e:	0c25      	lsrs	r5, r4, #16
  4035a0:	fb02 3318 	mls	r3, r2, r8, r3
  4035a4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4035a8:	fb0c f308 	mul.w	r3, ip, r8
  4035ac:	42ab      	cmp	r3, r5
  4035ae:	d907      	bls.n	4035c0 <__udivmoddi4+0x134>
  4035b0:	19ed      	adds	r5, r5, r7
  4035b2:	f108 30ff 	add.w	r0, r8, #4294967295
  4035b6:	d202      	bcs.n	4035be <__udivmoddi4+0x132>
  4035b8:	42ab      	cmp	r3, r5
  4035ba:	f200 80d1 	bhi.w	403760 <__udivmoddi4+0x2d4>
  4035be:	4680      	mov	r8, r0
  4035c0:	1aed      	subs	r5, r5, r3
  4035c2:	b2a3      	uxth	r3, r4
  4035c4:	fbb5 f0f2 	udiv	r0, r5, r2
  4035c8:	fb02 5510 	mls	r5, r2, r0, r5
  4035cc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4035d0:	fb0c fc00 	mul.w	ip, ip, r0
  4035d4:	45a4      	cmp	ip, r4
  4035d6:	d907      	bls.n	4035e8 <__udivmoddi4+0x15c>
  4035d8:	19e4      	adds	r4, r4, r7
  4035da:	f100 33ff 	add.w	r3, r0, #4294967295
  4035de:	d202      	bcs.n	4035e6 <__udivmoddi4+0x15a>
  4035e0:	45a4      	cmp	ip, r4
  4035e2:	f200 80b8 	bhi.w	403756 <__udivmoddi4+0x2ca>
  4035e6:	4618      	mov	r0, r3
  4035e8:	eba4 040c 	sub.w	r4, r4, ip
  4035ec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4035f0:	e79d      	b.n	40352e <__udivmoddi4+0xa2>
  4035f2:	4631      	mov	r1, r6
  4035f4:	4630      	mov	r0, r6
  4035f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4035fa:	f1ce 0420 	rsb	r4, lr, #32
  4035fe:	fa05 f30e 	lsl.w	r3, r5, lr
  403602:	fa07 f70e 	lsl.w	r7, r7, lr
  403606:	fa20 f804 	lsr.w	r8, r0, r4
  40360a:	0c3a      	lsrs	r2, r7, #16
  40360c:	fa25 f404 	lsr.w	r4, r5, r4
  403610:	ea48 0803 	orr.w	r8, r8, r3
  403614:	fbb4 f1f2 	udiv	r1, r4, r2
  403618:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40361c:	fb02 4411 	mls	r4, r2, r1, r4
  403620:	fa1f fc87 	uxth.w	ip, r7
  403624:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403628:	fb01 f30c 	mul.w	r3, r1, ip
  40362c:	42ab      	cmp	r3, r5
  40362e:	fa00 f40e 	lsl.w	r4, r0, lr
  403632:	d909      	bls.n	403648 <__udivmoddi4+0x1bc>
  403634:	19ed      	adds	r5, r5, r7
  403636:	f101 30ff 	add.w	r0, r1, #4294967295
  40363a:	f080 808a 	bcs.w	403752 <__udivmoddi4+0x2c6>
  40363e:	42ab      	cmp	r3, r5
  403640:	f240 8087 	bls.w	403752 <__udivmoddi4+0x2c6>
  403644:	3902      	subs	r1, #2
  403646:	443d      	add	r5, r7
  403648:	1aeb      	subs	r3, r5, r3
  40364a:	fa1f f588 	uxth.w	r5, r8
  40364e:	fbb3 f0f2 	udiv	r0, r3, r2
  403652:	fb02 3310 	mls	r3, r2, r0, r3
  403656:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40365a:	fb00 f30c 	mul.w	r3, r0, ip
  40365e:	42ab      	cmp	r3, r5
  403660:	d907      	bls.n	403672 <__udivmoddi4+0x1e6>
  403662:	19ed      	adds	r5, r5, r7
  403664:	f100 38ff 	add.w	r8, r0, #4294967295
  403668:	d26f      	bcs.n	40374a <__udivmoddi4+0x2be>
  40366a:	42ab      	cmp	r3, r5
  40366c:	d96d      	bls.n	40374a <__udivmoddi4+0x2be>
  40366e:	3802      	subs	r0, #2
  403670:	443d      	add	r5, r7
  403672:	1aeb      	subs	r3, r5, r3
  403674:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403678:	e78f      	b.n	40359a <__udivmoddi4+0x10e>
  40367a:	f1c1 0720 	rsb	r7, r1, #32
  40367e:	fa22 f807 	lsr.w	r8, r2, r7
  403682:	408b      	lsls	r3, r1
  403684:	fa05 f401 	lsl.w	r4, r5, r1
  403688:	ea48 0303 	orr.w	r3, r8, r3
  40368c:	fa20 fe07 	lsr.w	lr, r0, r7
  403690:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403694:	40fd      	lsrs	r5, r7
  403696:	ea4e 0e04 	orr.w	lr, lr, r4
  40369a:	fbb5 f9fc 	udiv	r9, r5, ip
  40369e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4036a2:	fb0c 5519 	mls	r5, ip, r9, r5
  4036a6:	fa1f f883 	uxth.w	r8, r3
  4036aa:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4036ae:	fb09 f408 	mul.w	r4, r9, r8
  4036b2:	42ac      	cmp	r4, r5
  4036b4:	fa02 f201 	lsl.w	r2, r2, r1
  4036b8:	fa00 fa01 	lsl.w	sl, r0, r1
  4036bc:	d908      	bls.n	4036d0 <__udivmoddi4+0x244>
  4036be:	18ed      	adds	r5, r5, r3
  4036c0:	f109 30ff 	add.w	r0, r9, #4294967295
  4036c4:	d243      	bcs.n	40374e <__udivmoddi4+0x2c2>
  4036c6:	42ac      	cmp	r4, r5
  4036c8:	d941      	bls.n	40374e <__udivmoddi4+0x2c2>
  4036ca:	f1a9 0902 	sub.w	r9, r9, #2
  4036ce:	441d      	add	r5, r3
  4036d0:	1b2d      	subs	r5, r5, r4
  4036d2:	fa1f fe8e 	uxth.w	lr, lr
  4036d6:	fbb5 f0fc 	udiv	r0, r5, ip
  4036da:	fb0c 5510 	mls	r5, ip, r0, r5
  4036de:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4036e2:	fb00 f808 	mul.w	r8, r0, r8
  4036e6:	45a0      	cmp	r8, r4
  4036e8:	d907      	bls.n	4036fa <__udivmoddi4+0x26e>
  4036ea:	18e4      	adds	r4, r4, r3
  4036ec:	f100 35ff 	add.w	r5, r0, #4294967295
  4036f0:	d229      	bcs.n	403746 <__udivmoddi4+0x2ba>
  4036f2:	45a0      	cmp	r8, r4
  4036f4:	d927      	bls.n	403746 <__udivmoddi4+0x2ba>
  4036f6:	3802      	subs	r0, #2
  4036f8:	441c      	add	r4, r3
  4036fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4036fe:	eba4 0408 	sub.w	r4, r4, r8
  403702:	fba0 8902 	umull	r8, r9, r0, r2
  403706:	454c      	cmp	r4, r9
  403708:	46c6      	mov	lr, r8
  40370a:	464d      	mov	r5, r9
  40370c:	d315      	bcc.n	40373a <__udivmoddi4+0x2ae>
  40370e:	d012      	beq.n	403736 <__udivmoddi4+0x2aa>
  403710:	b156      	cbz	r6, 403728 <__udivmoddi4+0x29c>
  403712:	ebba 030e 	subs.w	r3, sl, lr
  403716:	eb64 0405 	sbc.w	r4, r4, r5
  40371a:	fa04 f707 	lsl.w	r7, r4, r7
  40371e:	40cb      	lsrs	r3, r1
  403720:	431f      	orrs	r7, r3
  403722:	40cc      	lsrs	r4, r1
  403724:	6037      	str	r7, [r6, #0]
  403726:	6074      	str	r4, [r6, #4]
  403728:	2100      	movs	r1, #0
  40372a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40372e:	4618      	mov	r0, r3
  403730:	e6f8      	b.n	403524 <__udivmoddi4+0x98>
  403732:	4690      	mov	r8, r2
  403734:	e6e0      	b.n	4034f8 <__udivmoddi4+0x6c>
  403736:	45c2      	cmp	sl, r8
  403738:	d2ea      	bcs.n	403710 <__udivmoddi4+0x284>
  40373a:	ebb8 0e02 	subs.w	lr, r8, r2
  40373e:	eb69 0503 	sbc.w	r5, r9, r3
  403742:	3801      	subs	r0, #1
  403744:	e7e4      	b.n	403710 <__udivmoddi4+0x284>
  403746:	4628      	mov	r0, r5
  403748:	e7d7      	b.n	4036fa <__udivmoddi4+0x26e>
  40374a:	4640      	mov	r0, r8
  40374c:	e791      	b.n	403672 <__udivmoddi4+0x1e6>
  40374e:	4681      	mov	r9, r0
  403750:	e7be      	b.n	4036d0 <__udivmoddi4+0x244>
  403752:	4601      	mov	r1, r0
  403754:	e778      	b.n	403648 <__udivmoddi4+0x1bc>
  403756:	3802      	subs	r0, #2
  403758:	443c      	add	r4, r7
  40375a:	e745      	b.n	4035e8 <__udivmoddi4+0x15c>
  40375c:	4608      	mov	r0, r1
  40375e:	e708      	b.n	403572 <__udivmoddi4+0xe6>
  403760:	f1a8 0802 	sub.w	r8, r8, #2
  403764:	443d      	add	r5, r7
  403766:	e72b      	b.n	4035c0 <__udivmoddi4+0x134>

00403768 <__aeabi_idiv0>:
  403768:	4770      	bx	lr
  40376a:	bf00      	nop

0040376c <__libc_init_array>:
  40376c:	b570      	push	{r4, r5, r6, lr}
  40376e:	4e0f      	ldr	r6, [pc, #60]	; (4037ac <__libc_init_array+0x40>)
  403770:	4d0f      	ldr	r5, [pc, #60]	; (4037b0 <__libc_init_array+0x44>)
  403772:	1b76      	subs	r6, r6, r5
  403774:	10b6      	asrs	r6, r6, #2
  403776:	bf18      	it	ne
  403778:	2400      	movne	r4, #0
  40377a:	d005      	beq.n	403788 <__libc_init_array+0x1c>
  40377c:	3401      	adds	r4, #1
  40377e:	f855 3b04 	ldr.w	r3, [r5], #4
  403782:	4798      	blx	r3
  403784:	42a6      	cmp	r6, r4
  403786:	d1f9      	bne.n	40377c <__libc_init_array+0x10>
  403788:	4e0a      	ldr	r6, [pc, #40]	; (4037b4 <__libc_init_array+0x48>)
  40378a:	4d0b      	ldr	r5, [pc, #44]	; (4037b8 <__libc_init_array+0x4c>)
  40378c:	1b76      	subs	r6, r6, r5
  40378e:	f002 ff89 	bl	4066a4 <_init>
  403792:	10b6      	asrs	r6, r6, #2
  403794:	bf18      	it	ne
  403796:	2400      	movne	r4, #0
  403798:	d006      	beq.n	4037a8 <__libc_init_array+0x3c>
  40379a:	3401      	adds	r4, #1
  40379c:	f855 3b04 	ldr.w	r3, [r5], #4
  4037a0:	4798      	blx	r3
  4037a2:	42a6      	cmp	r6, r4
  4037a4:	d1f9      	bne.n	40379a <__libc_init_array+0x2e>
  4037a6:	bd70      	pop	{r4, r5, r6, pc}
  4037a8:	bd70      	pop	{r4, r5, r6, pc}
  4037aa:	bf00      	nop
  4037ac:	004066b0 	.word	0x004066b0
  4037b0:	004066b0 	.word	0x004066b0
  4037b4:	004066b8 	.word	0x004066b8
  4037b8:	004066b0 	.word	0x004066b0

004037bc <iprintf>:
  4037bc:	b40f      	push	{r0, r1, r2, r3}
  4037be:	b500      	push	{lr}
  4037c0:	4907      	ldr	r1, [pc, #28]	; (4037e0 <iprintf+0x24>)
  4037c2:	b083      	sub	sp, #12
  4037c4:	ab04      	add	r3, sp, #16
  4037c6:	6808      	ldr	r0, [r1, #0]
  4037c8:	f853 2b04 	ldr.w	r2, [r3], #4
  4037cc:	6881      	ldr	r1, [r0, #8]
  4037ce:	9301      	str	r3, [sp, #4]
  4037d0:	f000 fd64 	bl	40429c <_vfiprintf_r>
  4037d4:	b003      	add	sp, #12
  4037d6:	f85d eb04 	ldr.w	lr, [sp], #4
  4037da:	b004      	add	sp, #16
  4037dc:	4770      	bx	lr
  4037de:	bf00      	nop
  4037e0:	20400014 	.word	0x20400014

004037e4 <malloc>:
  4037e4:	4b02      	ldr	r3, [pc, #8]	; (4037f0 <malloc+0xc>)
  4037e6:	4601      	mov	r1, r0
  4037e8:	6818      	ldr	r0, [r3, #0]
  4037ea:	f000 b80b 	b.w	403804 <_malloc_r>
  4037ee:	bf00      	nop
  4037f0:	20400014 	.word	0x20400014

004037f4 <free>:
  4037f4:	4b02      	ldr	r3, [pc, #8]	; (403800 <free+0xc>)
  4037f6:	4601      	mov	r1, r0
  4037f8:	6818      	ldr	r0, [r3, #0]
  4037fa:	f001 be6b 	b.w	4054d4 <_free_r>
  4037fe:	bf00      	nop
  403800:	20400014 	.word	0x20400014

00403804 <_malloc_r>:
  403804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403808:	f101 060b 	add.w	r6, r1, #11
  40380c:	2e16      	cmp	r6, #22
  40380e:	b083      	sub	sp, #12
  403810:	4605      	mov	r5, r0
  403812:	f240 809e 	bls.w	403952 <_malloc_r+0x14e>
  403816:	f036 0607 	bics.w	r6, r6, #7
  40381a:	f100 80bd 	bmi.w	403998 <_malloc_r+0x194>
  40381e:	42b1      	cmp	r1, r6
  403820:	f200 80ba 	bhi.w	403998 <_malloc_r+0x194>
  403824:	f000 fb86 	bl	403f34 <__malloc_lock>
  403828:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40382c:	f0c0 8293 	bcc.w	403d56 <_malloc_r+0x552>
  403830:	0a73      	lsrs	r3, r6, #9
  403832:	f000 80b8 	beq.w	4039a6 <_malloc_r+0x1a2>
  403836:	2b04      	cmp	r3, #4
  403838:	f200 8179 	bhi.w	403b2e <_malloc_r+0x32a>
  40383c:	09b3      	lsrs	r3, r6, #6
  40383e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403842:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403846:	00c3      	lsls	r3, r0, #3
  403848:	4fbf      	ldr	r7, [pc, #764]	; (403b48 <_malloc_r+0x344>)
  40384a:	443b      	add	r3, r7
  40384c:	f1a3 0108 	sub.w	r1, r3, #8
  403850:	685c      	ldr	r4, [r3, #4]
  403852:	42a1      	cmp	r1, r4
  403854:	d106      	bne.n	403864 <_malloc_r+0x60>
  403856:	e00c      	b.n	403872 <_malloc_r+0x6e>
  403858:	2a00      	cmp	r2, #0
  40385a:	f280 80aa 	bge.w	4039b2 <_malloc_r+0x1ae>
  40385e:	68e4      	ldr	r4, [r4, #12]
  403860:	42a1      	cmp	r1, r4
  403862:	d006      	beq.n	403872 <_malloc_r+0x6e>
  403864:	6863      	ldr	r3, [r4, #4]
  403866:	f023 0303 	bic.w	r3, r3, #3
  40386a:	1b9a      	subs	r2, r3, r6
  40386c:	2a0f      	cmp	r2, #15
  40386e:	ddf3      	ble.n	403858 <_malloc_r+0x54>
  403870:	4670      	mov	r0, lr
  403872:	693c      	ldr	r4, [r7, #16]
  403874:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403b5c <_malloc_r+0x358>
  403878:	4574      	cmp	r4, lr
  40387a:	f000 81ab 	beq.w	403bd4 <_malloc_r+0x3d0>
  40387e:	6863      	ldr	r3, [r4, #4]
  403880:	f023 0303 	bic.w	r3, r3, #3
  403884:	1b9a      	subs	r2, r3, r6
  403886:	2a0f      	cmp	r2, #15
  403888:	f300 8190 	bgt.w	403bac <_malloc_r+0x3a8>
  40388c:	2a00      	cmp	r2, #0
  40388e:	f8c7 e014 	str.w	lr, [r7, #20]
  403892:	f8c7 e010 	str.w	lr, [r7, #16]
  403896:	f280 809d 	bge.w	4039d4 <_malloc_r+0x1d0>
  40389a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40389e:	f080 8161 	bcs.w	403b64 <_malloc_r+0x360>
  4038a2:	08db      	lsrs	r3, r3, #3
  4038a4:	f103 0c01 	add.w	ip, r3, #1
  4038a8:	1099      	asrs	r1, r3, #2
  4038aa:	687a      	ldr	r2, [r7, #4]
  4038ac:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4038b0:	f8c4 8008 	str.w	r8, [r4, #8]
  4038b4:	2301      	movs	r3, #1
  4038b6:	408b      	lsls	r3, r1
  4038b8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4038bc:	4313      	orrs	r3, r2
  4038be:	3908      	subs	r1, #8
  4038c0:	60e1      	str	r1, [r4, #12]
  4038c2:	607b      	str	r3, [r7, #4]
  4038c4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4038c8:	f8c8 400c 	str.w	r4, [r8, #12]
  4038cc:	1082      	asrs	r2, r0, #2
  4038ce:	2401      	movs	r4, #1
  4038d0:	4094      	lsls	r4, r2
  4038d2:	429c      	cmp	r4, r3
  4038d4:	f200 808b 	bhi.w	4039ee <_malloc_r+0x1ea>
  4038d8:	421c      	tst	r4, r3
  4038da:	d106      	bne.n	4038ea <_malloc_r+0xe6>
  4038dc:	f020 0003 	bic.w	r0, r0, #3
  4038e0:	0064      	lsls	r4, r4, #1
  4038e2:	421c      	tst	r4, r3
  4038e4:	f100 0004 	add.w	r0, r0, #4
  4038e8:	d0fa      	beq.n	4038e0 <_malloc_r+0xdc>
  4038ea:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4038ee:	46cc      	mov	ip, r9
  4038f0:	4680      	mov	r8, r0
  4038f2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4038f6:	459c      	cmp	ip, r3
  4038f8:	d107      	bne.n	40390a <_malloc_r+0x106>
  4038fa:	e16d      	b.n	403bd8 <_malloc_r+0x3d4>
  4038fc:	2a00      	cmp	r2, #0
  4038fe:	f280 817b 	bge.w	403bf8 <_malloc_r+0x3f4>
  403902:	68db      	ldr	r3, [r3, #12]
  403904:	459c      	cmp	ip, r3
  403906:	f000 8167 	beq.w	403bd8 <_malloc_r+0x3d4>
  40390a:	6859      	ldr	r1, [r3, #4]
  40390c:	f021 0103 	bic.w	r1, r1, #3
  403910:	1b8a      	subs	r2, r1, r6
  403912:	2a0f      	cmp	r2, #15
  403914:	ddf2      	ble.n	4038fc <_malloc_r+0xf8>
  403916:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40391a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40391e:	9300      	str	r3, [sp, #0]
  403920:	199c      	adds	r4, r3, r6
  403922:	4628      	mov	r0, r5
  403924:	f046 0601 	orr.w	r6, r6, #1
  403928:	f042 0501 	orr.w	r5, r2, #1
  40392c:	605e      	str	r6, [r3, #4]
  40392e:	f8c8 c00c 	str.w	ip, [r8, #12]
  403932:	f8cc 8008 	str.w	r8, [ip, #8]
  403936:	617c      	str	r4, [r7, #20]
  403938:	613c      	str	r4, [r7, #16]
  40393a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40393e:	f8c4 e008 	str.w	lr, [r4, #8]
  403942:	6065      	str	r5, [r4, #4]
  403944:	505a      	str	r2, [r3, r1]
  403946:	f000 fafb 	bl	403f40 <__malloc_unlock>
  40394a:	9b00      	ldr	r3, [sp, #0]
  40394c:	f103 0408 	add.w	r4, r3, #8
  403950:	e01e      	b.n	403990 <_malloc_r+0x18c>
  403952:	2910      	cmp	r1, #16
  403954:	d820      	bhi.n	403998 <_malloc_r+0x194>
  403956:	f000 faed 	bl	403f34 <__malloc_lock>
  40395a:	2610      	movs	r6, #16
  40395c:	2318      	movs	r3, #24
  40395e:	2002      	movs	r0, #2
  403960:	4f79      	ldr	r7, [pc, #484]	; (403b48 <_malloc_r+0x344>)
  403962:	443b      	add	r3, r7
  403964:	f1a3 0208 	sub.w	r2, r3, #8
  403968:	685c      	ldr	r4, [r3, #4]
  40396a:	4294      	cmp	r4, r2
  40396c:	f000 813d 	beq.w	403bea <_malloc_r+0x3e6>
  403970:	6863      	ldr	r3, [r4, #4]
  403972:	68e1      	ldr	r1, [r4, #12]
  403974:	68a6      	ldr	r6, [r4, #8]
  403976:	f023 0303 	bic.w	r3, r3, #3
  40397a:	4423      	add	r3, r4
  40397c:	4628      	mov	r0, r5
  40397e:	685a      	ldr	r2, [r3, #4]
  403980:	60f1      	str	r1, [r6, #12]
  403982:	f042 0201 	orr.w	r2, r2, #1
  403986:	608e      	str	r6, [r1, #8]
  403988:	605a      	str	r2, [r3, #4]
  40398a:	f000 fad9 	bl	403f40 <__malloc_unlock>
  40398e:	3408      	adds	r4, #8
  403990:	4620      	mov	r0, r4
  403992:	b003      	add	sp, #12
  403994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403998:	2400      	movs	r4, #0
  40399a:	230c      	movs	r3, #12
  40399c:	4620      	mov	r0, r4
  40399e:	602b      	str	r3, [r5, #0]
  4039a0:	b003      	add	sp, #12
  4039a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039a6:	2040      	movs	r0, #64	; 0x40
  4039a8:	f44f 7300 	mov.w	r3, #512	; 0x200
  4039ac:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4039b0:	e74a      	b.n	403848 <_malloc_r+0x44>
  4039b2:	4423      	add	r3, r4
  4039b4:	68e1      	ldr	r1, [r4, #12]
  4039b6:	685a      	ldr	r2, [r3, #4]
  4039b8:	68a6      	ldr	r6, [r4, #8]
  4039ba:	f042 0201 	orr.w	r2, r2, #1
  4039be:	60f1      	str	r1, [r6, #12]
  4039c0:	4628      	mov	r0, r5
  4039c2:	608e      	str	r6, [r1, #8]
  4039c4:	605a      	str	r2, [r3, #4]
  4039c6:	f000 fabb 	bl	403f40 <__malloc_unlock>
  4039ca:	3408      	adds	r4, #8
  4039cc:	4620      	mov	r0, r4
  4039ce:	b003      	add	sp, #12
  4039d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039d4:	4423      	add	r3, r4
  4039d6:	4628      	mov	r0, r5
  4039d8:	685a      	ldr	r2, [r3, #4]
  4039da:	f042 0201 	orr.w	r2, r2, #1
  4039de:	605a      	str	r2, [r3, #4]
  4039e0:	f000 faae 	bl	403f40 <__malloc_unlock>
  4039e4:	3408      	adds	r4, #8
  4039e6:	4620      	mov	r0, r4
  4039e8:	b003      	add	sp, #12
  4039ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039ee:	68bc      	ldr	r4, [r7, #8]
  4039f0:	6863      	ldr	r3, [r4, #4]
  4039f2:	f023 0803 	bic.w	r8, r3, #3
  4039f6:	45b0      	cmp	r8, r6
  4039f8:	d304      	bcc.n	403a04 <_malloc_r+0x200>
  4039fa:	eba8 0306 	sub.w	r3, r8, r6
  4039fe:	2b0f      	cmp	r3, #15
  403a00:	f300 8085 	bgt.w	403b0e <_malloc_r+0x30a>
  403a04:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403b60 <_malloc_r+0x35c>
  403a08:	4b50      	ldr	r3, [pc, #320]	; (403b4c <_malloc_r+0x348>)
  403a0a:	f8d9 2000 	ldr.w	r2, [r9]
  403a0e:	681b      	ldr	r3, [r3, #0]
  403a10:	3201      	adds	r2, #1
  403a12:	4433      	add	r3, r6
  403a14:	eb04 0a08 	add.w	sl, r4, r8
  403a18:	f000 8155 	beq.w	403cc6 <_malloc_r+0x4c2>
  403a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403a20:	330f      	adds	r3, #15
  403a22:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403a26:	f02b 0b0f 	bic.w	fp, fp, #15
  403a2a:	4659      	mov	r1, fp
  403a2c:	4628      	mov	r0, r5
  403a2e:	f000 fa8d 	bl	403f4c <_sbrk_r>
  403a32:	1c41      	adds	r1, r0, #1
  403a34:	4602      	mov	r2, r0
  403a36:	f000 80fc 	beq.w	403c32 <_malloc_r+0x42e>
  403a3a:	4582      	cmp	sl, r0
  403a3c:	f200 80f7 	bhi.w	403c2e <_malloc_r+0x42a>
  403a40:	4b43      	ldr	r3, [pc, #268]	; (403b50 <_malloc_r+0x34c>)
  403a42:	6819      	ldr	r1, [r3, #0]
  403a44:	4459      	add	r1, fp
  403a46:	6019      	str	r1, [r3, #0]
  403a48:	f000 814d 	beq.w	403ce6 <_malloc_r+0x4e2>
  403a4c:	f8d9 0000 	ldr.w	r0, [r9]
  403a50:	3001      	adds	r0, #1
  403a52:	bf1b      	ittet	ne
  403a54:	eba2 0a0a 	subne.w	sl, r2, sl
  403a58:	4451      	addne	r1, sl
  403a5a:	f8c9 2000 	streq.w	r2, [r9]
  403a5e:	6019      	strne	r1, [r3, #0]
  403a60:	f012 0107 	ands.w	r1, r2, #7
  403a64:	f000 8115 	beq.w	403c92 <_malloc_r+0x48e>
  403a68:	f1c1 0008 	rsb	r0, r1, #8
  403a6c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403a70:	4402      	add	r2, r0
  403a72:	3108      	adds	r1, #8
  403a74:	eb02 090b 	add.w	r9, r2, fp
  403a78:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403a7c:	eba1 0909 	sub.w	r9, r1, r9
  403a80:	4649      	mov	r1, r9
  403a82:	4628      	mov	r0, r5
  403a84:	9301      	str	r3, [sp, #4]
  403a86:	9200      	str	r2, [sp, #0]
  403a88:	f000 fa60 	bl	403f4c <_sbrk_r>
  403a8c:	1c43      	adds	r3, r0, #1
  403a8e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403a92:	f000 8143 	beq.w	403d1c <_malloc_r+0x518>
  403a96:	1a80      	subs	r0, r0, r2
  403a98:	4448      	add	r0, r9
  403a9a:	f040 0001 	orr.w	r0, r0, #1
  403a9e:	6819      	ldr	r1, [r3, #0]
  403aa0:	60ba      	str	r2, [r7, #8]
  403aa2:	4449      	add	r1, r9
  403aa4:	42bc      	cmp	r4, r7
  403aa6:	6050      	str	r0, [r2, #4]
  403aa8:	6019      	str	r1, [r3, #0]
  403aaa:	d017      	beq.n	403adc <_malloc_r+0x2d8>
  403aac:	f1b8 0f0f 	cmp.w	r8, #15
  403ab0:	f240 80fb 	bls.w	403caa <_malloc_r+0x4a6>
  403ab4:	6860      	ldr	r0, [r4, #4]
  403ab6:	f1a8 020c 	sub.w	r2, r8, #12
  403aba:	f022 0207 	bic.w	r2, r2, #7
  403abe:	eb04 0e02 	add.w	lr, r4, r2
  403ac2:	f000 0001 	and.w	r0, r0, #1
  403ac6:	f04f 0c05 	mov.w	ip, #5
  403aca:	4310      	orrs	r0, r2
  403acc:	2a0f      	cmp	r2, #15
  403ace:	6060      	str	r0, [r4, #4]
  403ad0:	f8ce c004 	str.w	ip, [lr, #4]
  403ad4:	f8ce c008 	str.w	ip, [lr, #8]
  403ad8:	f200 8117 	bhi.w	403d0a <_malloc_r+0x506>
  403adc:	4b1d      	ldr	r3, [pc, #116]	; (403b54 <_malloc_r+0x350>)
  403ade:	68bc      	ldr	r4, [r7, #8]
  403ae0:	681a      	ldr	r2, [r3, #0]
  403ae2:	4291      	cmp	r1, r2
  403ae4:	bf88      	it	hi
  403ae6:	6019      	strhi	r1, [r3, #0]
  403ae8:	4b1b      	ldr	r3, [pc, #108]	; (403b58 <_malloc_r+0x354>)
  403aea:	681a      	ldr	r2, [r3, #0]
  403aec:	4291      	cmp	r1, r2
  403aee:	6862      	ldr	r2, [r4, #4]
  403af0:	bf88      	it	hi
  403af2:	6019      	strhi	r1, [r3, #0]
  403af4:	f022 0203 	bic.w	r2, r2, #3
  403af8:	4296      	cmp	r6, r2
  403afa:	eba2 0306 	sub.w	r3, r2, r6
  403afe:	d801      	bhi.n	403b04 <_malloc_r+0x300>
  403b00:	2b0f      	cmp	r3, #15
  403b02:	dc04      	bgt.n	403b0e <_malloc_r+0x30a>
  403b04:	4628      	mov	r0, r5
  403b06:	f000 fa1b 	bl	403f40 <__malloc_unlock>
  403b0a:	2400      	movs	r4, #0
  403b0c:	e740      	b.n	403990 <_malloc_r+0x18c>
  403b0e:	19a2      	adds	r2, r4, r6
  403b10:	f043 0301 	orr.w	r3, r3, #1
  403b14:	f046 0601 	orr.w	r6, r6, #1
  403b18:	6066      	str	r6, [r4, #4]
  403b1a:	4628      	mov	r0, r5
  403b1c:	60ba      	str	r2, [r7, #8]
  403b1e:	6053      	str	r3, [r2, #4]
  403b20:	f000 fa0e 	bl	403f40 <__malloc_unlock>
  403b24:	3408      	adds	r4, #8
  403b26:	4620      	mov	r0, r4
  403b28:	b003      	add	sp, #12
  403b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b2e:	2b14      	cmp	r3, #20
  403b30:	d971      	bls.n	403c16 <_malloc_r+0x412>
  403b32:	2b54      	cmp	r3, #84	; 0x54
  403b34:	f200 80a3 	bhi.w	403c7e <_malloc_r+0x47a>
  403b38:	0b33      	lsrs	r3, r6, #12
  403b3a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403b3e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403b42:	00c3      	lsls	r3, r0, #3
  403b44:	e680      	b.n	403848 <_malloc_r+0x44>
  403b46:	bf00      	nop
  403b48:	20400440 	.word	0x20400440
  403b4c:	20400c10 	.word	0x20400c10
  403b50:	20400be0 	.word	0x20400be0
  403b54:	20400c08 	.word	0x20400c08
  403b58:	20400c0c 	.word	0x20400c0c
  403b5c:	20400448 	.word	0x20400448
  403b60:	20400848 	.word	0x20400848
  403b64:	0a5a      	lsrs	r2, r3, #9
  403b66:	2a04      	cmp	r2, #4
  403b68:	d95b      	bls.n	403c22 <_malloc_r+0x41e>
  403b6a:	2a14      	cmp	r2, #20
  403b6c:	f200 80ae 	bhi.w	403ccc <_malloc_r+0x4c8>
  403b70:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403b74:	00c9      	lsls	r1, r1, #3
  403b76:	325b      	adds	r2, #91	; 0x5b
  403b78:	eb07 0c01 	add.w	ip, r7, r1
  403b7c:	5879      	ldr	r1, [r7, r1]
  403b7e:	f1ac 0c08 	sub.w	ip, ip, #8
  403b82:	458c      	cmp	ip, r1
  403b84:	f000 8088 	beq.w	403c98 <_malloc_r+0x494>
  403b88:	684a      	ldr	r2, [r1, #4]
  403b8a:	f022 0203 	bic.w	r2, r2, #3
  403b8e:	4293      	cmp	r3, r2
  403b90:	d273      	bcs.n	403c7a <_malloc_r+0x476>
  403b92:	6889      	ldr	r1, [r1, #8]
  403b94:	458c      	cmp	ip, r1
  403b96:	d1f7      	bne.n	403b88 <_malloc_r+0x384>
  403b98:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403b9c:	687b      	ldr	r3, [r7, #4]
  403b9e:	60e2      	str	r2, [r4, #12]
  403ba0:	f8c4 c008 	str.w	ip, [r4, #8]
  403ba4:	6094      	str	r4, [r2, #8]
  403ba6:	f8cc 400c 	str.w	r4, [ip, #12]
  403baa:	e68f      	b.n	4038cc <_malloc_r+0xc8>
  403bac:	19a1      	adds	r1, r4, r6
  403bae:	f046 0c01 	orr.w	ip, r6, #1
  403bb2:	f042 0601 	orr.w	r6, r2, #1
  403bb6:	f8c4 c004 	str.w	ip, [r4, #4]
  403bba:	4628      	mov	r0, r5
  403bbc:	6179      	str	r1, [r7, #20]
  403bbe:	6139      	str	r1, [r7, #16]
  403bc0:	f8c1 e00c 	str.w	lr, [r1, #12]
  403bc4:	f8c1 e008 	str.w	lr, [r1, #8]
  403bc8:	604e      	str	r6, [r1, #4]
  403bca:	50e2      	str	r2, [r4, r3]
  403bcc:	f000 f9b8 	bl	403f40 <__malloc_unlock>
  403bd0:	3408      	adds	r4, #8
  403bd2:	e6dd      	b.n	403990 <_malloc_r+0x18c>
  403bd4:	687b      	ldr	r3, [r7, #4]
  403bd6:	e679      	b.n	4038cc <_malloc_r+0xc8>
  403bd8:	f108 0801 	add.w	r8, r8, #1
  403bdc:	f018 0f03 	tst.w	r8, #3
  403be0:	f10c 0c08 	add.w	ip, ip, #8
  403be4:	f47f ae85 	bne.w	4038f2 <_malloc_r+0xee>
  403be8:	e02d      	b.n	403c46 <_malloc_r+0x442>
  403bea:	68dc      	ldr	r4, [r3, #12]
  403bec:	42a3      	cmp	r3, r4
  403bee:	bf08      	it	eq
  403bf0:	3002      	addeq	r0, #2
  403bf2:	f43f ae3e 	beq.w	403872 <_malloc_r+0x6e>
  403bf6:	e6bb      	b.n	403970 <_malloc_r+0x16c>
  403bf8:	4419      	add	r1, r3
  403bfa:	461c      	mov	r4, r3
  403bfc:	684a      	ldr	r2, [r1, #4]
  403bfe:	68db      	ldr	r3, [r3, #12]
  403c00:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403c04:	f042 0201 	orr.w	r2, r2, #1
  403c08:	604a      	str	r2, [r1, #4]
  403c0a:	4628      	mov	r0, r5
  403c0c:	60f3      	str	r3, [r6, #12]
  403c0e:	609e      	str	r6, [r3, #8]
  403c10:	f000 f996 	bl	403f40 <__malloc_unlock>
  403c14:	e6bc      	b.n	403990 <_malloc_r+0x18c>
  403c16:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403c1a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403c1e:	00c3      	lsls	r3, r0, #3
  403c20:	e612      	b.n	403848 <_malloc_r+0x44>
  403c22:	099a      	lsrs	r2, r3, #6
  403c24:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403c28:	00c9      	lsls	r1, r1, #3
  403c2a:	3238      	adds	r2, #56	; 0x38
  403c2c:	e7a4      	b.n	403b78 <_malloc_r+0x374>
  403c2e:	42bc      	cmp	r4, r7
  403c30:	d054      	beq.n	403cdc <_malloc_r+0x4d8>
  403c32:	68bc      	ldr	r4, [r7, #8]
  403c34:	6862      	ldr	r2, [r4, #4]
  403c36:	f022 0203 	bic.w	r2, r2, #3
  403c3a:	e75d      	b.n	403af8 <_malloc_r+0x2f4>
  403c3c:	f859 3908 	ldr.w	r3, [r9], #-8
  403c40:	4599      	cmp	r9, r3
  403c42:	f040 8086 	bne.w	403d52 <_malloc_r+0x54e>
  403c46:	f010 0f03 	tst.w	r0, #3
  403c4a:	f100 30ff 	add.w	r0, r0, #4294967295
  403c4e:	d1f5      	bne.n	403c3c <_malloc_r+0x438>
  403c50:	687b      	ldr	r3, [r7, #4]
  403c52:	ea23 0304 	bic.w	r3, r3, r4
  403c56:	607b      	str	r3, [r7, #4]
  403c58:	0064      	lsls	r4, r4, #1
  403c5a:	429c      	cmp	r4, r3
  403c5c:	f63f aec7 	bhi.w	4039ee <_malloc_r+0x1ea>
  403c60:	2c00      	cmp	r4, #0
  403c62:	f43f aec4 	beq.w	4039ee <_malloc_r+0x1ea>
  403c66:	421c      	tst	r4, r3
  403c68:	4640      	mov	r0, r8
  403c6a:	f47f ae3e 	bne.w	4038ea <_malloc_r+0xe6>
  403c6e:	0064      	lsls	r4, r4, #1
  403c70:	421c      	tst	r4, r3
  403c72:	f100 0004 	add.w	r0, r0, #4
  403c76:	d0fa      	beq.n	403c6e <_malloc_r+0x46a>
  403c78:	e637      	b.n	4038ea <_malloc_r+0xe6>
  403c7a:	468c      	mov	ip, r1
  403c7c:	e78c      	b.n	403b98 <_malloc_r+0x394>
  403c7e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403c82:	d815      	bhi.n	403cb0 <_malloc_r+0x4ac>
  403c84:	0bf3      	lsrs	r3, r6, #15
  403c86:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403c8a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403c8e:	00c3      	lsls	r3, r0, #3
  403c90:	e5da      	b.n	403848 <_malloc_r+0x44>
  403c92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403c96:	e6ed      	b.n	403a74 <_malloc_r+0x270>
  403c98:	687b      	ldr	r3, [r7, #4]
  403c9a:	1092      	asrs	r2, r2, #2
  403c9c:	2101      	movs	r1, #1
  403c9e:	fa01 f202 	lsl.w	r2, r1, r2
  403ca2:	4313      	orrs	r3, r2
  403ca4:	607b      	str	r3, [r7, #4]
  403ca6:	4662      	mov	r2, ip
  403ca8:	e779      	b.n	403b9e <_malloc_r+0x39a>
  403caa:	2301      	movs	r3, #1
  403cac:	6053      	str	r3, [r2, #4]
  403cae:	e729      	b.n	403b04 <_malloc_r+0x300>
  403cb0:	f240 5254 	movw	r2, #1364	; 0x554
  403cb4:	4293      	cmp	r3, r2
  403cb6:	d822      	bhi.n	403cfe <_malloc_r+0x4fa>
  403cb8:	0cb3      	lsrs	r3, r6, #18
  403cba:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403cbe:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403cc2:	00c3      	lsls	r3, r0, #3
  403cc4:	e5c0      	b.n	403848 <_malloc_r+0x44>
  403cc6:	f103 0b10 	add.w	fp, r3, #16
  403cca:	e6ae      	b.n	403a2a <_malloc_r+0x226>
  403ccc:	2a54      	cmp	r2, #84	; 0x54
  403cce:	d829      	bhi.n	403d24 <_malloc_r+0x520>
  403cd0:	0b1a      	lsrs	r2, r3, #12
  403cd2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403cd6:	00c9      	lsls	r1, r1, #3
  403cd8:	326e      	adds	r2, #110	; 0x6e
  403cda:	e74d      	b.n	403b78 <_malloc_r+0x374>
  403cdc:	4b20      	ldr	r3, [pc, #128]	; (403d60 <_malloc_r+0x55c>)
  403cde:	6819      	ldr	r1, [r3, #0]
  403ce0:	4459      	add	r1, fp
  403ce2:	6019      	str	r1, [r3, #0]
  403ce4:	e6b2      	b.n	403a4c <_malloc_r+0x248>
  403ce6:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403cea:	2800      	cmp	r0, #0
  403cec:	f47f aeae 	bne.w	403a4c <_malloc_r+0x248>
  403cf0:	eb08 030b 	add.w	r3, r8, fp
  403cf4:	68ba      	ldr	r2, [r7, #8]
  403cf6:	f043 0301 	orr.w	r3, r3, #1
  403cfa:	6053      	str	r3, [r2, #4]
  403cfc:	e6ee      	b.n	403adc <_malloc_r+0x2d8>
  403cfe:	207f      	movs	r0, #127	; 0x7f
  403d00:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403d04:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403d08:	e59e      	b.n	403848 <_malloc_r+0x44>
  403d0a:	f104 0108 	add.w	r1, r4, #8
  403d0e:	4628      	mov	r0, r5
  403d10:	9300      	str	r3, [sp, #0]
  403d12:	f001 fbdf 	bl	4054d4 <_free_r>
  403d16:	9b00      	ldr	r3, [sp, #0]
  403d18:	6819      	ldr	r1, [r3, #0]
  403d1a:	e6df      	b.n	403adc <_malloc_r+0x2d8>
  403d1c:	2001      	movs	r0, #1
  403d1e:	f04f 0900 	mov.w	r9, #0
  403d22:	e6bc      	b.n	403a9e <_malloc_r+0x29a>
  403d24:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403d28:	d805      	bhi.n	403d36 <_malloc_r+0x532>
  403d2a:	0bda      	lsrs	r2, r3, #15
  403d2c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403d30:	00c9      	lsls	r1, r1, #3
  403d32:	3277      	adds	r2, #119	; 0x77
  403d34:	e720      	b.n	403b78 <_malloc_r+0x374>
  403d36:	f240 5154 	movw	r1, #1364	; 0x554
  403d3a:	428a      	cmp	r2, r1
  403d3c:	d805      	bhi.n	403d4a <_malloc_r+0x546>
  403d3e:	0c9a      	lsrs	r2, r3, #18
  403d40:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403d44:	00c9      	lsls	r1, r1, #3
  403d46:	327c      	adds	r2, #124	; 0x7c
  403d48:	e716      	b.n	403b78 <_malloc_r+0x374>
  403d4a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403d4e:	227e      	movs	r2, #126	; 0x7e
  403d50:	e712      	b.n	403b78 <_malloc_r+0x374>
  403d52:	687b      	ldr	r3, [r7, #4]
  403d54:	e780      	b.n	403c58 <_malloc_r+0x454>
  403d56:	08f0      	lsrs	r0, r6, #3
  403d58:	f106 0308 	add.w	r3, r6, #8
  403d5c:	e600      	b.n	403960 <_malloc_r+0x15c>
  403d5e:	bf00      	nop
  403d60:	20400be0 	.word	0x20400be0

00403d64 <memcpy>:
  403d64:	4684      	mov	ip, r0
  403d66:	ea41 0300 	orr.w	r3, r1, r0
  403d6a:	f013 0303 	ands.w	r3, r3, #3
  403d6e:	d16d      	bne.n	403e4c <memcpy+0xe8>
  403d70:	3a40      	subs	r2, #64	; 0x40
  403d72:	d341      	bcc.n	403df8 <memcpy+0x94>
  403d74:	f851 3b04 	ldr.w	r3, [r1], #4
  403d78:	f840 3b04 	str.w	r3, [r0], #4
  403d7c:	f851 3b04 	ldr.w	r3, [r1], #4
  403d80:	f840 3b04 	str.w	r3, [r0], #4
  403d84:	f851 3b04 	ldr.w	r3, [r1], #4
  403d88:	f840 3b04 	str.w	r3, [r0], #4
  403d8c:	f851 3b04 	ldr.w	r3, [r1], #4
  403d90:	f840 3b04 	str.w	r3, [r0], #4
  403d94:	f851 3b04 	ldr.w	r3, [r1], #4
  403d98:	f840 3b04 	str.w	r3, [r0], #4
  403d9c:	f851 3b04 	ldr.w	r3, [r1], #4
  403da0:	f840 3b04 	str.w	r3, [r0], #4
  403da4:	f851 3b04 	ldr.w	r3, [r1], #4
  403da8:	f840 3b04 	str.w	r3, [r0], #4
  403dac:	f851 3b04 	ldr.w	r3, [r1], #4
  403db0:	f840 3b04 	str.w	r3, [r0], #4
  403db4:	f851 3b04 	ldr.w	r3, [r1], #4
  403db8:	f840 3b04 	str.w	r3, [r0], #4
  403dbc:	f851 3b04 	ldr.w	r3, [r1], #4
  403dc0:	f840 3b04 	str.w	r3, [r0], #4
  403dc4:	f851 3b04 	ldr.w	r3, [r1], #4
  403dc8:	f840 3b04 	str.w	r3, [r0], #4
  403dcc:	f851 3b04 	ldr.w	r3, [r1], #4
  403dd0:	f840 3b04 	str.w	r3, [r0], #4
  403dd4:	f851 3b04 	ldr.w	r3, [r1], #4
  403dd8:	f840 3b04 	str.w	r3, [r0], #4
  403ddc:	f851 3b04 	ldr.w	r3, [r1], #4
  403de0:	f840 3b04 	str.w	r3, [r0], #4
  403de4:	f851 3b04 	ldr.w	r3, [r1], #4
  403de8:	f840 3b04 	str.w	r3, [r0], #4
  403dec:	f851 3b04 	ldr.w	r3, [r1], #4
  403df0:	f840 3b04 	str.w	r3, [r0], #4
  403df4:	3a40      	subs	r2, #64	; 0x40
  403df6:	d2bd      	bcs.n	403d74 <memcpy+0x10>
  403df8:	3230      	adds	r2, #48	; 0x30
  403dfa:	d311      	bcc.n	403e20 <memcpy+0xbc>
  403dfc:	f851 3b04 	ldr.w	r3, [r1], #4
  403e00:	f840 3b04 	str.w	r3, [r0], #4
  403e04:	f851 3b04 	ldr.w	r3, [r1], #4
  403e08:	f840 3b04 	str.w	r3, [r0], #4
  403e0c:	f851 3b04 	ldr.w	r3, [r1], #4
  403e10:	f840 3b04 	str.w	r3, [r0], #4
  403e14:	f851 3b04 	ldr.w	r3, [r1], #4
  403e18:	f840 3b04 	str.w	r3, [r0], #4
  403e1c:	3a10      	subs	r2, #16
  403e1e:	d2ed      	bcs.n	403dfc <memcpy+0x98>
  403e20:	320c      	adds	r2, #12
  403e22:	d305      	bcc.n	403e30 <memcpy+0xcc>
  403e24:	f851 3b04 	ldr.w	r3, [r1], #4
  403e28:	f840 3b04 	str.w	r3, [r0], #4
  403e2c:	3a04      	subs	r2, #4
  403e2e:	d2f9      	bcs.n	403e24 <memcpy+0xc0>
  403e30:	3204      	adds	r2, #4
  403e32:	d008      	beq.n	403e46 <memcpy+0xe2>
  403e34:	07d2      	lsls	r2, r2, #31
  403e36:	bf1c      	itt	ne
  403e38:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403e3c:	f800 3b01 	strbne.w	r3, [r0], #1
  403e40:	d301      	bcc.n	403e46 <memcpy+0xe2>
  403e42:	880b      	ldrh	r3, [r1, #0]
  403e44:	8003      	strh	r3, [r0, #0]
  403e46:	4660      	mov	r0, ip
  403e48:	4770      	bx	lr
  403e4a:	bf00      	nop
  403e4c:	2a08      	cmp	r2, #8
  403e4e:	d313      	bcc.n	403e78 <memcpy+0x114>
  403e50:	078b      	lsls	r3, r1, #30
  403e52:	d08d      	beq.n	403d70 <memcpy+0xc>
  403e54:	f010 0303 	ands.w	r3, r0, #3
  403e58:	d08a      	beq.n	403d70 <memcpy+0xc>
  403e5a:	f1c3 0304 	rsb	r3, r3, #4
  403e5e:	1ad2      	subs	r2, r2, r3
  403e60:	07db      	lsls	r3, r3, #31
  403e62:	bf1c      	itt	ne
  403e64:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403e68:	f800 3b01 	strbne.w	r3, [r0], #1
  403e6c:	d380      	bcc.n	403d70 <memcpy+0xc>
  403e6e:	f831 3b02 	ldrh.w	r3, [r1], #2
  403e72:	f820 3b02 	strh.w	r3, [r0], #2
  403e76:	e77b      	b.n	403d70 <memcpy+0xc>
  403e78:	3a04      	subs	r2, #4
  403e7a:	d3d9      	bcc.n	403e30 <memcpy+0xcc>
  403e7c:	3a01      	subs	r2, #1
  403e7e:	f811 3b01 	ldrb.w	r3, [r1], #1
  403e82:	f800 3b01 	strb.w	r3, [r0], #1
  403e86:	d2f9      	bcs.n	403e7c <memcpy+0x118>
  403e88:	780b      	ldrb	r3, [r1, #0]
  403e8a:	7003      	strb	r3, [r0, #0]
  403e8c:	784b      	ldrb	r3, [r1, #1]
  403e8e:	7043      	strb	r3, [r0, #1]
  403e90:	788b      	ldrb	r3, [r1, #2]
  403e92:	7083      	strb	r3, [r0, #2]
  403e94:	4660      	mov	r0, ip
  403e96:	4770      	bx	lr

00403e98 <memset>:
  403e98:	b470      	push	{r4, r5, r6}
  403e9a:	0786      	lsls	r6, r0, #30
  403e9c:	d046      	beq.n	403f2c <memset+0x94>
  403e9e:	1e54      	subs	r4, r2, #1
  403ea0:	2a00      	cmp	r2, #0
  403ea2:	d041      	beq.n	403f28 <memset+0x90>
  403ea4:	b2ca      	uxtb	r2, r1
  403ea6:	4603      	mov	r3, r0
  403ea8:	e002      	b.n	403eb0 <memset+0x18>
  403eaa:	f114 34ff 	adds.w	r4, r4, #4294967295
  403eae:	d33b      	bcc.n	403f28 <memset+0x90>
  403eb0:	f803 2b01 	strb.w	r2, [r3], #1
  403eb4:	079d      	lsls	r5, r3, #30
  403eb6:	d1f8      	bne.n	403eaa <memset+0x12>
  403eb8:	2c03      	cmp	r4, #3
  403eba:	d92e      	bls.n	403f1a <memset+0x82>
  403ebc:	b2cd      	uxtb	r5, r1
  403ebe:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403ec2:	2c0f      	cmp	r4, #15
  403ec4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403ec8:	d919      	bls.n	403efe <memset+0x66>
  403eca:	f103 0210 	add.w	r2, r3, #16
  403ece:	4626      	mov	r6, r4
  403ed0:	3e10      	subs	r6, #16
  403ed2:	2e0f      	cmp	r6, #15
  403ed4:	f842 5c10 	str.w	r5, [r2, #-16]
  403ed8:	f842 5c0c 	str.w	r5, [r2, #-12]
  403edc:	f842 5c08 	str.w	r5, [r2, #-8]
  403ee0:	f842 5c04 	str.w	r5, [r2, #-4]
  403ee4:	f102 0210 	add.w	r2, r2, #16
  403ee8:	d8f2      	bhi.n	403ed0 <memset+0x38>
  403eea:	f1a4 0210 	sub.w	r2, r4, #16
  403eee:	f022 020f 	bic.w	r2, r2, #15
  403ef2:	f004 040f 	and.w	r4, r4, #15
  403ef6:	3210      	adds	r2, #16
  403ef8:	2c03      	cmp	r4, #3
  403efa:	4413      	add	r3, r2
  403efc:	d90d      	bls.n	403f1a <memset+0x82>
  403efe:	461e      	mov	r6, r3
  403f00:	4622      	mov	r2, r4
  403f02:	3a04      	subs	r2, #4
  403f04:	2a03      	cmp	r2, #3
  403f06:	f846 5b04 	str.w	r5, [r6], #4
  403f0a:	d8fa      	bhi.n	403f02 <memset+0x6a>
  403f0c:	1f22      	subs	r2, r4, #4
  403f0e:	f022 0203 	bic.w	r2, r2, #3
  403f12:	3204      	adds	r2, #4
  403f14:	4413      	add	r3, r2
  403f16:	f004 0403 	and.w	r4, r4, #3
  403f1a:	b12c      	cbz	r4, 403f28 <memset+0x90>
  403f1c:	b2c9      	uxtb	r1, r1
  403f1e:	441c      	add	r4, r3
  403f20:	f803 1b01 	strb.w	r1, [r3], #1
  403f24:	429c      	cmp	r4, r3
  403f26:	d1fb      	bne.n	403f20 <memset+0x88>
  403f28:	bc70      	pop	{r4, r5, r6}
  403f2a:	4770      	bx	lr
  403f2c:	4614      	mov	r4, r2
  403f2e:	4603      	mov	r3, r0
  403f30:	e7c2      	b.n	403eb8 <memset+0x20>
  403f32:	bf00      	nop

00403f34 <__malloc_lock>:
  403f34:	4801      	ldr	r0, [pc, #4]	; (403f3c <__malloc_lock+0x8>)
  403f36:	f001 bd67 	b.w	405a08 <__retarget_lock_acquire_recursive>
  403f3a:	bf00      	nop
  403f3c:	20400d00 	.word	0x20400d00

00403f40 <__malloc_unlock>:
  403f40:	4801      	ldr	r0, [pc, #4]	; (403f48 <__malloc_unlock+0x8>)
  403f42:	f001 bd63 	b.w	405a0c <__retarget_lock_release_recursive>
  403f46:	bf00      	nop
  403f48:	20400d00 	.word	0x20400d00

00403f4c <_sbrk_r>:
  403f4c:	b538      	push	{r3, r4, r5, lr}
  403f4e:	4c07      	ldr	r4, [pc, #28]	; (403f6c <_sbrk_r+0x20>)
  403f50:	2300      	movs	r3, #0
  403f52:	4605      	mov	r5, r0
  403f54:	4608      	mov	r0, r1
  403f56:	6023      	str	r3, [r4, #0]
  403f58:	f7fd f878 	bl	40104c <_sbrk>
  403f5c:	1c43      	adds	r3, r0, #1
  403f5e:	d000      	beq.n	403f62 <_sbrk_r+0x16>
  403f60:	bd38      	pop	{r3, r4, r5, pc}
  403f62:	6823      	ldr	r3, [r4, #0]
  403f64:	2b00      	cmp	r3, #0
  403f66:	d0fb      	beq.n	403f60 <_sbrk_r+0x14>
  403f68:	602b      	str	r3, [r5, #0]
  403f6a:	bd38      	pop	{r3, r4, r5, pc}
  403f6c:	20400d14 	.word	0x20400d14

00403f70 <setbuf>:
  403f70:	2900      	cmp	r1, #0
  403f72:	bf0c      	ite	eq
  403f74:	2202      	moveq	r2, #2
  403f76:	2200      	movne	r2, #0
  403f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403f7c:	f000 b800 	b.w	403f80 <setvbuf>

00403f80 <setvbuf>:
  403f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403f84:	4c61      	ldr	r4, [pc, #388]	; (40410c <setvbuf+0x18c>)
  403f86:	6825      	ldr	r5, [r4, #0]
  403f88:	b083      	sub	sp, #12
  403f8a:	4604      	mov	r4, r0
  403f8c:	460f      	mov	r7, r1
  403f8e:	4690      	mov	r8, r2
  403f90:	461e      	mov	r6, r3
  403f92:	b115      	cbz	r5, 403f9a <setvbuf+0x1a>
  403f94:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403f96:	2b00      	cmp	r3, #0
  403f98:	d064      	beq.n	404064 <setvbuf+0xe4>
  403f9a:	f1b8 0f02 	cmp.w	r8, #2
  403f9e:	d006      	beq.n	403fae <setvbuf+0x2e>
  403fa0:	f1b8 0f01 	cmp.w	r8, #1
  403fa4:	f200 809f 	bhi.w	4040e6 <setvbuf+0x166>
  403fa8:	2e00      	cmp	r6, #0
  403faa:	f2c0 809c 	blt.w	4040e6 <setvbuf+0x166>
  403fae:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403fb0:	07d8      	lsls	r0, r3, #31
  403fb2:	d534      	bpl.n	40401e <setvbuf+0x9e>
  403fb4:	4621      	mov	r1, r4
  403fb6:	4628      	mov	r0, r5
  403fb8:	f001 f90e 	bl	4051d8 <_fflush_r>
  403fbc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403fbe:	b141      	cbz	r1, 403fd2 <setvbuf+0x52>
  403fc0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403fc4:	4299      	cmp	r1, r3
  403fc6:	d002      	beq.n	403fce <setvbuf+0x4e>
  403fc8:	4628      	mov	r0, r5
  403fca:	f001 fa83 	bl	4054d4 <_free_r>
  403fce:	2300      	movs	r3, #0
  403fd0:	6323      	str	r3, [r4, #48]	; 0x30
  403fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403fd6:	2200      	movs	r2, #0
  403fd8:	61a2      	str	r2, [r4, #24]
  403fda:	6062      	str	r2, [r4, #4]
  403fdc:	061a      	lsls	r2, r3, #24
  403fde:	d43a      	bmi.n	404056 <setvbuf+0xd6>
  403fe0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403fe4:	f023 0303 	bic.w	r3, r3, #3
  403fe8:	f1b8 0f02 	cmp.w	r8, #2
  403fec:	81a3      	strh	r3, [r4, #12]
  403fee:	d01d      	beq.n	40402c <setvbuf+0xac>
  403ff0:	ab01      	add	r3, sp, #4
  403ff2:	466a      	mov	r2, sp
  403ff4:	4621      	mov	r1, r4
  403ff6:	4628      	mov	r0, r5
  403ff8:	f001 fd0a 	bl	405a10 <__swhatbuf_r>
  403ffc:	89a3      	ldrh	r3, [r4, #12]
  403ffe:	4318      	orrs	r0, r3
  404000:	81a0      	strh	r0, [r4, #12]
  404002:	2e00      	cmp	r6, #0
  404004:	d132      	bne.n	40406c <setvbuf+0xec>
  404006:	9e00      	ldr	r6, [sp, #0]
  404008:	4630      	mov	r0, r6
  40400a:	f7ff fbeb 	bl	4037e4 <malloc>
  40400e:	4607      	mov	r7, r0
  404010:	2800      	cmp	r0, #0
  404012:	d06b      	beq.n	4040ec <setvbuf+0x16c>
  404014:	89a3      	ldrh	r3, [r4, #12]
  404016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40401a:	81a3      	strh	r3, [r4, #12]
  40401c:	e028      	b.n	404070 <setvbuf+0xf0>
  40401e:	89a3      	ldrh	r3, [r4, #12]
  404020:	0599      	lsls	r1, r3, #22
  404022:	d4c7      	bmi.n	403fb4 <setvbuf+0x34>
  404024:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404026:	f001 fcef 	bl	405a08 <__retarget_lock_acquire_recursive>
  40402a:	e7c3      	b.n	403fb4 <setvbuf+0x34>
  40402c:	2500      	movs	r5, #0
  40402e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404030:	2600      	movs	r6, #0
  404032:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404036:	f043 0302 	orr.w	r3, r3, #2
  40403a:	2001      	movs	r0, #1
  40403c:	60a6      	str	r6, [r4, #8]
  40403e:	07ce      	lsls	r6, r1, #31
  404040:	81a3      	strh	r3, [r4, #12]
  404042:	6022      	str	r2, [r4, #0]
  404044:	6122      	str	r2, [r4, #16]
  404046:	6160      	str	r0, [r4, #20]
  404048:	d401      	bmi.n	40404e <setvbuf+0xce>
  40404a:	0598      	lsls	r0, r3, #22
  40404c:	d53e      	bpl.n	4040cc <setvbuf+0x14c>
  40404e:	4628      	mov	r0, r5
  404050:	b003      	add	sp, #12
  404052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404056:	6921      	ldr	r1, [r4, #16]
  404058:	4628      	mov	r0, r5
  40405a:	f001 fa3b 	bl	4054d4 <_free_r>
  40405e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404062:	e7bd      	b.n	403fe0 <setvbuf+0x60>
  404064:	4628      	mov	r0, r5
  404066:	f001 f90f 	bl	405288 <__sinit>
  40406a:	e796      	b.n	403f9a <setvbuf+0x1a>
  40406c:	2f00      	cmp	r7, #0
  40406e:	d0cb      	beq.n	404008 <setvbuf+0x88>
  404070:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404072:	2b00      	cmp	r3, #0
  404074:	d033      	beq.n	4040de <setvbuf+0x15e>
  404076:	9b00      	ldr	r3, [sp, #0]
  404078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40407c:	6027      	str	r7, [r4, #0]
  40407e:	429e      	cmp	r6, r3
  404080:	bf1c      	itt	ne
  404082:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404086:	81a2      	strhne	r2, [r4, #12]
  404088:	f1b8 0f01 	cmp.w	r8, #1
  40408c:	bf04      	itt	eq
  40408e:	f042 0201 	orreq.w	r2, r2, #1
  404092:	81a2      	strheq	r2, [r4, #12]
  404094:	b292      	uxth	r2, r2
  404096:	f012 0308 	ands.w	r3, r2, #8
  40409a:	6127      	str	r7, [r4, #16]
  40409c:	6166      	str	r6, [r4, #20]
  40409e:	d00e      	beq.n	4040be <setvbuf+0x13e>
  4040a0:	07d1      	lsls	r1, r2, #31
  4040a2:	d51a      	bpl.n	4040da <setvbuf+0x15a>
  4040a4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4040a6:	4276      	negs	r6, r6
  4040a8:	2300      	movs	r3, #0
  4040aa:	f015 0501 	ands.w	r5, r5, #1
  4040ae:	61a6      	str	r6, [r4, #24]
  4040b0:	60a3      	str	r3, [r4, #8]
  4040b2:	d009      	beq.n	4040c8 <setvbuf+0x148>
  4040b4:	2500      	movs	r5, #0
  4040b6:	4628      	mov	r0, r5
  4040b8:	b003      	add	sp, #12
  4040ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4040be:	60a3      	str	r3, [r4, #8]
  4040c0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4040c2:	f015 0501 	ands.w	r5, r5, #1
  4040c6:	d1f5      	bne.n	4040b4 <setvbuf+0x134>
  4040c8:	0593      	lsls	r3, r2, #22
  4040ca:	d4c0      	bmi.n	40404e <setvbuf+0xce>
  4040cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4040ce:	f001 fc9d 	bl	405a0c <__retarget_lock_release_recursive>
  4040d2:	4628      	mov	r0, r5
  4040d4:	b003      	add	sp, #12
  4040d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4040da:	60a6      	str	r6, [r4, #8]
  4040dc:	e7f0      	b.n	4040c0 <setvbuf+0x140>
  4040de:	4628      	mov	r0, r5
  4040e0:	f001 f8d2 	bl	405288 <__sinit>
  4040e4:	e7c7      	b.n	404076 <setvbuf+0xf6>
  4040e6:	f04f 35ff 	mov.w	r5, #4294967295
  4040ea:	e7b0      	b.n	40404e <setvbuf+0xce>
  4040ec:	f8dd 9000 	ldr.w	r9, [sp]
  4040f0:	45b1      	cmp	r9, r6
  4040f2:	d004      	beq.n	4040fe <setvbuf+0x17e>
  4040f4:	4648      	mov	r0, r9
  4040f6:	f7ff fb75 	bl	4037e4 <malloc>
  4040fa:	4607      	mov	r7, r0
  4040fc:	b920      	cbnz	r0, 404108 <setvbuf+0x188>
  4040fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404102:	f04f 35ff 	mov.w	r5, #4294967295
  404106:	e792      	b.n	40402e <setvbuf+0xae>
  404108:	464e      	mov	r6, r9
  40410a:	e783      	b.n	404014 <setvbuf+0x94>
  40410c:	20400014 	.word	0x20400014
	...

00404140 <strlen>:
  404140:	f890 f000 	pld	[r0]
  404144:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404148:	f020 0107 	bic.w	r1, r0, #7
  40414c:	f06f 0c00 	mvn.w	ip, #0
  404150:	f010 0407 	ands.w	r4, r0, #7
  404154:	f891 f020 	pld	[r1, #32]
  404158:	f040 8049 	bne.w	4041ee <strlen+0xae>
  40415c:	f04f 0400 	mov.w	r4, #0
  404160:	f06f 0007 	mvn.w	r0, #7
  404164:	e9d1 2300 	ldrd	r2, r3, [r1]
  404168:	f891 f040 	pld	[r1, #64]	; 0x40
  40416c:	f100 0008 	add.w	r0, r0, #8
  404170:	fa82 f24c 	uadd8	r2, r2, ip
  404174:	faa4 f28c 	sel	r2, r4, ip
  404178:	fa83 f34c 	uadd8	r3, r3, ip
  40417c:	faa2 f38c 	sel	r3, r2, ip
  404180:	bb4b      	cbnz	r3, 4041d6 <strlen+0x96>
  404182:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404186:	fa82 f24c 	uadd8	r2, r2, ip
  40418a:	f100 0008 	add.w	r0, r0, #8
  40418e:	faa4 f28c 	sel	r2, r4, ip
  404192:	fa83 f34c 	uadd8	r3, r3, ip
  404196:	faa2 f38c 	sel	r3, r2, ip
  40419a:	b9e3      	cbnz	r3, 4041d6 <strlen+0x96>
  40419c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4041a0:	fa82 f24c 	uadd8	r2, r2, ip
  4041a4:	f100 0008 	add.w	r0, r0, #8
  4041a8:	faa4 f28c 	sel	r2, r4, ip
  4041ac:	fa83 f34c 	uadd8	r3, r3, ip
  4041b0:	faa2 f38c 	sel	r3, r2, ip
  4041b4:	b97b      	cbnz	r3, 4041d6 <strlen+0x96>
  4041b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4041ba:	f101 0120 	add.w	r1, r1, #32
  4041be:	fa82 f24c 	uadd8	r2, r2, ip
  4041c2:	f100 0008 	add.w	r0, r0, #8
  4041c6:	faa4 f28c 	sel	r2, r4, ip
  4041ca:	fa83 f34c 	uadd8	r3, r3, ip
  4041ce:	faa2 f38c 	sel	r3, r2, ip
  4041d2:	2b00      	cmp	r3, #0
  4041d4:	d0c6      	beq.n	404164 <strlen+0x24>
  4041d6:	2a00      	cmp	r2, #0
  4041d8:	bf04      	itt	eq
  4041da:	3004      	addeq	r0, #4
  4041dc:	461a      	moveq	r2, r3
  4041de:	ba12      	rev	r2, r2
  4041e0:	fab2 f282 	clz	r2, r2
  4041e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4041e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4041ec:	4770      	bx	lr
  4041ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4041f2:	f004 0503 	and.w	r5, r4, #3
  4041f6:	f1c4 0000 	rsb	r0, r4, #0
  4041fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4041fe:	f014 0f04 	tst.w	r4, #4
  404202:	f891 f040 	pld	[r1, #64]	; 0x40
  404206:	fa0c f505 	lsl.w	r5, ip, r5
  40420a:	ea62 0205 	orn	r2, r2, r5
  40420e:	bf1c      	itt	ne
  404210:	ea63 0305 	ornne	r3, r3, r5
  404214:	4662      	movne	r2, ip
  404216:	f04f 0400 	mov.w	r4, #0
  40421a:	e7a9      	b.n	404170 <strlen+0x30>

0040421c <__sprint_r.part.0>:
  40421c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404220:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404222:	049c      	lsls	r4, r3, #18
  404224:	4693      	mov	fp, r2
  404226:	d52f      	bpl.n	404288 <__sprint_r.part.0+0x6c>
  404228:	6893      	ldr	r3, [r2, #8]
  40422a:	6812      	ldr	r2, [r2, #0]
  40422c:	b353      	cbz	r3, 404284 <__sprint_r.part.0+0x68>
  40422e:	460e      	mov	r6, r1
  404230:	4607      	mov	r7, r0
  404232:	f102 0908 	add.w	r9, r2, #8
  404236:	e919 0420 	ldmdb	r9, {r5, sl}
  40423a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40423e:	d017      	beq.n	404270 <__sprint_r.part.0+0x54>
  404240:	3d04      	subs	r5, #4
  404242:	2400      	movs	r4, #0
  404244:	e001      	b.n	40424a <__sprint_r.part.0+0x2e>
  404246:	45a0      	cmp	r8, r4
  404248:	d010      	beq.n	40426c <__sprint_r.part.0+0x50>
  40424a:	4632      	mov	r2, r6
  40424c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404250:	4638      	mov	r0, r7
  404252:	f001 f8bb 	bl	4053cc <_fputwc_r>
  404256:	1c43      	adds	r3, r0, #1
  404258:	f104 0401 	add.w	r4, r4, #1
  40425c:	d1f3      	bne.n	404246 <__sprint_r.part.0+0x2a>
  40425e:	2300      	movs	r3, #0
  404260:	f8cb 3008 	str.w	r3, [fp, #8]
  404264:	f8cb 3004 	str.w	r3, [fp, #4]
  404268:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40426c:	f8db 3008 	ldr.w	r3, [fp, #8]
  404270:	f02a 0a03 	bic.w	sl, sl, #3
  404274:	eba3 030a 	sub.w	r3, r3, sl
  404278:	f8cb 3008 	str.w	r3, [fp, #8]
  40427c:	f109 0908 	add.w	r9, r9, #8
  404280:	2b00      	cmp	r3, #0
  404282:	d1d8      	bne.n	404236 <__sprint_r.part.0+0x1a>
  404284:	2000      	movs	r0, #0
  404286:	e7ea      	b.n	40425e <__sprint_r.part.0+0x42>
  404288:	f001 fa0a 	bl	4056a0 <__sfvwrite_r>
  40428c:	2300      	movs	r3, #0
  40428e:	f8cb 3008 	str.w	r3, [fp, #8]
  404292:	f8cb 3004 	str.w	r3, [fp, #4]
  404296:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40429a:	bf00      	nop

0040429c <_vfiprintf_r>:
  40429c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4042a0:	b0ad      	sub	sp, #180	; 0xb4
  4042a2:	461d      	mov	r5, r3
  4042a4:	468b      	mov	fp, r1
  4042a6:	4690      	mov	r8, r2
  4042a8:	9307      	str	r3, [sp, #28]
  4042aa:	9006      	str	r0, [sp, #24]
  4042ac:	b118      	cbz	r0, 4042b6 <_vfiprintf_r+0x1a>
  4042ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4042b0:	2b00      	cmp	r3, #0
  4042b2:	f000 80f3 	beq.w	40449c <_vfiprintf_r+0x200>
  4042b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4042ba:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4042be:	07df      	lsls	r7, r3, #31
  4042c0:	b281      	uxth	r1, r0
  4042c2:	d402      	bmi.n	4042ca <_vfiprintf_r+0x2e>
  4042c4:	058e      	lsls	r6, r1, #22
  4042c6:	f140 80fc 	bpl.w	4044c2 <_vfiprintf_r+0x226>
  4042ca:	048c      	lsls	r4, r1, #18
  4042cc:	d40a      	bmi.n	4042e4 <_vfiprintf_r+0x48>
  4042ce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4042d2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4042d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4042da:	f8ab 100c 	strh.w	r1, [fp, #12]
  4042de:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4042e2:	b289      	uxth	r1, r1
  4042e4:	0708      	lsls	r0, r1, #28
  4042e6:	f140 80b3 	bpl.w	404450 <_vfiprintf_r+0x1b4>
  4042ea:	f8db 3010 	ldr.w	r3, [fp, #16]
  4042ee:	2b00      	cmp	r3, #0
  4042f0:	f000 80ae 	beq.w	404450 <_vfiprintf_r+0x1b4>
  4042f4:	f001 031a 	and.w	r3, r1, #26
  4042f8:	2b0a      	cmp	r3, #10
  4042fa:	f000 80b5 	beq.w	404468 <_vfiprintf_r+0x1cc>
  4042fe:	2300      	movs	r3, #0
  404300:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404304:	930b      	str	r3, [sp, #44]	; 0x2c
  404306:	9311      	str	r3, [sp, #68]	; 0x44
  404308:	9310      	str	r3, [sp, #64]	; 0x40
  40430a:	9303      	str	r3, [sp, #12]
  40430c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404310:	46ca      	mov	sl, r9
  404312:	f8cd b010 	str.w	fp, [sp, #16]
  404316:	f898 3000 	ldrb.w	r3, [r8]
  40431a:	4644      	mov	r4, r8
  40431c:	b1fb      	cbz	r3, 40435e <_vfiprintf_r+0xc2>
  40431e:	2b25      	cmp	r3, #37	; 0x25
  404320:	d102      	bne.n	404328 <_vfiprintf_r+0x8c>
  404322:	e01c      	b.n	40435e <_vfiprintf_r+0xc2>
  404324:	2b25      	cmp	r3, #37	; 0x25
  404326:	d003      	beq.n	404330 <_vfiprintf_r+0x94>
  404328:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40432c:	2b00      	cmp	r3, #0
  40432e:	d1f9      	bne.n	404324 <_vfiprintf_r+0x88>
  404330:	eba4 0508 	sub.w	r5, r4, r8
  404334:	b19d      	cbz	r5, 40435e <_vfiprintf_r+0xc2>
  404336:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404338:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40433a:	f8ca 8000 	str.w	r8, [sl]
  40433e:	3301      	adds	r3, #1
  404340:	442a      	add	r2, r5
  404342:	2b07      	cmp	r3, #7
  404344:	f8ca 5004 	str.w	r5, [sl, #4]
  404348:	9211      	str	r2, [sp, #68]	; 0x44
  40434a:	9310      	str	r3, [sp, #64]	; 0x40
  40434c:	dd7a      	ble.n	404444 <_vfiprintf_r+0x1a8>
  40434e:	2a00      	cmp	r2, #0
  404350:	f040 84b0 	bne.w	404cb4 <_vfiprintf_r+0xa18>
  404354:	9b03      	ldr	r3, [sp, #12]
  404356:	9210      	str	r2, [sp, #64]	; 0x40
  404358:	442b      	add	r3, r5
  40435a:	46ca      	mov	sl, r9
  40435c:	9303      	str	r3, [sp, #12]
  40435e:	7823      	ldrb	r3, [r4, #0]
  404360:	2b00      	cmp	r3, #0
  404362:	f000 83e0 	beq.w	404b26 <_vfiprintf_r+0x88a>
  404366:	2000      	movs	r0, #0
  404368:	f04f 0300 	mov.w	r3, #0
  40436c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  404370:	f104 0801 	add.w	r8, r4, #1
  404374:	7862      	ldrb	r2, [r4, #1]
  404376:	4605      	mov	r5, r0
  404378:	4606      	mov	r6, r0
  40437a:	4603      	mov	r3, r0
  40437c:	f04f 34ff 	mov.w	r4, #4294967295
  404380:	f108 0801 	add.w	r8, r8, #1
  404384:	f1a2 0120 	sub.w	r1, r2, #32
  404388:	2958      	cmp	r1, #88	; 0x58
  40438a:	f200 82de 	bhi.w	40494a <_vfiprintf_r+0x6ae>
  40438e:	e8df f011 	tbh	[pc, r1, lsl #1]
  404392:	0221      	.short	0x0221
  404394:	02dc02dc 	.word	0x02dc02dc
  404398:	02dc0229 	.word	0x02dc0229
  40439c:	02dc02dc 	.word	0x02dc02dc
  4043a0:	02dc02dc 	.word	0x02dc02dc
  4043a4:	028902dc 	.word	0x028902dc
  4043a8:	02dc0295 	.word	0x02dc0295
  4043ac:	02bd00a2 	.word	0x02bd00a2
  4043b0:	019f02dc 	.word	0x019f02dc
  4043b4:	01a401a4 	.word	0x01a401a4
  4043b8:	01a401a4 	.word	0x01a401a4
  4043bc:	01a401a4 	.word	0x01a401a4
  4043c0:	01a401a4 	.word	0x01a401a4
  4043c4:	02dc01a4 	.word	0x02dc01a4
  4043c8:	02dc02dc 	.word	0x02dc02dc
  4043cc:	02dc02dc 	.word	0x02dc02dc
  4043d0:	02dc02dc 	.word	0x02dc02dc
  4043d4:	02dc02dc 	.word	0x02dc02dc
  4043d8:	01b202dc 	.word	0x01b202dc
  4043dc:	02dc02dc 	.word	0x02dc02dc
  4043e0:	02dc02dc 	.word	0x02dc02dc
  4043e4:	02dc02dc 	.word	0x02dc02dc
  4043e8:	02dc02dc 	.word	0x02dc02dc
  4043ec:	02dc02dc 	.word	0x02dc02dc
  4043f0:	02dc0197 	.word	0x02dc0197
  4043f4:	02dc02dc 	.word	0x02dc02dc
  4043f8:	02dc02dc 	.word	0x02dc02dc
  4043fc:	02dc019b 	.word	0x02dc019b
  404400:	025302dc 	.word	0x025302dc
  404404:	02dc02dc 	.word	0x02dc02dc
  404408:	02dc02dc 	.word	0x02dc02dc
  40440c:	02dc02dc 	.word	0x02dc02dc
  404410:	02dc02dc 	.word	0x02dc02dc
  404414:	02dc02dc 	.word	0x02dc02dc
  404418:	021b025a 	.word	0x021b025a
  40441c:	02dc02dc 	.word	0x02dc02dc
  404420:	026e02dc 	.word	0x026e02dc
  404424:	02dc021b 	.word	0x02dc021b
  404428:	027302dc 	.word	0x027302dc
  40442c:	01f502dc 	.word	0x01f502dc
  404430:	02090182 	.word	0x02090182
  404434:	02dc02d7 	.word	0x02dc02d7
  404438:	02dc029a 	.word	0x02dc029a
  40443c:	02dc00a7 	.word	0x02dc00a7
  404440:	022e02dc 	.word	0x022e02dc
  404444:	f10a 0a08 	add.w	sl, sl, #8
  404448:	9b03      	ldr	r3, [sp, #12]
  40444a:	442b      	add	r3, r5
  40444c:	9303      	str	r3, [sp, #12]
  40444e:	e786      	b.n	40435e <_vfiprintf_r+0xc2>
  404450:	4659      	mov	r1, fp
  404452:	9806      	ldr	r0, [sp, #24]
  404454:	f000 fdac 	bl	404fb0 <__swsetup_r>
  404458:	bb18      	cbnz	r0, 4044a2 <_vfiprintf_r+0x206>
  40445a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40445e:	f001 031a 	and.w	r3, r1, #26
  404462:	2b0a      	cmp	r3, #10
  404464:	f47f af4b 	bne.w	4042fe <_vfiprintf_r+0x62>
  404468:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40446c:	2b00      	cmp	r3, #0
  40446e:	f6ff af46 	blt.w	4042fe <_vfiprintf_r+0x62>
  404472:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404476:	07db      	lsls	r3, r3, #31
  404478:	d405      	bmi.n	404486 <_vfiprintf_r+0x1ea>
  40447a:	058f      	lsls	r7, r1, #22
  40447c:	d403      	bmi.n	404486 <_vfiprintf_r+0x1ea>
  40447e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404482:	f001 fac3 	bl	405a0c <__retarget_lock_release_recursive>
  404486:	462b      	mov	r3, r5
  404488:	4642      	mov	r2, r8
  40448a:	4659      	mov	r1, fp
  40448c:	9806      	ldr	r0, [sp, #24]
  40448e:	f000 fd4d 	bl	404f2c <__sbprintf>
  404492:	9003      	str	r0, [sp, #12]
  404494:	9803      	ldr	r0, [sp, #12]
  404496:	b02d      	add	sp, #180	; 0xb4
  404498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40449c:	f000 fef4 	bl	405288 <__sinit>
  4044a0:	e709      	b.n	4042b6 <_vfiprintf_r+0x1a>
  4044a2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4044a6:	07d9      	lsls	r1, r3, #31
  4044a8:	d404      	bmi.n	4044b4 <_vfiprintf_r+0x218>
  4044aa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4044ae:	059a      	lsls	r2, r3, #22
  4044b0:	f140 84aa 	bpl.w	404e08 <_vfiprintf_r+0xb6c>
  4044b4:	f04f 33ff 	mov.w	r3, #4294967295
  4044b8:	9303      	str	r3, [sp, #12]
  4044ba:	9803      	ldr	r0, [sp, #12]
  4044bc:	b02d      	add	sp, #180	; 0xb4
  4044be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044c2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4044c6:	f001 fa9f 	bl	405a08 <__retarget_lock_acquire_recursive>
  4044ca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4044ce:	b281      	uxth	r1, r0
  4044d0:	e6fb      	b.n	4042ca <_vfiprintf_r+0x2e>
  4044d2:	4276      	negs	r6, r6
  4044d4:	9207      	str	r2, [sp, #28]
  4044d6:	f043 0304 	orr.w	r3, r3, #4
  4044da:	f898 2000 	ldrb.w	r2, [r8]
  4044de:	e74f      	b.n	404380 <_vfiprintf_r+0xe4>
  4044e0:	9608      	str	r6, [sp, #32]
  4044e2:	069e      	lsls	r6, r3, #26
  4044e4:	f100 8450 	bmi.w	404d88 <_vfiprintf_r+0xaec>
  4044e8:	9907      	ldr	r1, [sp, #28]
  4044ea:	06dd      	lsls	r5, r3, #27
  4044ec:	460a      	mov	r2, r1
  4044ee:	f100 83ef 	bmi.w	404cd0 <_vfiprintf_r+0xa34>
  4044f2:	0658      	lsls	r0, r3, #25
  4044f4:	f140 83ec 	bpl.w	404cd0 <_vfiprintf_r+0xa34>
  4044f8:	880e      	ldrh	r6, [r1, #0]
  4044fa:	3104      	adds	r1, #4
  4044fc:	2700      	movs	r7, #0
  4044fe:	2201      	movs	r2, #1
  404500:	9107      	str	r1, [sp, #28]
  404502:	f04f 0100 	mov.w	r1, #0
  404506:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40450a:	2500      	movs	r5, #0
  40450c:	1c61      	adds	r1, r4, #1
  40450e:	f000 8116 	beq.w	40473e <_vfiprintf_r+0x4a2>
  404512:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404516:	9102      	str	r1, [sp, #8]
  404518:	ea56 0107 	orrs.w	r1, r6, r7
  40451c:	f040 8114 	bne.w	404748 <_vfiprintf_r+0x4ac>
  404520:	2c00      	cmp	r4, #0
  404522:	f040 835c 	bne.w	404bde <_vfiprintf_r+0x942>
  404526:	2a00      	cmp	r2, #0
  404528:	f040 83b7 	bne.w	404c9a <_vfiprintf_r+0x9fe>
  40452c:	f013 0301 	ands.w	r3, r3, #1
  404530:	9305      	str	r3, [sp, #20]
  404532:	f000 8457 	beq.w	404de4 <_vfiprintf_r+0xb48>
  404536:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40453a:	2330      	movs	r3, #48	; 0x30
  40453c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404540:	9b05      	ldr	r3, [sp, #20]
  404542:	42a3      	cmp	r3, r4
  404544:	bfb8      	it	lt
  404546:	4623      	movlt	r3, r4
  404548:	9301      	str	r3, [sp, #4]
  40454a:	b10d      	cbz	r5, 404550 <_vfiprintf_r+0x2b4>
  40454c:	3301      	adds	r3, #1
  40454e:	9301      	str	r3, [sp, #4]
  404550:	9b02      	ldr	r3, [sp, #8]
  404552:	f013 0302 	ands.w	r3, r3, #2
  404556:	9309      	str	r3, [sp, #36]	; 0x24
  404558:	d002      	beq.n	404560 <_vfiprintf_r+0x2c4>
  40455a:	9b01      	ldr	r3, [sp, #4]
  40455c:	3302      	adds	r3, #2
  40455e:	9301      	str	r3, [sp, #4]
  404560:	9b02      	ldr	r3, [sp, #8]
  404562:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404566:	930a      	str	r3, [sp, #40]	; 0x28
  404568:	f040 8217 	bne.w	40499a <_vfiprintf_r+0x6fe>
  40456c:	9b08      	ldr	r3, [sp, #32]
  40456e:	9a01      	ldr	r2, [sp, #4]
  404570:	1a9d      	subs	r5, r3, r2
  404572:	2d00      	cmp	r5, #0
  404574:	f340 8211 	ble.w	40499a <_vfiprintf_r+0x6fe>
  404578:	2d10      	cmp	r5, #16
  40457a:	f340 8490 	ble.w	404e9e <_vfiprintf_r+0xc02>
  40457e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404580:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404582:	4ec4      	ldr	r6, [pc, #784]	; (404894 <_vfiprintf_r+0x5f8>)
  404584:	46d6      	mov	lr, sl
  404586:	2710      	movs	r7, #16
  404588:	46a2      	mov	sl, r4
  40458a:	4619      	mov	r1, r3
  40458c:	9c06      	ldr	r4, [sp, #24]
  40458e:	e007      	b.n	4045a0 <_vfiprintf_r+0x304>
  404590:	f101 0c02 	add.w	ip, r1, #2
  404594:	f10e 0e08 	add.w	lr, lr, #8
  404598:	4601      	mov	r1, r0
  40459a:	3d10      	subs	r5, #16
  40459c:	2d10      	cmp	r5, #16
  40459e:	dd11      	ble.n	4045c4 <_vfiprintf_r+0x328>
  4045a0:	1c48      	adds	r0, r1, #1
  4045a2:	3210      	adds	r2, #16
  4045a4:	2807      	cmp	r0, #7
  4045a6:	9211      	str	r2, [sp, #68]	; 0x44
  4045a8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4045ac:	9010      	str	r0, [sp, #64]	; 0x40
  4045ae:	ddef      	ble.n	404590 <_vfiprintf_r+0x2f4>
  4045b0:	2a00      	cmp	r2, #0
  4045b2:	f040 81e4 	bne.w	40497e <_vfiprintf_r+0x6e2>
  4045b6:	3d10      	subs	r5, #16
  4045b8:	2d10      	cmp	r5, #16
  4045ba:	4611      	mov	r1, r2
  4045bc:	f04f 0c01 	mov.w	ip, #1
  4045c0:	46ce      	mov	lr, r9
  4045c2:	dced      	bgt.n	4045a0 <_vfiprintf_r+0x304>
  4045c4:	4654      	mov	r4, sl
  4045c6:	4661      	mov	r1, ip
  4045c8:	46f2      	mov	sl, lr
  4045ca:	442a      	add	r2, r5
  4045cc:	2907      	cmp	r1, #7
  4045ce:	9211      	str	r2, [sp, #68]	; 0x44
  4045d0:	f8ca 6000 	str.w	r6, [sl]
  4045d4:	f8ca 5004 	str.w	r5, [sl, #4]
  4045d8:	9110      	str	r1, [sp, #64]	; 0x40
  4045da:	f300 82ec 	bgt.w	404bb6 <_vfiprintf_r+0x91a>
  4045de:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4045e2:	f10a 0a08 	add.w	sl, sl, #8
  4045e6:	1c48      	adds	r0, r1, #1
  4045e8:	2d00      	cmp	r5, #0
  4045ea:	f040 81de 	bne.w	4049aa <_vfiprintf_r+0x70e>
  4045ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4045f0:	2b00      	cmp	r3, #0
  4045f2:	f000 81f8 	beq.w	4049e6 <_vfiprintf_r+0x74a>
  4045f6:	3202      	adds	r2, #2
  4045f8:	a90e      	add	r1, sp, #56	; 0x38
  4045fa:	2302      	movs	r3, #2
  4045fc:	2807      	cmp	r0, #7
  4045fe:	9211      	str	r2, [sp, #68]	; 0x44
  404600:	9010      	str	r0, [sp, #64]	; 0x40
  404602:	e88a 000a 	stmia.w	sl, {r1, r3}
  404606:	f340 81ea 	ble.w	4049de <_vfiprintf_r+0x742>
  40460a:	2a00      	cmp	r2, #0
  40460c:	f040 838c 	bne.w	404d28 <_vfiprintf_r+0xa8c>
  404610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404612:	2b80      	cmp	r3, #128	; 0x80
  404614:	f04f 0001 	mov.w	r0, #1
  404618:	4611      	mov	r1, r2
  40461a:	46ca      	mov	sl, r9
  40461c:	f040 81e7 	bne.w	4049ee <_vfiprintf_r+0x752>
  404620:	9b08      	ldr	r3, [sp, #32]
  404622:	9d01      	ldr	r5, [sp, #4]
  404624:	1b5e      	subs	r6, r3, r5
  404626:	2e00      	cmp	r6, #0
  404628:	f340 81e1 	ble.w	4049ee <_vfiprintf_r+0x752>
  40462c:	2e10      	cmp	r6, #16
  40462e:	4d9a      	ldr	r5, [pc, #616]	; (404898 <_vfiprintf_r+0x5fc>)
  404630:	f340 8450 	ble.w	404ed4 <_vfiprintf_r+0xc38>
  404634:	46d4      	mov	ip, sl
  404636:	2710      	movs	r7, #16
  404638:	46a2      	mov	sl, r4
  40463a:	9c06      	ldr	r4, [sp, #24]
  40463c:	e007      	b.n	40464e <_vfiprintf_r+0x3b2>
  40463e:	f101 0e02 	add.w	lr, r1, #2
  404642:	f10c 0c08 	add.w	ip, ip, #8
  404646:	4601      	mov	r1, r0
  404648:	3e10      	subs	r6, #16
  40464a:	2e10      	cmp	r6, #16
  40464c:	dd11      	ble.n	404672 <_vfiprintf_r+0x3d6>
  40464e:	1c48      	adds	r0, r1, #1
  404650:	3210      	adds	r2, #16
  404652:	2807      	cmp	r0, #7
  404654:	9211      	str	r2, [sp, #68]	; 0x44
  404656:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40465a:	9010      	str	r0, [sp, #64]	; 0x40
  40465c:	ddef      	ble.n	40463e <_vfiprintf_r+0x3a2>
  40465e:	2a00      	cmp	r2, #0
  404660:	f040 829d 	bne.w	404b9e <_vfiprintf_r+0x902>
  404664:	3e10      	subs	r6, #16
  404666:	2e10      	cmp	r6, #16
  404668:	f04f 0e01 	mov.w	lr, #1
  40466c:	4611      	mov	r1, r2
  40466e:	46cc      	mov	ip, r9
  404670:	dced      	bgt.n	40464e <_vfiprintf_r+0x3b2>
  404672:	4654      	mov	r4, sl
  404674:	46e2      	mov	sl, ip
  404676:	4432      	add	r2, r6
  404678:	f1be 0f07 	cmp.w	lr, #7
  40467c:	9211      	str	r2, [sp, #68]	; 0x44
  40467e:	e88a 0060 	stmia.w	sl, {r5, r6}
  404682:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  404686:	f300 8369 	bgt.w	404d5c <_vfiprintf_r+0xac0>
  40468a:	f10a 0a08 	add.w	sl, sl, #8
  40468e:	f10e 0001 	add.w	r0, lr, #1
  404692:	4671      	mov	r1, lr
  404694:	e1ab      	b.n	4049ee <_vfiprintf_r+0x752>
  404696:	9608      	str	r6, [sp, #32]
  404698:	f013 0220 	ands.w	r2, r3, #32
  40469c:	f040 838c 	bne.w	404db8 <_vfiprintf_r+0xb1c>
  4046a0:	f013 0110 	ands.w	r1, r3, #16
  4046a4:	f040 831a 	bne.w	404cdc <_vfiprintf_r+0xa40>
  4046a8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4046ac:	f000 8316 	beq.w	404cdc <_vfiprintf_r+0xa40>
  4046b0:	9807      	ldr	r0, [sp, #28]
  4046b2:	460a      	mov	r2, r1
  4046b4:	4601      	mov	r1, r0
  4046b6:	3104      	adds	r1, #4
  4046b8:	8806      	ldrh	r6, [r0, #0]
  4046ba:	9107      	str	r1, [sp, #28]
  4046bc:	2700      	movs	r7, #0
  4046be:	e720      	b.n	404502 <_vfiprintf_r+0x266>
  4046c0:	9608      	str	r6, [sp, #32]
  4046c2:	f043 0310 	orr.w	r3, r3, #16
  4046c6:	e7e7      	b.n	404698 <_vfiprintf_r+0x3fc>
  4046c8:	9608      	str	r6, [sp, #32]
  4046ca:	f043 0310 	orr.w	r3, r3, #16
  4046ce:	e708      	b.n	4044e2 <_vfiprintf_r+0x246>
  4046d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4046d4:	f898 2000 	ldrb.w	r2, [r8]
  4046d8:	e652      	b.n	404380 <_vfiprintf_r+0xe4>
  4046da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4046de:	2600      	movs	r6, #0
  4046e0:	f818 2b01 	ldrb.w	r2, [r8], #1
  4046e4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4046e8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4046ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4046f0:	2909      	cmp	r1, #9
  4046f2:	d9f5      	bls.n	4046e0 <_vfiprintf_r+0x444>
  4046f4:	e646      	b.n	404384 <_vfiprintf_r+0xe8>
  4046f6:	9608      	str	r6, [sp, #32]
  4046f8:	2800      	cmp	r0, #0
  4046fa:	f040 8408 	bne.w	404f0e <_vfiprintf_r+0xc72>
  4046fe:	f043 0310 	orr.w	r3, r3, #16
  404702:	069e      	lsls	r6, r3, #26
  404704:	f100 834c 	bmi.w	404da0 <_vfiprintf_r+0xb04>
  404708:	06dd      	lsls	r5, r3, #27
  40470a:	f100 82f3 	bmi.w	404cf4 <_vfiprintf_r+0xa58>
  40470e:	0658      	lsls	r0, r3, #25
  404710:	f140 82f0 	bpl.w	404cf4 <_vfiprintf_r+0xa58>
  404714:	9d07      	ldr	r5, [sp, #28]
  404716:	f9b5 6000 	ldrsh.w	r6, [r5]
  40471a:	462a      	mov	r2, r5
  40471c:	17f7      	asrs	r7, r6, #31
  40471e:	3204      	adds	r2, #4
  404720:	4630      	mov	r0, r6
  404722:	4639      	mov	r1, r7
  404724:	9207      	str	r2, [sp, #28]
  404726:	2800      	cmp	r0, #0
  404728:	f171 0200 	sbcs.w	r2, r1, #0
  40472c:	f2c0 835d 	blt.w	404dea <_vfiprintf_r+0xb4e>
  404730:	1c61      	adds	r1, r4, #1
  404732:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404736:	f04f 0201 	mov.w	r2, #1
  40473a:	f47f aeea 	bne.w	404512 <_vfiprintf_r+0x276>
  40473e:	ea56 0107 	orrs.w	r1, r6, r7
  404742:	f000 824d 	beq.w	404be0 <_vfiprintf_r+0x944>
  404746:	9302      	str	r3, [sp, #8]
  404748:	2a01      	cmp	r2, #1
  40474a:	f000 828c 	beq.w	404c66 <_vfiprintf_r+0x9ca>
  40474e:	2a02      	cmp	r2, #2
  404750:	f040 825c 	bne.w	404c0c <_vfiprintf_r+0x970>
  404754:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404756:	46cb      	mov	fp, r9
  404758:	0933      	lsrs	r3, r6, #4
  40475a:	f006 010f 	and.w	r1, r6, #15
  40475e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  404762:	093a      	lsrs	r2, r7, #4
  404764:	461e      	mov	r6, r3
  404766:	4617      	mov	r7, r2
  404768:	5c43      	ldrb	r3, [r0, r1]
  40476a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40476e:	ea56 0307 	orrs.w	r3, r6, r7
  404772:	d1f1      	bne.n	404758 <_vfiprintf_r+0x4bc>
  404774:	eba9 030b 	sub.w	r3, r9, fp
  404778:	9305      	str	r3, [sp, #20]
  40477a:	e6e1      	b.n	404540 <_vfiprintf_r+0x2a4>
  40477c:	2800      	cmp	r0, #0
  40477e:	f040 83c0 	bne.w	404f02 <_vfiprintf_r+0xc66>
  404782:	0699      	lsls	r1, r3, #26
  404784:	f100 8367 	bmi.w	404e56 <_vfiprintf_r+0xbba>
  404788:	06da      	lsls	r2, r3, #27
  40478a:	f100 80f1 	bmi.w	404970 <_vfiprintf_r+0x6d4>
  40478e:	065b      	lsls	r3, r3, #25
  404790:	f140 80ee 	bpl.w	404970 <_vfiprintf_r+0x6d4>
  404794:	9a07      	ldr	r2, [sp, #28]
  404796:	6813      	ldr	r3, [r2, #0]
  404798:	3204      	adds	r2, #4
  40479a:	9207      	str	r2, [sp, #28]
  40479c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4047a0:	801a      	strh	r2, [r3, #0]
  4047a2:	e5b8      	b.n	404316 <_vfiprintf_r+0x7a>
  4047a4:	9807      	ldr	r0, [sp, #28]
  4047a6:	4a3d      	ldr	r2, [pc, #244]	; (40489c <_vfiprintf_r+0x600>)
  4047a8:	9608      	str	r6, [sp, #32]
  4047aa:	920b      	str	r2, [sp, #44]	; 0x2c
  4047ac:	6806      	ldr	r6, [r0, #0]
  4047ae:	2278      	movs	r2, #120	; 0x78
  4047b0:	2130      	movs	r1, #48	; 0x30
  4047b2:	3004      	adds	r0, #4
  4047b4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4047b8:	f043 0302 	orr.w	r3, r3, #2
  4047bc:	9007      	str	r0, [sp, #28]
  4047be:	2700      	movs	r7, #0
  4047c0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4047c4:	2202      	movs	r2, #2
  4047c6:	e69c      	b.n	404502 <_vfiprintf_r+0x266>
  4047c8:	9608      	str	r6, [sp, #32]
  4047ca:	2800      	cmp	r0, #0
  4047cc:	d099      	beq.n	404702 <_vfiprintf_r+0x466>
  4047ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4047d2:	e796      	b.n	404702 <_vfiprintf_r+0x466>
  4047d4:	f898 2000 	ldrb.w	r2, [r8]
  4047d8:	2d00      	cmp	r5, #0
  4047da:	f47f add1 	bne.w	404380 <_vfiprintf_r+0xe4>
  4047de:	2001      	movs	r0, #1
  4047e0:	2520      	movs	r5, #32
  4047e2:	e5cd      	b.n	404380 <_vfiprintf_r+0xe4>
  4047e4:	f043 0301 	orr.w	r3, r3, #1
  4047e8:	f898 2000 	ldrb.w	r2, [r8]
  4047ec:	e5c8      	b.n	404380 <_vfiprintf_r+0xe4>
  4047ee:	9608      	str	r6, [sp, #32]
  4047f0:	2800      	cmp	r0, #0
  4047f2:	f040 8393 	bne.w	404f1c <_vfiprintf_r+0xc80>
  4047f6:	4929      	ldr	r1, [pc, #164]	; (40489c <_vfiprintf_r+0x600>)
  4047f8:	910b      	str	r1, [sp, #44]	; 0x2c
  4047fa:	069f      	lsls	r7, r3, #26
  4047fc:	f100 82e8 	bmi.w	404dd0 <_vfiprintf_r+0xb34>
  404800:	9807      	ldr	r0, [sp, #28]
  404802:	06de      	lsls	r6, r3, #27
  404804:	4601      	mov	r1, r0
  404806:	f100 8270 	bmi.w	404cea <_vfiprintf_r+0xa4e>
  40480a:	065d      	lsls	r5, r3, #25
  40480c:	f140 826d 	bpl.w	404cea <_vfiprintf_r+0xa4e>
  404810:	3104      	adds	r1, #4
  404812:	8806      	ldrh	r6, [r0, #0]
  404814:	9107      	str	r1, [sp, #28]
  404816:	2700      	movs	r7, #0
  404818:	07d8      	lsls	r0, r3, #31
  40481a:	f140 8222 	bpl.w	404c62 <_vfiprintf_r+0x9c6>
  40481e:	ea56 0107 	orrs.w	r1, r6, r7
  404822:	f000 821e 	beq.w	404c62 <_vfiprintf_r+0x9c6>
  404826:	2130      	movs	r1, #48	; 0x30
  404828:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40482c:	f043 0302 	orr.w	r3, r3, #2
  404830:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404834:	2202      	movs	r2, #2
  404836:	e664      	b.n	404502 <_vfiprintf_r+0x266>
  404838:	9608      	str	r6, [sp, #32]
  40483a:	2800      	cmp	r0, #0
  40483c:	f040 836b 	bne.w	404f16 <_vfiprintf_r+0xc7a>
  404840:	4917      	ldr	r1, [pc, #92]	; (4048a0 <_vfiprintf_r+0x604>)
  404842:	910b      	str	r1, [sp, #44]	; 0x2c
  404844:	e7d9      	b.n	4047fa <_vfiprintf_r+0x55e>
  404846:	9907      	ldr	r1, [sp, #28]
  404848:	9608      	str	r6, [sp, #32]
  40484a:	680a      	ldr	r2, [r1, #0]
  40484c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404850:	f04f 0000 	mov.w	r0, #0
  404854:	460a      	mov	r2, r1
  404856:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40485a:	3204      	adds	r2, #4
  40485c:	2001      	movs	r0, #1
  40485e:	9001      	str	r0, [sp, #4]
  404860:	9207      	str	r2, [sp, #28]
  404862:	9005      	str	r0, [sp, #20]
  404864:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404868:	9302      	str	r3, [sp, #8]
  40486a:	2400      	movs	r4, #0
  40486c:	e670      	b.n	404550 <_vfiprintf_r+0x2b4>
  40486e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404872:	f898 2000 	ldrb.w	r2, [r8]
  404876:	e583      	b.n	404380 <_vfiprintf_r+0xe4>
  404878:	f898 2000 	ldrb.w	r2, [r8]
  40487c:	2a6c      	cmp	r2, #108	; 0x6c
  40487e:	bf03      	ittte	eq
  404880:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  404884:	f043 0320 	orreq.w	r3, r3, #32
  404888:	f108 0801 	addeq.w	r8, r8, #1
  40488c:	f043 0310 	orrne.w	r3, r3, #16
  404890:	e576      	b.n	404380 <_vfiprintf_r+0xe4>
  404892:	bf00      	nop
  404894:	00406570 	.word	0x00406570
  404898:	00406580 	.word	0x00406580
  40489c:	00406554 	.word	0x00406554
  4048a0:	00406540 	.word	0x00406540
  4048a4:	9907      	ldr	r1, [sp, #28]
  4048a6:	680e      	ldr	r6, [r1, #0]
  4048a8:	460a      	mov	r2, r1
  4048aa:	2e00      	cmp	r6, #0
  4048ac:	f102 0204 	add.w	r2, r2, #4
  4048b0:	f6ff ae0f 	blt.w	4044d2 <_vfiprintf_r+0x236>
  4048b4:	9207      	str	r2, [sp, #28]
  4048b6:	f898 2000 	ldrb.w	r2, [r8]
  4048ba:	e561      	b.n	404380 <_vfiprintf_r+0xe4>
  4048bc:	f898 2000 	ldrb.w	r2, [r8]
  4048c0:	2001      	movs	r0, #1
  4048c2:	252b      	movs	r5, #43	; 0x2b
  4048c4:	e55c      	b.n	404380 <_vfiprintf_r+0xe4>
  4048c6:	9907      	ldr	r1, [sp, #28]
  4048c8:	9608      	str	r6, [sp, #32]
  4048ca:	f8d1 b000 	ldr.w	fp, [r1]
  4048ce:	f04f 0200 	mov.w	r2, #0
  4048d2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4048d6:	1d0e      	adds	r6, r1, #4
  4048d8:	f1bb 0f00 	cmp.w	fp, #0
  4048dc:	f000 82e5 	beq.w	404eaa <_vfiprintf_r+0xc0e>
  4048e0:	1c67      	adds	r7, r4, #1
  4048e2:	f000 82c4 	beq.w	404e6e <_vfiprintf_r+0xbd2>
  4048e6:	4622      	mov	r2, r4
  4048e8:	2100      	movs	r1, #0
  4048ea:	4658      	mov	r0, fp
  4048ec:	9301      	str	r3, [sp, #4]
  4048ee:	f001 f91f 	bl	405b30 <memchr>
  4048f2:	9b01      	ldr	r3, [sp, #4]
  4048f4:	2800      	cmp	r0, #0
  4048f6:	f000 82e5 	beq.w	404ec4 <_vfiprintf_r+0xc28>
  4048fa:	eba0 020b 	sub.w	r2, r0, fp
  4048fe:	9205      	str	r2, [sp, #20]
  404900:	9607      	str	r6, [sp, #28]
  404902:	9302      	str	r3, [sp, #8]
  404904:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404908:	2400      	movs	r4, #0
  40490a:	e619      	b.n	404540 <_vfiprintf_r+0x2a4>
  40490c:	f898 2000 	ldrb.w	r2, [r8]
  404910:	2a2a      	cmp	r2, #42	; 0x2a
  404912:	f108 0701 	add.w	r7, r8, #1
  404916:	f000 82e9 	beq.w	404eec <_vfiprintf_r+0xc50>
  40491a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40491e:	2909      	cmp	r1, #9
  404920:	46b8      	mov	r8, r7
  404922:	f04f 0400 	mov.w	r4, #0
  404926:	f63f ad2d 	bhi.w	404384 <_vfiprintf_r+0xe8>
  40492a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40492e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404932:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  404936:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40493a:	2909      	cmp	r1, #9
  40493c:	d9f5      	bls.n	40492a <_vfiprintf_r+0x68e>
  40493e:	e521      	b.n	404384 <_vfiprintf_r+0xe8>
  404940:	f043 0320 	orr.w	r3, r3, #32
  404944:	f898 2000 	ldrb.w	r2, [r8]
  404948:	e51a      	b.n	404380 <_vfiprintf_r+0xe4>
  40494a:	9608      	str	r6, [sp, #32]
  40494c:	2800      	cmp	r0, #0
  40494e:	f040 82db 	bne.w	404f08 <_vfiprintf_r+0xc6c>
  404952:	2a00      	cmp	r2, #0
  404954:	f000 80e7 	beq.w	404b26 <_vfiprintf_r+0x88a>
  404958:	2101      	movs	r1, #1
  40495a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40495e:	f04f 0200 	mov.w	r2, #0
  404962:	9101      	str	r1, [sp, #4]
  404964:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404968:	9105      	str	r1, [sp, #20]
  40496a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40496e:	e77b      	b.n	404868 <_vfiprintf_r+0x5cc>
  404970:	9a07      	ldr	r2, [sp, #28]
  404972:	6813      	ldr	r3, [r2, #0]
  404974:	3204      	adds	r2, #4
  404976:	9207      	str	r2, [sp, #28]
  404978:	9a03      	ldr	r2, [sp, #12]
  40497a:	601a      	str	r2, [r3, #0]
  40497c:	e4cb      	b.n	404316 <_vfiprintf_r+0x7a>
  40497e:	aa0f      	add	r2, sp, #60	; 0x3c
  404980:	9904      	ldr	r1, [sp, #16]
  404982:	4620      	mov	r0, r4
  404984:	f7ff fc4a 	bl	40421c <__sprint_r.part.0>
  404988:	2800      	cmp	r0, #0
  40498a:	f040 8139 	bne.w	404c00 <_vfiprintf_r+0x964>
  40498e:	9910      	ldr	r1, [sp, #64]	; 0x40
  404990:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404992:	f101 0c01 	add.w	ip, r1, #1
  404996:	46ce      	mov	lr, r9
  404998:	e5ff      	b.n	40459a <_vfiprintf_r+0x2fe>
  40499a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40499c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40499e:	1c48      	adds	r0, r1, #1
  4049a0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4049a4:	2d00      	cmp	r5, #0
  4049a6:	f43f ae22 	beq.w	4045ee <_vfiprintf_r+0x352>
  4049aa:	3201      	adds	r2, #1
  4049ac:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4049b0:	2101      	movs	r1, #1
  4049b2:	2807      	cmp	r0, #7
  4049b4:	9211      	str	r2, [sp, #68]	; 0x44
  4049b6:	9010      	str	r0, [sp, #64]	; 0x40
  4049b8:	f8ca 5000 	str.w	r5, [sl]
  4049bc:	f8ca 1004 	str.w	r1, [sl, #4]
  4049c0:	f340 8108 	ble.w	404bd4 <_vfiprintf_r+0x938>
  4049c4:	2a00      	cmp	r2, #0
  4049c6:	f040 81bc 	bne.w	404d42 <_vfiprintf_r+0xaa6>
  4049ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4049cc:	2b00      	cmp	r3, #0
  4049ce:	f43f ae1f 	beq.w	404610 <_vfiprintf_r+0x374>
  4049d2:	ab0e      	add	r3, sp, #56	; 0x38
  4049d4:	2202      	movs	r2, #2
  4049d6:	4608      	mov	r0, r1
  4049d8:	931c      	str	r3, [sp, #112]	; 0x70
  4049da:	921d      	str	r2, [sp, #116]	; 0x74
  4049dc:	46ca      	mov	sl, r9
  4049de:	4601      	mov	r1, r0
  4049e0:	f10a 0a08 	add.w	sl, sl, #8
  4049e4:	3001      	adds	r0, #1
  4049e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4049e8:	2b80      	cmp	r3, #128	; 0x80
  4049ea:	f43f ae19 	beq.w	404620 <_vfiprintf_r+0x384>
  4049ee:	9b05      	ldr	r3, [sp, #20]
  4049f0:	1ae4      	subs	r4, r4, r3
  4049f2:	2c00      	cmp	r4, #0
  4049f4:	dd2e      	ble.n	404a54 <_vfiprintf_r+0x7b8>
  4049f6:	2c10      	cmp	r4, #16
  4049f8:	4db3      	ldr	r5, [pc, #716]	; (404cc8 <_vfiprintf_r+0xa2c>)
  4049fa:	dd1e      	ble.n	404a3a <_vfiprintf_r+0x79e>
  4049fc:	46d6      	mov	lr, sl
  4049fe:	2610      	movs	r6, #16
  404a00:	9f06      	ldr	r7, [sp, #24]
  404a02:	f8dd a010 	ldr.w	sl, [sp, #16]
  404a06:	e006      	b.n	404a16 <_vfiprintf_r+0x77a>
  404a08:	1c88      	adds	r0, r1, #2
  404a0a:	f10e 0e08 	add.w	lr, lr, #8
  404a0e:	4619      	mov	r1, r3
  404a10:	3c10      	subs	r4, #16
  404a12:	2c10      	cmp	r4, #16
  404a14:	dd10      	ble.n	404a38 <_vfiprintf_r+0x79c>
  404a16:	1c4b      	adds	r3, r1, #1
  404a18:	3210      	adds	r2, #16
  404a1a:	2b07      	cmp	r3, #7
  404a1c:	9211      	str	r2, [sp, #68]	; 0x44
  404a1e:	e88e 0060 	stmia.w	lr, {r5, r6}
  404a22:	9310      	str	r3, [sp, #64]	; 0x40
  404a24:	ddf0      	ble.n	404a08 <_vfiprintf_r+0x76c>
  404a26:	2a00      	cmp	r2, #0
  404a28:	d165      	bne.n	404af6 <_vfiprintf_r+0x85a>
  404a2a:	3c10      	subs	r4, #16
  404a2c:	2c10      	cmp	r4, #16
  404a2e:	f04f 0001 	mov.w	r0, #1
  404a32:	4611      	mov	r1, r2
  404a34:	46ce      	mov	lr, r9
  404a36:	dcee      	bgt.n	404a16 <_vfiprintf_r+0x77a>
  404a38:	46f2      	mov	sl, lr
  404a3a:	4422      	add	r2, r4
  404a3c:	2807      	cmp	r0, #7
  404a3e:	9211      	str	r2, [sp, #68]	; 0x44
  404a40:	f8ca 5000 	str.w	r5, [sl]
  404a44:	f8ca 4004 	str.w	r4, [sl, #4]
  404a48:	9010      	str	r0, [sp, #64]	; 0x40
  404a4a:	f300 8085 	bgt.w	404b58 <_vfiprintf_r+0x8bc>
  404a4e:	f10a 0a08 	add.w	sl, sl, #8
  404a52:	3001      	adds	r0, #1
  404a54:	9905      	ldr	r1, [sp, #20]
  404a56:	f8ca b000 	str.w	fp, [sl]
  404a5a:	440a      	add	r2, r1
  404a5c:	2807      	cmp	r0, #7
  404a5e:	9211      	str	r2, [sp, #68]	; 0x44
  404a60:	f8ca 1004 	str.w	r1, [sl, #4]
  404a64:	9010      	str	r0, [sp, #64]	; 0x40
  404a66:	f340 8082 	ble.w	404b6e <_vfiprintf_r+0x8d2>
  404a6a:	2a00      	cmp	r2, #0
  404a6c:	f040 8118 	bne.w	404ca0 <_vfiprintf_r+0xa04>
  404a70:	9b02      	ldr	r3, [sp, #8]
  404a72:	9210      	str	r2, [sp, #64]	; 0x40
  404a74:	0758      	lsls	r0, r3, #29
  404a76:	d535      	bpl.n	404ae4 <_vfiprintf_r+0x848>
  404a78:	9b08      	ldr	r3, [sp, #32]
  404a7a:	9901      	ldr	r1, [sp, #4]
  404a7c:	1a5c      	subs	r4, r3, r1
  404a7e:	2c00      	cmp	r4, #0
  404a80:	f340 80e7 	ble.w	404c52 <_vfiprintf_r+0x9b6>
  404a84:	46ca      	mov	sl, r9
  404a86:	2c10      	cmp	r4, #16
  404a88:	f340 8218 	ble.w	404ebc <_vfiprintf_r+0xc20>
  404a8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  404a8e:	4e8f      	ldr	r6, [pc, #572]	; (404ccc <_vfiprintf_r+0xa30>)
  404a90:	9f06      	ldr	r7, [sp, #24]
  404a92:	f8dd b010 	ldr.w	fp, [sp, #16]
  404a96:	2510      	movs	r5, #16
  404a98:	e006      	b.n	404aa8 <_vfiprintf_r+0x80c>
  404a9a:	1c88      	adds	r0, r1, #2
  404a9c:	f10a 0a08 	add.w	sl, sl, #8
  404aa0:	4619      	mov	r1, r3
  404aa2:	3c10      	subs	r4, #16
  404aa4:	2c10      	cmp	r4, #16
  404aa6:	dd11      	ble.n	404acc <_vfiprintf_r+0x830>
  404aa8:	1c4b      	adds	r3, r1, #1
  404aaa:	3210      	adds	r2, #16
  404aac:	2b07      	cmp	r3, #7
  404aae:	9211      	str	r2, [sp, #68]	; 0x44
  404ab0:	f8ca 6000 	str.w	r6, [sl]
  404ab4:	f8ca 5004 	str.w	r5, [sl, #4]
  404ab8:	9310      	str	r3, [sp, #64]	; 0x40
  404aba:	ddee      	ble.n	404a9a <_vfiprintf_r+0x7fe>
  404abc:	bb42      	cbnz	r2, 404b10 <_vfiprintf_r+0x874>
  404abe:	3c10      	subs	r4, #16
  404ac0:	2c10      	cmp	r4, #16
  404ac2:	f04f 0001 	mov.w	r0, #1
  404ac6:	4611      	mov	r1, r2
  404ac8:	46ca      	mov	sl, r9
  404aca:	dced      	bgt.n	404aa8 <_vfiprintf_r+0x80c>
  404acc:	4422      	add	r2, r4
  404ace:	2807      	cmp	r0, #7
  404ad0:	9211      	str	r2, [sp, #68]	; 0x44
  404ad2:	f8ca 6000 	str.w	r6, [sl]
  404ad6:	f8ca 4004 	str.w	r4, [sl, #4]
  404ada:	9010      	str	r0, [sp, #64]	; 0x40
  404adc:	dd51      	ble.n	404b82 <_vfiprintf_r+0x8e6>
  404ade:	2a00      	cmp	r2, #0
  404ae0:	f040 819b 	bne.w	404e1a <_vfiprintf_r+0xb7e>
  404ae4:	9b03      	ldr	r3, [sp, #12]
  404ae6:	9a08      	ldr	r2, [sp, #32]
  404ae8:	9901      	ldr	r1, [sp, #4]
  404aea:	428a      	cmp	r2, r1
  404aec:	bfac      	ite	ge
  404aee:	189b      	addge	r3, r3, r2
  404af0:	185b      	addlt	r3, r3, r1
  404af2:	9303      	str	r3, [sp, #12]
  404af4:	e04e      	b.n	404b94 <_vfiprintf_r+0x8f8>
  404af6:	aa0f      	add	r2, sp, #60	; 0x3c
  404af8:	4651      	mov	r1, sl
  404afa:	4638      	mov	r0, r7
  404afc:	f7ff fb8e 	bl	40421c <__sprint_r.part.0>
  404b00:	2800      	cmp	r0, #0
  404b02:	f040 813f 	bne.w	404d84 <_vfiprintf_r+0xae8>
  404b06:	9910      	ldr	r1, [sp, #64]	; 0x40
  404b08:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404b0a:	1c48      	adds	r0, r1, #1
  404b0c:	46ce      	mov	lr, r9
  404b0e:	e77f      	b.n	404a10 <_vfiprintf_r+0x774>
  404b10:	aa0f      	add	r2, sp, #60	; 0x3c
  404b12:	4659      	mov	r1, fp
  404b14:	4638      	mov	r0, r7
  404b16:	f7ff fb81 	bl	40421c <__sprint_r.part.0>
  404b1a:	b960      	cbnz	r0, 404b36 <_vfiprintf_r+0x89a>
  404b1c:	9910      	ldr	r1, [sp, #64]	; 0x40
  404b1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404b20:	1c48      	adds	r0, r1, #1
  404b22:	46ca      	mov	sl, r9
  404b24:	e7bd      	b.n	404aa2 <_vfiprintf_r+0x806>
  404b26:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404b28:	f8dd b010 	ldr.w	fp, [sp, #16]
  404b2c:	2b00      	cmp	r3, #0
  404b2e:	f040 81d4 	bne.w	404eda <_vfiprintf_r+0xc3e>
  404b32:	2300      	movs	r3, #0
  404b34:	9310      	str	r3, [sp, #64]	; 0x40
  404b36:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404b3a:	f013 0f01 	tst.w	r3, #1
  404b3e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404b42:	d102      	bne.n	404b4a <_vfiprintf_r+0x8ae>
  404b44:	059a      	lsls	r2, r3, #22
  404b46:	f140 80de 	bpl.w	404d06 <_vfiprintf_r+0xa6a>
  404b4a:	065b      	lsls	r3, r3, #25
  404b4c:	f53f acb2 	bmi.w	4044b4 <_vfiprintf_r+0x218>
  404b50:	9803      	ldr	r0, [sp, #12]
  404b52:	b02d      	add	sp, #180	; 0xb4
  404b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b58:	2a00      	cmp	r2, #0
  404b5a:	f040 8106 	bne.w	404d6a <_vfiprintf_r+0xace>
  404b5e:	9a05      	ldr	r2, [sp, #20]
  404b60:	921d      	str	r2, [sp, #116]	; 0x74
  404b62:	2301      	movs	r3, #1
  404b64:	9211      	str	r2, [sp, #68]	; 0x44
  404b66:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  404b6a:	9310      	str	r3, [sp, #64]	; 0x40
  404b6c:	46ca      	mov	sl, r9
  404b6e:	f10a 0a08 	add.w	sl, sl, #8
  404b72:	9b02      	ldr	r3, [sp, #8]
  404b74:	0759      	lsls	r1, r3, #29
  404b76:	d504      	bpl.n	404b82 <_vfiprintf_r+0x8e6>
  404b78:	9b08      	ldr	r3, [sp, #32]
  404b7a:	9901      	ldr	r1, [sp, #4]
  404b7c:	1a5c      	subs	r4, r3, r1
  404b7e:	2c00      	cmp	r4, #0
  404b80:	dc81      	bgt.n	404a86 <_vfiprintf_r+0x7ea>
  404b82:	9b03      	ldr	r3, [sp, #12]
  404b84:	9908      	ldr	r1, [sp, #32]
  404b86:	9801      	ldr	r0, [sp, #4]
  404b88:	4281      	cmp	r1, r0
  404b8a:	bfac      	ite	ge
  404b8c:	185b      	addge	r3, r3, r1
  404b8e:	181b      	addlt	r3, r3, r0
  404b90:	9303      	str	r3, [sp, #12]
  404b92:	bb72      	cbnz	r2, 404bf2 <_vfiprintf_r+0x956>
  404b94:	2300      	movs	r3, #0
  404b96:	9310      	str	r3, [sp, #64]	; 0x40
  404b98:	46ca      	mov	sl, r9
  404b9a:	f7ff bbbc 	b.w	404316 <_vfiprintf_r+0x7a>
  404b9e:	aa0f      	add	r2, sp, #60	; 0x3c
  404ba0:	9904      	ldr	r1, [sp, #16]
  404ba2:	4620      	mov	r0, r4
  404ba4:	f7ff fb3a 	bl	40421c <__sprint_r.part.0>
  404ba8:	bb50      	cbnz	r0, 404c00 <_vfiprintf_r+0x964>
  404baa:	9910      	ldr	r1, [sp, #64]	; 0x40
  404bac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404bae:	f101 0e01 	add.w	lr, r1, #1
  404bb2:	46cc      	mov	ip, r9
  404bb4:	e548      	b.n	404648 <_vfiprintf_r+0x3ac>
  404bb6:	2a00      	cmp	r2, #0
  404bb8:	f040 8140 	bne.w	404e3c <_vfiprintf_r+0xba0>
  404bbc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  404bc0:	2900      	cmp	r1, #0
  404bc2:	f000 811b 	beq.w	404dfc <_vfiprintf_r+0xb60>
  404bc6:	2201      	movs	r2, #1
  404bc8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  404bcc:	4610      	mov	r0, r2
  404bce:	921d      	str	r2, [sp, #116]	; 0x74
  404bd0:	911c      	str	r1, [sp, #112]	; 0x70
  404bd2:	46ca      	mov	sl, r9
  404bd4:	4601      	mov	r1, r0
  404bd6:	f10a 0a08 	add.w	sl, sl, #8
  404bda:	3001      	adds	r0, #1
  404bdc:	e507      	b.n	4045ee <_vfiprintf_r+0x352>
  404bde:	9b02      	ldr	r3, [sp, #8]
  404be0:	2a01      	cmp	r2, #1
  404be2:	f000 8098 	beq.w	404d16 <_vfiprintf_r+0xa7a>
  404be6:	2a02      	cmp	r2, #2
  404be8:	d10d      	bne.n	404c06 <_vfiprintf_r+0x96a>
  404bea:	9302      	str	r3, [sp, #8]
  404bec:	2600      	movs	r6, #0
  404bee:	2700      	movs	r7, #0
  404bf0:	e5b0      	b.n	404754 <_vfiprintf_r+0x4b8>
  404bf2:	aa0f      	add	r2, sp, #60	; 0x3c
  404bf4:	9904      	ldr	r1, [sp, #16]
  404bf6:	9806      	ldr	r0, [sp, #24]
  404bf8:	f7ff fb10 	bl	40421c <__sprint_r.part.0>
  404bfc:	2800      	cmp	r0, #0
  404bfe:	d0c9      	beq.n	404b94 <_vfiprintf_r+0x8f8>
  404c00:	f8dd b010 	ldr.w	fp, [sp, #16]
  404c04:	e797      	b.n	404b36 <_vfiprintf_r+0x89a>
  404c06:	9302      	str	r3, [sp, #8]
  404c08:	2600      	movs	r6, #0
  404c0a:	2700      	movs	r7, #0
  404c0c:	4649      	mov	r1, r9
  404c0e:	e000      	b.n	404c12 <_vfiprintf_r+0x976>
  404c10:	4659      	mov	r1, fp
  404c12:	08f2      	lsrs	r2, r6, #3
  404c14:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  404c18:	08f8      	lsrs	r0, r7, #3
  404c1a:	f006 0307 	and.w	r3, r6, #7
  404c1e:	4607      	mov	r7, r0
  404c20:	4616      	mov	r6, r2
  404c22:	3330      	adds	r3, #48	; 0x30
  404c24:	ea56 0207 	orrs.w	r2, r6, r7
  404c28:	f801 3c01 	strb.w	r3, [r1, #-1]
  404c2c:	f101 3bff 	add.w	fp, r1, #4294967295
  404c30:	d1ee      	bne.n	404c10 <_vfiprintf_r+0x974>
  404c32:	9a02      	ldr	r2, [sp, #8]
  404c34:	07d6      	lsls	r6, r2, #31
  404c36:	f57f ad9d 	bpl.w	404774 <_vfiprintf_r+0x4d8>
  404c3a:	2b30      	cmp	r3, #48	; 0x30
  404c3c:	f43f ad9a 	beq.w	404774 <_vfiprintf_r+0x4d8>
  404c40:	3902      	subs	r1, #2
  404c42:	2330      	movs	r3, #48	; 0x30
  404c44:	f80b 3c01 	strb.w	r3, [fp, #-1]
  404c48:	eba9 0301 	sub.w	r3, r9, r1
  404c4c:	9305      	str	r3, [sp, #20]
  404c4e:	468b      	mov	fp, r1
  404c50:	e476      	b.n	404540 <_vfiprintf_r+0x2a4>
  404c52:	9b03      	ldr	r3, [sp, #12]
  404c54:	9a08      	ldr	r2, [sp, #32]
  404c56:	428a      	cmp	r2, r1
  404c58:	bfac      	ite	ge
  404c5a:	189b      	addge	r3, r3, r2
  404c5c:	185b      	addlt	r3, r3, r1
  404c5e:	9303      	str	r3, [sp, #12]
  404c60:	e798      	b.n	404b94 <_vfiprintf_r+0x8f8>
  404c62:	2202      	movs	r2, #2
  404c64:	e44d      	b.n	404502 <_vfiprintf_r+0x266>
  404c66:	2f00      	cmp	r7, #0
  404c68:	bf08      	it	eq
  404c6a:	2e0a      	cmpeq	r6, #10
  404c6c:	d352      	bcc.n	404d14 <_vfiprintf_r+0xa78>
  404c6e:	46cb      	mov	fp, r9
  404c70:	4630      	mov	r0, r6
  404c72:	4639      	mov	r1, r7
  404c74:	220a      	movs	r2, #10
  404c76:	2300      	movs	r3, #0
  404c78:	f7fe fbf0 	bl	40345c <__aeabi_uldivmod>
  404c7c:	3230      	adds	r2, #48	; 0x30
  404c7e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  404c82:	4630      	mov	r0, r6
  404c84:	4639      	mov	r1, r7
  404c86:	2300      	movs	r3, #0
  404c88:	220a      	movs	r2, #10
  404c8a:	f7fe fbe7 	bl	40345c <__aeabi_uldivmod>
  404c8e:	4606      	mov	r6, r0
  404c90:	460f      	mov	r7, r1
  404c92:	ea56 0307 	orrs.w	r3, r6, r7
  404c96:	d1eb      	bne.n	404c70 <_vfiprintf_r+0x9d4>
  404c98:	e56c      	b.n	404774 <_vfiprintf_r+0x4d8>
  404c9a:	9405      	str	r4, [sp, #20]
  404c9c:	46cb      	mov	fp, r9
  404c9e:	e44f      	b.n	404540 <_vfiprintf_r+0x2a4>
  404ca0:	aa0f      	add	r2, sp, #60	; 0x3c
  404ca2:	9904      	ldr	r1, [sp, #16]
  404ca4:	9806      	ldr	r0, [sp, #24]
  404ca6:	f7ff fab9 	bl	40421c <__sprint_r.part.0>
  404caa:	2800      	cmp	r0, #0
  404cac:	d1a8      	bne.n	404c00 <_vfiprintf_r+0x964>
  404cae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404cb0:	46ca      	mov	sl, r9
  404cb2:	e75e      	b.n	404b72 <_vfiprintf_r+0x8d6>
  404cb4:	aa0f      	add	r2, sp, #60	; 0x3c
  404cb6:	9904      	ldr	r1, [sp, #16]
  404cb8:	9806      	ldr	r0, [sp, #24]
  404cba:	f7ff faaf 	bl	40421c <__sprint_r.part.0>
  404cbe:	2800      	cmp	r0, #0
  404cc0:	d19e      	bne.n	404c00 <_vfiprintf_r+0x964>
  404cc2:	46ca      	mov	sl, r9
  404cc4:	f7ff bbc0 	b.w	404448 <_vfiprintf_r+0x1ac>
  404cc8:	00406580 	.word	0x00406580
  404ccc:	00406570 	.word	0x00406570
  404cd0:	3104      	adds	r1, #4
  404cd2:	6816      	ldr	r6, [r2, #0]
  404cd4:	9107      	str	r1, [sp, #28]
  404cd6:	2201      	movs	r2, #1
  404cd8:	2700      	movs	r7, #0
  404cda:	e412      	b.n	404502 <_vfiprintf_r+0x266>
  404cdc:	9807      	ldr	r0, [sp, #28]
  404cde:	4601      	mov	r1, r0
  404ce0:	3104      	adds	r1, #4
  404ce2:	6806      	ldr	r6, [r0, #0]
  404ce4:	9107      	str	r1, [sp, #28]
  404ce6:	2700      	movs	r7, #0
  404ce8:	e40b      	b.n	404502 <_vfiprintf_r+0x266>
  404cea:	680e      	ldr	r6, [r1, #0]
  404cec:	3104      	adds	r1, #4
  404cee:	9107      	str	r1, [sp, #28]
  404cf0:	2700      	movs	r7, #0
  404cf2:	e591      	b.n	404818 <_vfiprintf_r+0x57c>
  404cf4:	9907      	ldr	r1, [sp, #28]
  404cf6:	680e      	ldr	r6, [r1, #0]
  404cf8:	460a      	mov	r2, r1
  404cfa:	17f7      	asrs	r7, r6, #31
  404cfc:	3204      	adds	r2, #4
  404cfe:	9207      	str	r2, [sp, #28]
  404d00:	4630      	mov	r0, r6
  404d02:	4639      	mov	r1, r7
  404d04:	e50f      	b.n	404726 <_vfiprintf_r+0x48a>
  404d06:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404d0a:	f000 fe7f 	bl	405a0c <__retarget_lock_release_recursive>
  404d0e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404d12:	e71a      	b.n	404b4a <_vfiprintf_r+0x8ae>
  404d14:	9b02      	ldr	r3, [sp, #8]
  404d16:	9302      	str	r3, [sp, #8]
  404d18:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404d1c:	3630      	adds	r6, #48	; 0x30
  404d1e:	2301      	movs	r3, #1
  404d20:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  404d24:	9305      	str	r3, [sp, #20]
  404d26:	e40b      	b.n	404540 <_vfiprintf_r+0x2a4>
  404d28:	aa0f      	add	r2, sp, #60	; 0x3c
  404d2a:	9904      	ldr	r1, [sp, #16]
  404d2c:	9806      	ldr	r0, [sp, #24]
  404d2e:	f7ff fa75 	bl	40421c <__sprint_r.part.0>
  404d32:	2800      	cmp	r0, #0
  404d34:	f47f af64 	bne.w	404c00 <_vfiprintf_r+0x964>
  404d38:	9910      	ldr	r1, [sp, #64]	; 0x40
  404d3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404d3c:	1c48      	adds	r0, r1, #1
  404d3e:	46ca      	mov	sl, r9
  404d40:	e651      	b.n	4049e6 <_vfiprintf_r+0x74a>
  404d42:	aa0f      	add	r2, sp, #60	; 0x3c
  404d44:	9904      	ldr	r1, [sp, #16]
  404d46:	9806      	ldr	r0, [sp, #24]
  404d48:	f7ff fa68 	bl	40421c <__sprint_r.part.0>
  404d4c:	2800      	cmp	r0, #0
  404d4e:	f47f af57 	bne.w	404c00 <_vfiprintf_r+0x964>
  404d52:	9910      	ldr	r1, [sp, #64]	; 0x40
  404d54:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404d56:	1c48      	adds	r0, r1, #1
  404d58:	46ca      	mov	sl, r9
  404d5a:	e448      	b.n	4045ee <_vfiprintf_r+0x352>
  404d5c:	2a00      	cmp	r2, #0
  404d5e:	f040 8091 	bne.w	404e84 <_vfiprintf_r+0xbe8>
  404d62:	2001      	movs	r0, #1
  404d64:	4611      	mov	r1, r2
  404d66:	46ca      	mov	sl, r9
  404d68:	e641      	b.n	4049ee <_vfiprintf_r+0x752>
  404d6a:	aa0f      	add	r2, sp, #60	; 0x3c
  404d6c:	9904      	ldr	r1, [sp, #16]
  404d6e:	9806      	ldr	r0, [sp, #24]
  404d70:	f7ff fa54 	bl	40421c <__sprint_r.part.0>
  404d74:	2800      	cmp	r0, #0
  404d76:	f47f af43 	bne.w	404c00 <_vfiprintf_r+0x964>
  404d7a:	9810      	ldr	r0, [sp, #64]	; 0x40
  404d7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404d7e:	3001      	adds	r0, #1
  404d80:	46ca      	mov	sl, r9
  404d82:	e667      	b.n	404a54 <_vfiprintf_r+0x7b8>
  404d84:	46d3      	mov	fp, sl
  404d86:	e6d6      	b.n	404b36 <_vfiprintf_r+0x89a>
  404d88:	9e07      	ldr	r6, [sp, #28]
  404d8a:	3607      	adds	r6, #7
  404d8c:	f026 0207 	bic.w	r2, r6, #7
  404d90:	f102 0108 	add.w	r1, r2, #8
  404d94:	e9d2 6700 	ldrd	r6, r7, [r2]
  404d98:	9107      	str	r1, [sp, #28]
  404d9a:	2201      	movs	r2, #1
  404d9c:	f7ff bbb1 	b.w	404502 <_vfiprintf_r+0x266>
  404da0:	9e07      	ldr	r6, [sp, #28]
  404da2:	3607      	adds	r6, #7
  404da4:	f026 0607 	bic.w	r6, r6, #7
  404da8:	e9d6 0100 	ldrd	r0, r1, [r6]
  404dac:	f106 0208 	add.w	r2, r6, #8
  404db0:	9207      	str	r2, [sp, #28]
  404db2:	4606      	mov	r6, r0
  404db4:	460f      	mov	r7, r1
  404db6:	e4b6      	b.n	404726 <_vfiprintf_r+0x48a>
  404db8:	9e07      	ldr	r6, [sp, #28]
  404dba:	3607      	adds	r6, #7
  404dbc:	f026 0207 	bic.w	r2, r6, #7
  404dc0:	f102 0108 	add.w	r1, r2, #8
  404dc4:	e9d2 6700 	ldrd	r6, r7, [r2]
  404dc8:	9107      	str	r1, [sp, #28]
  404dca:	2200      	movs	r2, #0
  404dcc:	f7ff bb99 	b.w	404502 <_vfiprintf_r+0x266>
  404dd0:	9e07      	ldr	r6, [sp, #28]
  404dd2:	3607      	adds	r6, #7
  404dd4:	f026 0107 	bic.w	r1, r6, #7
  404dd8:	f101 0008 	add.w	r0, r1, #8
  404ddc:	9007      	str	r0, [sp, #28]
  404dde:	e9d1 6700 	ldrd	r6, r7, [r1]
  404de2:	e519      	b.n	404818 <_vfiprintf_r+0x57c>
  404de4:	46cb      	mov	fp, r9
  404de6:	f7ff bbab 	b.w	404540 <_vfiprintf_r+0x2a4>
  404dea:	252d      	movs	r5, #45	; 0x2d
  404dec:	4276      	negs	r6, r6
  404dee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  404df2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404df6:	2201      	movs	r2, #1
  404df8:	f7ff bb88 	b.w	40450c <_vfiprintf_r+0x270>
  404dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404dfe:	b9b3      	cbnz	r3, 404e2e <_vfiprintf_r+0xb92>
  404e00:	4611      	mov	r1, r2
  404e02:	2001      	movs	r0, #1
  404e04:	46ca      	mov	sl, r9
  404e06:	e5f2      	b.n	4049ee <_vfiprintf_r+0x752>
  404e08:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404e0c:	f000 fdfe 	bl	405a0c <__retarget_lock_release_recursive>
  404e10:	f04f 33ff 	mov.w	r3, #4294967295
  404e14:	9303      	str	r3, [sp, #12]
  404e16:	f7ff bb50 	b.w	4044ba <_vfiprintf_r+0x21e>
  404e1a:	aa0f      	add	r2, sp, #60	; 0x3c
  404e1c:	9904      	ldr	r1, [sp, #16]
  404e1e:	9806      	ldr	r0, [sp, #24]
  404e20:	f7ff f9fc 	bl	40421c <__sprint_r.part.0>
  404e24:	2800      	cmp	r0, #0
  404e26:	f47f aeeb 	bne.w	404c00 <_vfiprintf_r+0x964>
  404e2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e2c:	e6a9      	b.n	404b82 <_vfiprintf_r+0x8e6>
  404e2e:	ab0e      	add	r3, sp, #56	; 0x38
  404e30:	2202      	movs	r2, #2
  404e32:	931c      	str	r3, [sp, #112]	; 0x70
  404e34:	921d      	str	r2, [sp, #116]	; 0x74
  404e36:	2001      	movs	r0, #1
  404e38:	46ca      	mov	sl, r9
  404e3a:	e5d0      	b.n	4049de <_vfiprintf_r+0x742>
  404e3c:	aa0f      	add	r2, sp, #60	; 0x3c
  404e3e:	9904      	ldr	r1, [sp, #16]
  404e40:	9806      	ldr	r0, [sp, #24]
  404e42:	f7ff f9eb 	bl	40421c <__sprint_r.part.0>
  404e46:	2800      	cmp	r0, #0
  404e48:	f47f aeda 	bne.w	404c00 <_vfiprintf_r+0x964>
  404e4c:	9910      	ldr	r1, [sp, #64]	; 0x40
  404e4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e50:	1c48      	adds	r0, r1, #1
  404e52:	46ca      	mov	sl, r9
  404e54:	e5a4      	b.n	4049a0 <_vfiprintf_r+0x704>
  404e56:	9a07      	ldr	r2, [sp, #28]
  404e58:	9903      	ldr	r1, [sp, #12]
  404e5a:	6813      	ldr	r3, [r2, #0]
  404e5c:	17cd      	asrs	r5, r1, #31
  404e5e:	4608      	mov	r0, r1
  404e60:	3204      	adds	r2, #4
  404e62:	4629      	mov	r1, r5
  404e64:	9207      	str	r2, [sp, #28]
  404e66:	e9c3 0100 	strd	r0, r1, [r3]
  404e6a:	f7ff ba54 	b.w	404316 <_vfiprintf_r+0x7a>
  404e6e:	4658      	mov	r0, fp
  404e70:	9607      	str	r6, [sp, #28]
  404e72:	9302      	str	r3, [sp, #8]
  404e74:	f7ff f964 	bl	404140 <strlen>
  404e78:	2400      	movs	r4, #0
  404e7a:	9005      	str	r0, [sp, #20]
  404e7c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404e80:	f7ff bb5e 	b.w	404540 <_vfiprintf_r+0x2a4>
  404e84:	aa0f      	add	r2, sp, #60	; 0x3c
  404e86:	9904      	ldr	r1, [sp, #16]
  404e88:	9806      	ldr	r0, [sp, #24]
  404e8a:	f7ff f9c7 	bl	40421c <__sprint_r.part.0>
  404e8e:	2800      	cmp	r0, #0
  404e90:	f47f aeb6 	bne.w	404c00 <_vfiprintf_r+0x964>
  404e94:	9910      	ldr	r1, [sp, #64]	; 0x40
  404e96:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e98:	1c48      	adds	r0, r1, #1
  404e9a:	46ca      	mov	sl, r9
  404e9c:	e5a7      	b.n	4049ee <_vfiprintf_r+0x752>
  404e9e:	9910      	ldr	r1, [sp, #64]	; 0x40
  404ea0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ea2:	4e20      	ldr	r6, [pc, #128]	; (404f24 <_vfiprintf_r+0xc88>)
  404ea4:	3101      	adds	r1, #1
  404ea6:	f7ff bb90 	b.w	4045ca <_vfiprintf_r+0x32e>
  404eaa:	2c06      	cmp	r4, #6
  404eac:	bf28      	it	cs
  404eae:	2406      	movcs	r4, #6
  404eb0:	9405      	str	r4, [sp, #20]
  404eb2:	9607      	str	r6, [sp, #28]
  404eb4:	9401      	str	r4, [sp, #4]
  404eb6:	f8df b070 	ldr.w	fp, [pc, #112]	; 404f28 <_vfiprintf_r+0xc8c>
  404eba:	e4d5      	b.n	404868 <_vfiprintf_r+0x5cc>
  404ebc:	9810      	ldr	r0, [sp, #64]	; 0x40
  404ebe:	4e19      	ldr	r6, [pc, #100]	; (404f24 <_vfiprintf_r+0xc88>)
  404ec0:	3001      	adds	r0, #1
  404ec2:	e603      	b.n	404acc <_vfiprintf_r+0x830>
  404ec4:	9405      	str	r4, [sp, #20]
  404ec6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404eca:	9607      	str	r6, [sp, #28]
  404ecc:	9302      	str	r3, [sp, #8]
  404ece:	4604      	mov	r4, r0
  404ed0:	f7ff bb36 	b.w	404540 <_vfiprintf_r+0x2a4>
  404ed4:	4686      	mov	lr, r0
  404ed6:	f7ff bbce 	b.w	404676 <_vfiprintf_r+0x3da>
  404eda:	9806      	ldr	r0, [sp, #24]
  404edc:	aa0f      	add	r2, sp, #60	; 0x3c
  404ede:	4659      	mov	r1, fp
  404ee0:	f7ff f99c 	bl	40421c <__sprint_r.part.0>
  404ee4:	2800      	cmp	r0, #0
  404ee6:	f43f ae24 	beq.w	404b32 <_vfiprintf_r+0x896>
  404eea:	e624      	b.n	404b36 <_vfiprintf_r+0x89a>
  404eec:	9907      	ldr	r1, [sp, #28]
  404eee:	f898 2001 	ldrb.w	r2, [r8, #1]
  404ef2:	680c      	ldr	r4, [r1, #0]
  404ef4:	3104      	adds	r1, #4
  404ef6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  404efa:	46b8      	mov	r8, r7
  404efc:	9107      	str	r1, [sp, #28]
  404efe:	f7ff ba3f 	b.w	404380 <_vfiprintf_r+0xe4>
  404f02:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404f06:	e43c      	b.n	404782 <_vfiprintf_r+0x4e6>
  404f08:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404f0c:	e521      	b.n	404952 <_vfiprintf_r+0x6b6>
  404f0e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404f12:	f7ff bbf4 	b.w	4046fe <_vfiprintf_r+0x462>
  404f16:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404f1a:	e491      	b.n	404840 <_vfiprintf_r+0x5a4>
  404f1c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404f20:	e469      	b.n	4047f6 <_vfiprintf_r+0x55a>
  404f22:	bf00      	nop
  404f24:	00406570 	.word	0x00406570
  404f28:	00406568 	.word	0x00406568

00404f2c <__sbprintf>:
  404f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404f30:	460c      	mov	r4, r1
  404f32:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  404f36:	8989      	ldrh	r1, [r1, #12]
  404f38:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404f3a:	89e5      	ldrh	r5, [r4, #14]
  404f3c:	9619      	str	r6, [sp, #100]	; 0x64
  404f3e:	f021 0102 	bic.w	r1, r1, #2
  404f42:	4606      	mov	r6, r0
  404f44:	69e0      	ldr	r0, [r4, #28]
  404f46:	f8ad 100c 	strh.w	r1, [sp, #12]
  404f4a:	4617      	mov	r7, r2
  404f4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  404f50:	6a62      	ldr	r2, [r4, #36]	; 0x24
  404f52:	f8ad 500e 	strh.w	r5, [sp, #14]
  404f56:	4698      	mov	r8, r3
  404f58:	ad1a      	add	r5, sp, #104	; 0x68
  404f5a:	2300      	movs	r3, #0
  404f5c:	9007      	str	r0, [sp, #28]
  404f5e:	a816      	add	r0, sp, #88	; 0x58
  404f60:	9209      	str	r2, [sp, #36]	; 0x24
  404f62:	9306      	str	r3, [sp, #24]
  404f64:	9500      	str	r5, [sp, #0]
  404f66:	9504      	str	r5, [sp, #16]
  404f68:	9102      	str	r1, [sp, #8]
  404f6a:	9105      	str	r1, [sp, #20]
  404f6c:	f000 fd48 	bl	405a00 <__retarget_lock_init_recursive>
  404f70:	4643      	mov	r3, r8
  404f72:	463a      	mov	r2, r7
  404f74:	4669      	mov	r1, sp
  404f76:	4630      	mov	r0, r6
  404f78:	f7ff f990 	bl	40429c <_vfiprintf_r>
  404f7c:	1e05      	subs	r5, r0, #0
  404f7e:	db07      	blt.n	404f90 <__sbprintf+0x64>
  404f80:	4630      	mov	r0, r6
  404f82:	4669      	mov	r1, sp
  404f84:	f000 f928 	bl	4051d8 <_fflush_r>
  404f88:	2800      	cmp	r0, #0
  404f8a:	bf18      	it	ne
  404f8c:	f04f 35ff 	movne.w	r5, #4294967295
  404f90:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  404f94:	065b      	lsls	r3, r3, #25
  404f96:	d503      	bpl.n	404fa0 <__sbprintf+0x74>
  404f98:	89a3      	ldrh	r3, [r4, #12]
  404f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404f9e:	81a3      	strh	r3, [r4, #12]
  404fa0:	9816      	ldr	r0, [sp, #88]	; 0x58
  404fa2:	f000 fd2f 	bl	405a04 <__retarget_lock_close_recursive>
  404fa6:	4628      	mov	r0, r5
  404fa8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  404fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404fb0 <__swsetup_r>:
  404fb0:	b538      	push	{r3, r4, r5, lr}
  404fb2:	4b30      	ldr	r3, [pc, #192]	; (405074 <__swsetup_r+0xc4>)
  404fb4:	681b      	ldr	r3, [r3, #0]
  404fb6:	4605      	mov	r5, r0
  404fb8:	460c      	mov	r4, r1
  404fba:	b113      	cbz	r3, 404fc2 <__swsetup_r+0x12>
  404fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  404fbe:	2a00      	cmp	r2, #0
  404fc0:	d038      	beq.n	405034 <__swsetup_r+0x84>
  404fc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404fc6:	b293      	uxth	r3, r2
  404fc8:	0718      	lsls	r0, r3, #28
  404fca:	d50c      	bpl.n	404fe6 <__swsetup_r+0x36>
  404fcc:	6920      	ldr	r0, [r4, #16]
  404fce:	b1a8      	cbz	r0, 404ffc <__swsetup_r+0x4c>
  404fd0:	f013 0201 	ands.w	r2, r3, #1
  404fd4:	d01e      	beq.n	405014 <__swsetup_r+0x64>
  404fd6:	6963      	ldr	r3, [r4, #20]
  404fd8:	2200      	movs	r2, #0
  404fda:	425b      	negs	r3, r3
  404fdc:	61a3      	str	r3, [r4, #24]
  404fde:	60a2      	str	r2, [r4, #8]
  404fe0:	b1f0      	cbz	r0, 405020 <__swsetup_r+0x70>
  404fe2:	2000      	movs	r0, #0
  404fe4:	bd38      	pop	{r3, r4, r5, pc}
  404fe6:	06d9      	lsls	r1, r3, #27
  404fe8:	d53c      	bpl.n	405064 <__swsetup_r+0xb4>
  404fea:	0758      	lsls	r0, r3, #29
  404fec:	d426      	bmi.n	40503c <__swsetup_r+0x8c>
  404fee:	6920      	ldr	r0, [r4, #16]
  404ff0:	f042 0308 	orr.w	r3, r2, #8
  404ff4:	81a3      	strh	r3, [r4, #12]
  404ff6:	b29b      	uxth	r3, r3
  404ff8:	2800      	cmp	r0, #0
  404ffa:	d1e9      	bne.n	404fd0 <__swsetup_r+0x20>
  404ffc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405000:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405004:	d0e4      	beq.n	404fd0 <__swsetup_r+0x20>
  405006:	4628      	mov	r0, r5
  405008:	4621      	mov	r1, r4
  40500a:	f000 fd2f 	bl	405a6c <__smakebuf_r>
  40500e:	89a3      	ldrh	r3, [r4, #12]
  405010:	6920      	ldr	r0, [r4, #16]
  405012:	e7dd      	b.n	404fd0 <__swsetup_r+0x20>
  405014:	0799      	lsls	r1, r3, #30
  405016:	bf58      	it	pl
  405018:	6962      	ldrpl	r2, [r4, #20]
  40501a:	60a2      	str	r2, [r4, #8]
  40501c:	2800      	cmp	r0, #0
  40501e:	d1e0      	bne.n	404fe2 <__swsetup_r+0x32>
  405020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405024:	061a      	lsls	r2, r3, #24
  405026:	d5dd      	bpl.n	404fe4 <__swsetup_r+0x34>
  405028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40502c:	81a3      	strh	r3, [r4, #12]
  40502e:	f04f 30ff 	mov.w	r0, #4294967295
  405032:	bd38      	pop	{r3, r4, r5, pc}
  405034:	4618      	mov	r0, r3
  405036:	f000 f927 	bl	405288 <__sinit>
  40503a:	e7c2      	b.n	404fc2 <__swsetup_r+0x12>
  40503c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40503e:	b151      	cbz	r1, 405056 <__swsetup_r+0xa6>
  405040:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405044:	4299      	cmp	r1, r3
  405046:	d004      	beq.n	405052 <__swsetup_r+0xa2>
  405048:	4628      	mov	r0, r5
  40504a:	f000 fa43 	bl	4054d4 <_free_r>
  40504e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405052:	2300      	movs	r3, #0
  405054:	6323      	str	r3, [r4, #48]	; 0x30
  405056:	2300      	movs	r3, #0
  405058:	6920      	ldr	r0, [r4, #16]
  40505a:	6063      	str	r3, [r4, #4]
  40505c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405060:	6020      	str	r0, [r4, #0]
  405062:	e7c5      	b.n	404ff0 <__swsetup_r+0x40>
  405064:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405068:	2309      	movs	r3, #9
  40506a:	602b      	str	r3, [r5, #0]
  40506c:	f04f 30ff 	mov.w	r0, #4294967295
  405070:	81a2      	strh	r2, [r4, #12]
  405072:	bd38      	pop	{r3, r4, r5, pc}
  405074:	20400014 	.word	0x20400014

00405078 <register_fini>:
  405078:	4b02      	ldr	r3, [pc, #8]	; (405084 <register_fini+0xc>)
  40507a:	b113      	cbz	r3, 405082 <register_fini+0xa>
  40507c:	4802      	ldr	r0, [pc, #8]	; (405088 <register_fini+0x10>)
  40507e:	f000 b805 	b.w	40508c <atexit>
  405082:	4770      	bx	lr
  405084:	00000000 	.word	0x00000000
  405088:	004052f9 	.word	0x004052f9

0040508c <atexit>:
  40508c:	2300      	movs	r3, #0
  40508e:	4601      	mov	r1, r0
  405090:	461a      	mov	r2, r3
  405092:	4618      	mov	r0, r3
  405094:	f001 b890 	b.w	4061b8 <__register_exitproc>

00405098 <__sflush_r>:
  405098:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40509c:	b29a      	uxth	r2, r3
  40509e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4050a2:	460d      	mov	r5, r1
  4050a4:	0711      	lsls	r1, r2, #28
  4050a6:	4680      	mov	r8, r0
  4050a8:	d43a      	bmi.n	405120 <__sflush_r+0x88>
  4050aa:	686a      	ldr	r2, [r5, #4]
  4050ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4050b0:	2a00      	cmp	r2, #0
  4050b2:	81ab      	strh	r3, [r5, #12]
  4050b4:	dd6f      	ble.n	405196 <__sflush_r+0xfe>
  4050b6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4050b8:	2c00      	cmp	r4, #0
  4050ba:	d049      	beq.n	405150 <__sflush_r+0xb8>
  4050bc:	2200      	movs	r2, #0
  4050be:	b29b      	uxth	r3, r3
  4050c0:	f8d8 6000 	ldr.w	r6, [r8]
  4050c4:	f8c8 2000 	str.w	r2, [r8]
  4050c8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4050cc:	d067      	beq.n	40519e <__sflush_r+0x106>
  4050ce:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4050d0:	075f      	lsls	r7, r3, #29
  4050d2:	d505      	bpl.n	4050e0 <__sflush_r+0x48>
  4050d4:	6869      	ldr	r1, [r5, #4]
  4050d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4050d8:	1a52      	subs	r2, r2, r1
  4050da:	b10b      	cbz	r3, 4050e0 <__sflush_r+0x48>
  4050dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4050de:	1ad2      	subs	r2, r2, r3
  4050e0:	2300      	movs	r3, #0
  4050e2:	69e9      	ldr	r1, [r5, #28]
  4050e4:	4640      	mov	r0, r8
  4050e6:	47a0      	blx	r4
  4050e8:	1c44      	adds	r4, r0, #1
  4050ea:	d03c      	beq.n	405166 <__sflush_r+0xce>
  4050ec:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4050f0:	692a      	ldr	r2, [r5, #16]
  4050f2:	602a      	str	r2, [r5, #0]
  4050f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4050f8:	2200      	movs	r2, #0
  4050fa:	81ab      	strh	r3, [r5, #12]
  4050fc:	04db      	lsls	r3, r3, #19
  4050fe:	606a      	str	r2, [r5, #4]
  405100:	d447      	bmi.n	405192 <__sflush_r+0xfa>
  405102:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405104:	f8c8 6000 	str.w	r6, [r8]
  405108:	b311      	cbz	r1, 405150 <__sflush_r+0xb8>
  40510a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40510e:	4299      	cmp	r1, r3
  405110:	d002      	beq.n	405118 <__sflush_r+0x80>
  405112:	4640      	mov	r0, r8
  405114:	f000 f9de 	bl	4054d4 <_free_r>
  405118:	2000      	movs	r0, #0
  40511a:	6328      	str	r0, [r5, #48]	; 0x30
  40511c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405120:	692e      	ldr	r6, [r5, #16]
  405122:	b1ae      	cbz	r6, 405150 <__sflush_r+0xb8>
  405124:	682c      	ldr	r4, [r5, #0]
  405126:	602e      	str	r6, [r5, #0]
  405128:	0791      	lsls	r1, r2, #30
  40512a:	bf0c      	ite	eq
  40512c:	696b      	ldreq	r3, [r5, #20]
  40512e:	2300      	movne	r3, #0
  405130:	1ba4      	subs	r4, r4, r6
  405132:	60ab      	str	r3, [r5, #8]
  405134:	e00a      	b.n	40514c <__sflush_r+0xb4>
  405136:	4623      	mov	r3, r4
  405138:	4632      	mov	r2, r6
  40513a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40513c:	69e9      	ldr	r1, [r5, #28]
  40513e:	4640      	mov	r0, r8
  405140:	47b8      	blx	r7
  405142:	2800      	cmp	r0, #0
  405144:	eba4 0400 	sub.w	r4, r4, r0
  405148:	4406      	add	r6, r0
  40514a:	dd04      	ble.n	405156 <__sflush_r+0xbe>
  40514c:	2c00      	cmp	r4, #0
  40514e:	dcf2      	bgt.n	405136 <__sflush_r+0x9e>
  405150:	2000      	movs	r0, #0
  405152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405156:	89ab      	ldrh	r3, [r5, #12]
  405158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40515c:	81ab      	strh	r3, [r5, #12]
  40515e:	f04f 30ff 	mov.w	r0, #4294967295
  405162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405166:	f8d8 4000 	ldr.w	r4, [r8]
  40516a:	2c1d      	cmp	r4, #29
  40516c:	d8f3      	bhi.n	405156 <__sflush_r+0xbe>
  40516e:	4b19      	ldr	r3, [pc, #100]	; (4051d4 <__sflush_r+0x13c>)
  405170:	40e3      	lsrs	r3, r4
  405172:	43db      	mvns	r3, r3
  405174:	f013 0301 	ands.w	r3, r3, #1
  405178:	d1ed      	bne.n	405156 <__sflush_r+0xbe>
  40517a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40517e:	606b      	str	r3, [r5, #4]
  405180:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  405184:	6929      	ldr	r1, [r5, #16]
  405186:	81ab      	strh	r3, [r5, #12]
  405188:	04da      	lsls	r2, r3, #19
  40518a:	6029      	str	r1, [r5, #0]
  40518c:	d5b9      	bpl.n	405102 <__sflush_r+0x6a>
  40518e:	2c00      	cmp	r4, #0
  405190:	d1b7      	bne.n	405102 <__sflush_r+0x6a>
  405192:	6528      	str	r0, [r5, #80]	; 0x50
  405194:	e7b5      	b.n	405102 <__sflush_r+0x6a>
  405196:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  405198:	2a00      	cmp	r2, #0
  40519a:	dc8c      	bgt.n	4050b6 <__sflush_r+0x1e>
  40519c:	e7d8      	b.n	405150 <__sflush_r+0xb8>
  40519e:	2301      	movs	r3, #1
  4051a0:	69e9      	ldr	r1, [r5, #28]
  4051a2:	4640      	mov	r0, r8
  4051a4:	47a0      	blx	r4
  4051a6:	1c43      	adds	r3, r0, #1
  4051a8:	4602      	mov	r2, r0
  4051aa:	d002      	beq.n	4051b2 <__sflush_r+0x11a>
  4051ac:	89ab      	ldrh	r3, [r5, #12]
  4051ae:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4051b0:	e78e      	b.n	4050d0 <__sflush_r+0x38>
  4051b2:	f8d8 3000 	ldr.w	r3, [r8]
  4051b6:	2b00      	cmp	r3, #0
  4051b8:	d0f8      	beq.n	4051ac <__sflush_r+0x114>
  4051ba:	2b1d      	cmp	r3, #29
  4051bc:	d001      	beq.n	4051c2 <__sflush_r+0x12a>
  4051be:	2b16      	cmp	r3, #22
  4051c0:	d102      	bne.n	4051c8 <__sflush_r+0x130>
  4051c2:	f8c8 6000 	str.w	r6, [r8]
  4051c6:	e7c3      	b.n	405150 <__sflush_r+0xb8>
  4051c8:	89ab      	ldrh	r3, [r5, #12]
  4051ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4051ce:	81ab      	strh	r3, [r5, #12]
  4051d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4051d4:	20400001 	.word	0x20400001

004051d8 <_fflush_r>:
  4051d8:	b538      	push	{r3, r4, r5, lr}
  4051da:	460d      	mov	r5, r1
  4051dc:	4604      	mov	r4, r0
  4051de:	b108      	cbz	r0, 4051e4 <_fflush_r+0xc>
  4051e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4051e2:	b1bb      	cbz	r3, 405214 <_fflush_r+0x3c>
  4051e4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4051e8:	b188      	cbz	r0, 40520e <_fflush_r+0x36>
  4051ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4051ec:	07db      	lsls	r3, r3, #31
  4051ee:	d401      	bmi.n	4051f4 <_fflush_r+0x1c>
  4051f0:	0581      	lsls	r1, r0, #22
  4051f2:	d517      	bpl.n	405224 <_fflush_r+0x4c>
  4051f4:	4620      	mov	r0, r4
  4051f6:	4629      	mov	r1, r5
  4051f8:	f7ff ff4e 	bl	405098 <__sflush_r>
  4051fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4051fe:	07da      	lsls	r2, r3, #31
  405200:	4604      	mov	r4, r0
  405202:	d402      	bmi.n	40520a <_fflush_r+0x32>
  405204:	89ab      	ldrh	r3, [r5, #12]
  405206:	059b      	lsls	r3, r3, #22
  405208:	d507      	bpl.n	40521a <_fflush_r+0x42>
  40520a:	4620      	mov	r0, r4
  40520c:	bd38      	pop	{r3, r4, r5, pc}
  40520e:	4604      	mov	r4, r0
  405210:	4620      	mov	r0, r4
  405212:	bd38      	pop	{r3, r4, r5, pc}
  405214:	f000 f838 	bl	405288 <__sinit>
  405218:	e7e4      	b.n	4051e4 <_fflush_r+0xc>
  40521a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40521c:	f000 fbf6 	bl	405a0c <__retarget_lock_release_recursive>
  405220:	4620      	mov	r0, r4
  405222:	bd38      	pop	{r3, r4, r5, pc}
  405224:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405226:	f000 fbef 	bl	405a08 <__retarget_lock_acquire_recursive>
  40522a:	e7e3      	b.n	4051f4 <_fflush_r+0x1c>

0040522c <_cleanup_r>:
  40522c:	4901      	ldr	r1, [pc, #4]	; (405234 <_cleanup_r+0x8>)
  40522e:	f000 bbaf 	b.w	405990 <_fwalk_reent>
  405232:	bf00      	nop
  405234:	004062a1 	.word	0x004062a1

00405238 <std.isra.0>:
  405238:	b510      	push	{r4, lr}
  40523a:	2300      	movs	r3, #0
  40523c:	4604      	mov	r4, r0
  40523e:	8181      	strh	r1, [r0, #12]
  405240:	81c2      	strh	r2, [r0, #14]
  405242:	6003      	str	r3, [r0, #0]
  405244:	6043      	str	r3, [r0, #4]
  405246:	6083      	str	r3, [r0, #8]
  405248:	6643      	str	r3, [r0, #100]	; 0x64
  40524a:	6103      	str	r3, [r0, #16]
  40524c:	6143      	str	r3, [r0, #20]
  40524e:	6183      	str	r3, [r0, #24]
  405250:	4619      	mov	r1, r3
  405252:	2208      	movs	r2, #8
  405254:	305c      	adds	r0, #92	; 0x5c
  405256:	f7fe fe1f 	bl	403e98 <memset>
  40525a:	4807      	ldr	r0, [pc, #28]	; (405278 <std.isra.0+0x40>)
  40525c:	4907      	ldr	r1, [pc, #28]	; (40527c <std.isra.0+0x44>)
  40525e:	4a08      	ldr	r2, [pc, #32]	; (405280 <std.isra.0+0x48>)
  405260:	4b08      	ldr	r3, [pc, #32]	; (405284 <std.isra.0+0x4c>)
  405262:	6220      	str	r0, [r4, #32]
  405264:	61e4      	str	r4, [r4, #28]
  405266:	6261      	str	r1, [r4, #36]	; 0x24
  405268:	62a2      	str	r2, [r4, #40]	; 0x28
  40526a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40526c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  405270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405274:	f000 bbc4 	b.w	405a00 <__retarget_lock_init_recursive>
  405278:	00405fe5 	.word	0x00405fe5
  40527c:	00406009 	.word	0x00406009
  405280:	00406045 	.word	0x00406045
  405284:	00406065 	.word	0x00406065

00405288 <__sinit>:
  405288:	b510      	push	{r4, lr}
  40528a:	4604      	mov	r4, r0
  40528c:	4812      	ldr	r0, [pc, #72]	; (4052d8 <__sinit+0x50>)
  40528e:	f000 fbbb 	bl	405a08 <__retarget_lock_acquire_recursive>
  405292:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  405294:	b9d2      	cbnz	r2, 4052cc <__sinit+0x44>
  405296:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40529a:	4810      	ldr	r0, [pc, #64]	; (4052dc <__sinit+0x54>)
  40529c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4052a0:	2103      	movs	r1, #3
  4052a2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4052a6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4052a8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4052ac:	6860      	ldr	r0, [r4, #4]
  4052ae:	2104      	movs	r1, #4
  4052b0:	f7ff ffc2 	bl	405238 <std.isra.0>
  4052b4:	2201      	movs	r2, #1
  4052b6:	2109      	movs	r1, #9
  4052b8:	68a0      	ldr	r0, [r4, #8]
  4052ba:	f7ff ffbd 	bl	405238 <std.isra.0>
  4052be:	2202      	movs	r2, #2
  4052c0:	2112      	movs	r1, #18
  4052c2:	68e0      	ldr	r0, [r4, #12]
  4052c4:	f7ff ffb8 	bl	405238 <std.isra.0>
  4052c8:	2301      	movs	r3, #1
  4052ca:	63a3      	str	r3, [r4, #56]	; 0x38
  4052cc:	4802      	ldr	r0, [pc, #8]	; (4052d8 <__sinit+0x50>)
  4052ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4052d2:	f000 bb9b 	b.w	405a0c <__retarget_lock_release_recursive>
  4052d6:	bf00      	nop
  4052d8:	20400cfc 	.word	0x20400cfc
  4052dc:	0040522d 	.word	0x0040522d

004052e0 <__sfp_lock_acquire>:
  4052e0:	4801      	ldr	r0, [pc, #4]	; (4052e8 <__sfp_lock_acquire+0x8>)
  4052e2:	f000 bb91 	b.w	405a08 <__retarget_lock_acquire_recursive>
  4052e6:	bf00      	nop
  4052e8:	20400d10 	.word	0x20400d10

004052ec <__sfp_lock_release>:
  4052ec:	4801      	ldr	r0, [pc, #4]	; (4052f4 <__sfp_lock_release+0x8>)
  4052ee:	f000 bb8d 	b.w	405a0c <__retarget_lock_release_recursive>
  4052f2:	bf00      	nop
  4052f4:	20400d10 	.word	0x20400d10

004052f8 <__libc_fini_array>:
  4052f8:	b538      	push	{r3, r4, r5, lr}
  4052fa:	4c0a      	ldr	r4, [pc, #40]	; (405324 <__libc_fini_array+0x2c>)
  4052fc:	4d0a      	ldr	r5, [pc, #40]	; (405328 <__libc_fini_array+0x30>)
  4052fe:	1b64      	subs	r4, r4, r5
  405300:	10a4      	asrs	r4, r4, #2
  405302:	d00a      	beq.n	40531a <__libc_fini_array+0x22>
  405304:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405308:	3b01      	subs	r3, #1
  40530a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40530e:	3c01      	subs	r4, #1
  405310:	f855 3904 	ldr.w	r3, [r5], #-4
  405314:	4798      	blx	r3
  405316:	2c00      	cmp	r4, #0
  405318:	d1f9      	bne.n	40530e <__libc_fini_array+0x16>
  40531a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40531e:	f001 b9cb 	b.w	4066b8 <_fini>
  405322:	bf00      	nop
  405324:	004066c8 	.word	0x004066c8
  405328:	004066c4 	.word	0x004066c4

0040532c <__fputwc>:
  40532c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405330:	b082      	sub	sp, #8
  405332:	4680      	mov	r8, r0
  405334:	4689      	mov	r9, r1
  405336:	4614      	mov	r4, r2
  405338:	f000 fb54 	bl	4059e4 <__locale_mb_cur_max>
  40533c:	2801      	cmp	r0, #1
  40533e:	d036      	beq.n	4053ae <__fputwc+0x82>
  405340:	464a      	mov	r2, r9
  405342:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405346:	a901      	add	r1, sp, #4
  405348:	4640      	mov	r0, r8
  40534a:	f000 fee7 	bl	40611c <_wcrtomb_r>
  40534e:	1c42      	adds	r2, r0, #1
  405350:	4606      	mov	r6, r0
  405352:	d025      	beq.n	4053a0 <__fputwc+0x74>
  405354:	b3a8      	cbz	r0, 4053c2 <__fputwc+0x96>
  405356:	f89d e004 	ldrb.w	lr, [sp, #4]
  40535a:	2500      	movs	r5, #0
  40535c:	f10d 0a04 	add.w	sl, sp, #4
  405360:	e009      	b.n	405376 <__fputwc+0x4a>
  405362:	6823      	ldr	r3, [r4, #0]
  405364:	1c5a      	adds	r2, r3, #1
  405366:	6022      	str	r2, [r4, #0]
  405368:	f883 e000 	strb.w	lr, [r3]
  40536c:	3501      	adds	r5, #1
  40536e:	42b5      	cmp	r5, r6
  405370:	d227      	bcs.n	4053c2 <__fputwc+0x96>
  405372:	f815 e00a 	ldrb.w	lr, [r5, sl]
  405376:	68a3      	ldr	r3, [r4, #8]
  405378:	3b01      	subs	r3, #1
  40537a:	2b00      	cmp	r3, #0
  40537c:	60a3      	str	r3, [r4, #8]
  40537e:	daf0      	bge.n	405362 <__fputwc+0x36>
  405380:	69a7      	ldr	r7, [r4, #24]
  405382:	42bb      	cmp	r3, r7
  405384:	4671      	mov	r1, lr
  405386:	4622      	mov	r2, r4
  405388:	4640      	mov	r0, r8
  40538a:	db02      	blt.n	405392 <__fputwc+0x66>
  40538c:	f1be 0f0a 	cmp.w	lr, #10
  405390:	d1e7      	bne.n	405362 <__fputwc+0x36>
  405392:	f000 fe6b 	bl	40606c <__swbuf_r>
  405396:	1c43      	adds	r3, r0, #1
  405398:	d1e8      	bne.n	40536c <__fputwc+0x40>
  40539a:	b002      	add	sp, #8
  40539c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4053a0:	89a3      	ldrh	r3, [r4, #12]
  4053a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4053a6:	81a3      	strh	r3, [r4, #12]
  4053a8:	b002      	add	sp, #8
  4053aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4053ae:	f109 33ff 	add.w	r3, r9, #4294967295
  4053b2:	2bfe      	cmp	r3, #254	; 0xfe
  4053b4:	d8c4      	bhi.n	405340 <__fputwc+0x14>
  4053b6:	fa5f fe89 	uxtb.w	lr, r9
  4053ba:	4606      	mov	r6, r0
  4053bc:	f88d e004 	strb.w	lr, [sp, #4]
  4053c0:	e7cb      	b.n	40535a <__fputwc+0x2e>
  4053c2:	4648      	mov	r0, r9
  4053c4:	b002      	add	sp, #8
  4053c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4053ca:	bf00      	nop

004053cc <_fputwc_r>:
  4053cc:	b530      	push	{r4, r5, lr}
  4053ce:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4053d0:	f013 0f01 	tst.w	r3, #1
  4053d4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4053d8:	4614      	mov	r4, r2
  4053da:	b083      	sub	sp, #12
  4053dc:	4605      	mov	r5, r0
  4053de:	b29a      	uxth	r2, r3
  4053e0:	d101      	bne.n	4053e6 <_fputwc_r+0x1a>
  4053e2:	0590      	lsls	r0, r2, #22
  4053e4:	d51c      	bpl.n	405420 <_fputwc_r+0x54>
  4053e6:	0490      	lsls	r0, r2, #18
  4053e8:	d406      	bmi.n	4053f8 <_fputwc_r+0x2c>
  4053ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4053ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4053f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4053f4:	81a3      	strh	r3, [r4, #12]
  4053f6:	6662      	str	r2, [r4, #100]	; 0x64
  4053f8:	4628      	mov	r0, r5
  4053fa:	4622      	mov	r2, r4
  4053fc:	f7ff ff96 	bl	40532c <__fputwc>
  405400:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405402:	07da      	lsls	r2, r3, #31
  405404:	4605      	mov	r5, r0
  405406:	d402      	bmi.n	40540e <_fputwc_r+0x42>
  405408:	89a3      	ldrh	r3, [r4, #12]
  40540a:	059b      	lsls	r3, r3, #22
  40540c:	d502      	bpl.n	405414 <_fputwc_r+0x48>
  40540e:	4628      	mov	r0, r5
  405410:	b003      	add	sp, #12
  405412:	bd30      	pop	{r4, r5, pc}
  405414:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405416:	f000 faf9 	bl	405a0c <__retarget_lock_release_recursive>
  40541a:	4628      	mov	r0, r5
  40541c:	b003      	add	sp, #12
  40541e:	bd30      	pop	{r4, r5, pc}
  405420:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405422:	9101      	str	r1, [sp, #4]
  405424:	f000 faf0 	bl	405a08 <__retarget_lock_acquire_recursive>
  405428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40542c:	9901      	ldr	r1, [sp, #4]
  40542e:	b29a      	uxth	r2, r3
  405430:	e7d9      	b.n	4053e6 <_fputwc_r+0x1a>
  405432:	bf00      	nop

00405434 <_malloc_trim_r>:
  405434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405436:	4f24      	ldr	r7, [pc, #144]	; (4054c8 <_malloc_trim_r+0x94>)
  405438:	460c      	mov	r4, r1
  40543a:	4606      	mov	r6, r0
  40543c:	f7fe fd7a 	bl	403f34 <__malloc_lock>
  405440:	68bb      	ldr	r3, [r7, #8]
  405442:	685d      	ldr	r5, [r3, #4]
  405444:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405448:	310f      	adds	r1, #15
  40544a:	f025 0503 	bic.w	r5, r5, #3
  40544e:	4429      	add	r1, r5
  405450:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405454:	f021 010f 	bic.w	r1, r1, #15
  405458:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40545c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405460:	db07      	blt.n	405472 <_malloc_trim_r+0x3e>
  405462:	2100      	movs	r1, #0
  405464:	4630      	mov	r0, r6
  405466:	f7fe fd71 	bl	403f4c <_sbrk_r>
  40546a:	68bb      	ldr	r3, [r7, #8]
  40546c:	442b      	add	r3, r5
  40546e:	4298      	cmp	r0, r3
  405470:	d004      	beq.n	40547c <_malloc_trim_r+0x48>
  405472:	4630      	mov	r0, r6
  405474:	f7fe fd64 	bl	403f40 <__malloc_unlock>
  405478:	2000      	movs	r0, #0
  40547a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40547c:	4261      	negs	r1, r4
  40547e:	4630      	mov	r0, r6
  405480:	f7fe fd64 	bl	403f4c <_sbrk_r>
  405484:	3001      	adds	r0, #1
  405486:	d00d      	beq.n	4054a4 <_malloc_trim_r+0x70>
  405488:	4b10      	ldr	r3, [pc, #64]	; (4054cc <_malloc_trim_r+0x98>)
  40548a:	68ba      	ldr	r2, [r7, #8]
  40548c:	6819      	ldr	r1, [r3, #0]
  40548e:	1b2d      	subs	r5, r5, r4
  405490:	f045 0501 	orr.w	r5, r5, #1
  405494:	4630      	mov	r0, r6
  405496:	1b09      	subs	r1, r1, r4
  405498:	6055      	str	r5, [r2, #4]
  40549a:	6019      	str	r1, [r3, #0]
  40549c:	f7fe fd50 	bl	403f40 <__malloc_unlock>
  4054a0:	2001      	movs	r0, #1
  4054a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4054a4:	2100      	movs	r1, #0
  4054a6:	4630      	mov	r0, r6
  4054a8:	f7fe fd50 	bl	403f4c <_sbrk_r>
  4054ac:	68ba      	ldr	r2, [r7, #8]
  4054ae:	1a83      	subs	r3, r0, r2
  4054b0:	2b0f      	cmp	r3, #15
  4054b2:	ddde      	ble.n	405472 <_malloc_trim_r+0x3e>
  4054b4:	4c06      	ldr	r4, [pc, #24]	; (4054d0 <_malloc_trim_r+0x9c>)
  4054b6:	4905      	ldr	r1, [pc, #20]	; (4054cc <_malloc_trim_r+0x98>)
  4054b8:	6824      	ldr	r4, [r4, #0]
  4054ba:	f043 0301 	orr.w	r3, r3, #1
  4054be:	1b00      	subs	r0, r0, r4
  4054c0:	6053      	str	r3, [r2, #4]
  4054c2:	6008      	str	r0, [r1, #0]
  4054c4:	e7d5      	b.n	405472 <_malloc_trim_r+0x3e>
  4054c6:	bf00      	nop
  4054c8:	20400440 	.word	0x20400440
  4054cc:	20400be0 	.word	0x20400be0
  4054d0:	20400848 	.word	0x20400848

004054d4 <_free_r>:
  4054d4:	2900      	cmp	r1, #0
  4054d6:	d044      	beq.n	405562 <_free_r+0x8e>
  4054d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4054dc:	460d      	mov	r5, r1
  4054de:	4680      	mov	r8, r0
  4054e0:	f7fe fd28 	bl	403f34 <__malloc_lock>
  4054e4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4054e8:	4969      	ldr	r1, [pc, #420]	; (405690 <_free_r+0x1bc>)
  4054ea:	f027 0301 	bic.w	r3, r7, #1
  4054ee:	f1a5 0408 	sub.w	r4, r5, #8
  4054f2:	18e2      	adds	r2, r4, r3
  4054f4:	688e      	ldr	r6, [r1, #8]
  4054f6:	6850      	ldr	r0, [r2, #4]
  4054f8:	42b2      	cmp	r2, r6
  4054fa:	f020 0003 	bic.w	r0, r0, #3
  4054fe:	d05e      	beq.n	4055be <_free_r+0xea>
  405500:	07fe      	lsls	r6, r7, #31
  405502:	6050      	str	r0, [r2, #4]
  405504:	d40b      	bmi.n	40551e <_free_r+0x4a>
  405506:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40550a:	1be4      	subs	r4, r4, r7
  40550c:	f101 0e08 	add.w	lr, r1, #8
  405510:	68a5      	ldr	r5, [r4, #8]
  405512:	4575      	cmp	r5, lr
  405514:	443b      	add	r3, r7
  405516:	d06d      	beq.n	4055f4 <_free_r+0x120>
  405518:	68e7      	ldr	r7, [r4, #12]
  40551a:	60ef      	str	r7, [r5, #12]
  40551c:	60bd      	str	r5, [r7, #8]
  40551e:	1815      	adds	r5, r2, r0
  405520:	686d      	ldr	r5, [r5, #4]
  405522:	07ed      	lsls	r5, r5, #31
  405524:	d53e      	bpl.n	4055a4 <_free_r+0xd0>
  405526:	f043 0201 	orr.w	r2, r3, #1
  40552a:	6062      	str	r2, [r4, #4]
  40552c:	50e3      	str	r3, [r4, r3]
  40552e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405532:	d217      	bcs.n	405564 <_free_r+0x90>
  405534:	08db      	lsrs	r3, r3, #3
  405536:	1c58      	adds	r0, r3, #1
  405538:	109a      	asrs	r2, r3, #2
  40553a:	684d      	ldr	r5, [r1, #4]
  40553c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405540:	60a7      	str	r7, [r4, #8]
  405542:	2301      	movs	r3, #1
  405544:	4093      	lsls	r3, r2
  405546:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40554a:	432b      	orrs	r3, r5
  40554c:	3a08      	subs	r2, #8
  40554e:	60e2      	str	r2, [r4, #12]
  405550:	604b      	str	r3, [r1, #4]
  405552:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405556:	60fc      	str	r4, [r7, #12]
  405558:	4640      	mov	r0, r8
  40555a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40555e:	f7fe bcef 	b.w	403f40 <__malloc_unlock>
  405562:	4770      	bx	lr
  405564:	0a5a      	lsrs	r2, r3, #9
  405566:	2a04      	cmp	r2, #4
  405568:	d852      	bhi.n	405610 <_free_r+0x13c>
  40556a:	099a      	lsrs	r2, r3, #6
  40556c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405570:	00ff      	lsls	r7, r7, #3
  405572:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405576:	19c8      	adds	r0, r1, r7
  405578:	59ca      	ldr	r2, [r1, r7]
  40557a:	3808      	subs	r0, #8
  40557c:	4290      	cmp	r0, r2
  40557e:	d04f      	beq.n	405620 <_free_r+0x14c>
  405580:	6851      	ldr	r1, [r2, #4]
  405582:	f021 0103 	bic.w	r1, r1, #3
  405586:	428b      	cmp	r3, r1
  405588:	d232      	bcs.n	4055f0 <_free_r+0x11c>
  40558a:	6892      	ldr	r2, [r2, #8]
  40558c:	4290      	cmp	r0, r2
  40558e:	d1f7      	bne.n	405580 <_free_r+0xac>
  405590:	68c3      	ldr	r3, [r0, #12]
  405592:	60a0      	str	r0, [r4, #8]
  405594:	60e3      	str	r3, [r4, #12]
  405596:	609c      	str	r4, [r3, #8]
  405598:	60c4      	str	r4, [r0, #12]
  40559a:	4640      	mov	r0, r8
  40559c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4055a0:	f7fe bcce 	b.w	403f40 <__malloc_unlock>
  4055a4:	6895      	ldr	r5, [r2, #8]
  4055a6:	4f3b      	ldr	r7, [pc, #236]	; (405694 <_free_r+0x1c0>)
  4055a8:	42bd      	cmp	r5, r7
  4055aa:	4403      	add	r3, r0
  4055ac:	d040      	beq.n	405630 <_free_r+0x15c>
  4055ae:	68d0      	ldr	r0, [r2, #12]
  4055b0:	60e8      	str	r0, [r5, #12]
  4055b2:	f043 0201 	orr.w	r2, r3, #1
  4055b6:	6085      	str	r5, [r0, #8]
  4055b8:	6062      	str	r2, [r4, #4]
  4055ba:	50e3      	str	r3, [r4, r3]
  4055bc:	e7b7      	b.n	40552e <_free_r+0x5a>
  4055be:	07ff      	lsls	r7, r7, #31
  4055c0:	4403      	add	r3, r0
  4055c2:	d407      	bmi.n	4055d4 <_free_r+0x100>
  4055c4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4055c8:	1aa4      	subs	r4, r4, r2
  4055ca:	4413      	add	r3, r2
  4055cc:	68a0      	ldr	r0, [r4, #8]
  4055ce:	68e2      	ldr	r2, [r4, #12]
  4055d0:	60c2      	str	r2, [r0, #12]
  4055d2:	6090      	str	r0, [r2, #8]
  4055d4:	4a30      	ldr	r2, [pc, #192]	; (405698 <_free_r+0x1c4>)
  4055d6:	6812      	ldr	r2, [r2, #0]
  4055d8:	f043 0001 	orr.w	r0, r3, #1
  4055dc:	4293      	cmp	r3, r2
  4055de:	6060      	str	r0, [r4, #4]
  4055e0:	608c      	str	r4, [r1, #8]
  4055e2:	d3b9      	bcc.n	405558 <_free_r+0x84>
  4055e4:	4b2d      	ldr	r3, [pc, #180]	; (40569c <_free_r+0x1c8>)
  4055e6:	4640      	mov	r0, r8
  4055e8:	6819      	ldr	r1, [r3, #0]
  4055ea:	f7ff ff23 	bl	405434 <_malloc_trim_r>
  4055ee:	e7b3      	b.n	405558 <_free_r+0x84>
  4055f0:	4610      	mov	r0, r2
  4055f2:	e7cd      	b.n	405590 <_free_r+0xbc>
  4055f4:	1811      	adds	r1, r2, r0
  4055f6:	6849      	ldr	r1, [r1, #4]
  4055f8:	07c9      	lsls	r1, r1, #31
  4055fa:	d444      	bmi.n	405686 <_free_r+0x1b2>
  4055fc:	6891      	ldr	r1, [r2, #8]
  4055fe:	68d2      	ldr	r2, [r2, #12]
  405600:	60ca      	str	r2, [r1, #12]
  405602:	4403      	add	r3, r0
  405604:	f043 0001 	orr.w	r0, r3, #1
  405608:	6091      	str	r1, [r2, #8]
  40560a:	6060      	str	r0, [r4, #4]
  40560c:	50e3      	str	r3, [r4, r3]
  40560e:	e7a3      	b.n	405558 <_free_r+0x84>
  405610:	2a14      	cmp	r2, #20
  405612:	d816      	bhi.n	405642 <_free_r+0x16e>
  405614:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405618:	00ff      	lsls	r7, r7, #3
  40561a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40561e:	e7aa      	b.n	405576 <_free_r+0xa2>
  405620:	10aa      	asrs	r2, r5, #2
  405622:	2301      	movs	r3, #1
  405624:	684d      	ldr	r5, [r1, #4]
  405626:	4093      	lsls	r3, r2
  405628:	432b      	orrs	r3, r5
  40562a:	604b      	str	r3, [r1, #4]
  40562c:	4603      	mov	r3, r0
  40562e:	e7b0      	b.n	405592 <_free_r+0xbe>
  405630:	f043 0201 	orr.w	r2, r3, #1
  405634:	614c      	str	r4, [r1, #20]
  405636:	610c      	str	r4, [r1, #16]
  405638:	60e5      	str	r5, [r4, #12]
  40563a:	60a5      	str	r5, [r4, #8]
  40563c:	6062      	str	r2, [r4, #4]
  40563e:	50e3      	str	r3, [r4, r3]
  405640:	e78a      	b.n	405558 <_free_r+0x84>
  405642:	2a54      	cmp	r2, #84	; 0x54
  405644:	d806      	bhi.n	405654 <_free_r+0x180>
  405646:	0b1a      	lsrs	r2, r3, #12
  405648:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40564c:	00ff      	lsls	r7, r7, #3
  40564e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405652:	e790      	b.n	405576 <_free_r+0xa2>
  405654:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405658:	d806      	bhi.n	405668 <_free_r+0x194>
  40565a:	0bda      	lsrs	r2, r3, #15
  40565c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405660:	00ff      	lsls	r7, r7, #3
  405662:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405666:	e786      	b.n	405576 <_free_r+0xa2>
  405668:	f240 5054 	movw	r0, #1364	; 0x554
  40566c:	4282      	cmp	r2, r0
  40566e:	d806      	bhi.n	40567e <_free_r+0x1aa>
  405670:	0c9a      	lsrs	r2, r3, #18
  405672:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405676:	00ff      	lsls	r7, r7, #3
  405678:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40567c:	e77b      	b.n	405576 <_free_r+0xa2>
  40567e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405682:	257e      	movs	r5, #126	; 0x7e
  405684:	e777      	b.n	405576 <_free_r+0xa2>
  405686:	f043 0101 	orr.w	r1, r3, #1
  40568a:	6061      	str	r1, [r4, #4]
  40568c:	6013      	str	r3, [r2, #0]
  40568e:	e763      	b.n	405558 <_free_r+0x84>
  405690:	20400440 	.word	0x20400440
  405694:	20400448 	.word	0x20400448
  405698:	2040084c 	.word	0x2040084c
  40569c:	20400c10 	.word	0x20400c10

004056a0 <__sfvwrite_r>:
  4056a0:	6893      	ldr	r3, [r2, #8]
  4056a2:	2b00      	cmp	r3, #0
  4056a4:	d073      	beq.n	40578e <__sfvwrite_r+0xee>
  4056a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4056aa:	898b      	ldrh	r3, [r1, #12]
  4056ac:	b083      	sub	sp, #12
  4056ae:	460c      	mov	r4, r1
  4056b0:	0719      	lsls	r1, r3, #28
  4056b2:	9000      	str	r0, [sp, #0]
  4056b4:	4616      	mov	r6, r2
  4056b6:	d526      	bpl.n	405706 <__sfvwrite_r+0x66>
  4056b8:	6922      	ldr	r2, [r4, #16]
  4056ba:	b322      	cbz	r2, 405706 <__sfvwrite_r+0x66>
  4056bc:	f013 0002 	ands.w	r0, r3, #2
  4056c0:	6835      	ldr	r5, [r6, #0]
  4056c2:	d02c      	beq.n	40571e <__sfvwrite_r+0x7e>
  4056c4:	f04f 0900 	mov.w	r9, #0
  4056c8:	4fb0      	ldr	r7, [pc, #704]	; (40598c <__sfvwrite_r+0x2ec>)
  4056ca:	46c8      	mov	r8, r9
  4056cc:	46b2      	mov	sl, r6
  4056ce:	45b8      	cmp	r8, r7
  4056d0:	4643      	mov	r3, r8
  4056d2:	464a      	mov	r2, r9
  4056d4:	bf28      	it	cs
  4056d6:	463b      	movcs	r3, r7
  4056d8:	9800      	ldr	r0, [sp, #0]
  4056da:	f1b8 0f00 	cmp.w	r8, #0
  4056de:	d050      	beq.n	405782 <__sfvwrite_r+0xe2>
  4056e0:	69e1      	ldr	r1, [r4, #28]
  4056e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4056e4:	47b0      	blx	r6
  4056e6:	2800      	cmp	r0, #0
  4056e8:	dd58      	ble.n	40579c <__sfvwrite_r+0xfc>
  4056ea:	f8da 3008 	ldr.w	r3, [sl, #8]
  4056ee:	1a1b      	subs	r3, r3, r0
  4056f0:	4481      	add	r9, r0
  4056f2:	eba8 0800 	sub.w	r8, r8, r0
  4056f6:	f8ca 3008 	str.w	r3, [sl, #8]
  4056fa:	2b00      	cmp	r3, #0
  4056fc:	d1e7      	bne.n	4056ce <__sfvwrite_r+0x2e>
  4056fe:	2000      	movs	r0, #0
  405700:	b003      	add	sp, #12
  405702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405706:	4621      	mov	r1, r4
  405708:	9800      	ldr	r0, [sp, #0]
  40570a:	f7ff fc51 	bl	404fb0 <__swsetup_r>
  40570e:	2800      	cmp	r0, #0
  405710:	f040 8133 	bne.w	40597a <__sfvwrite_r+0x2da>
  405714:	89a3      	ldrh	r3, [r4, #12]
  405716:	6835      	ldr	r5, [r6, #0]
  405718:	f013 0002 	ands.w	r0, r3, #2
  40571c:	d1d2      	bne.n	4056c4 <__sfvwrite_r+0x24>
  40571e:	f013 0901 	ands.w	r9, r3, #1
  405722:	d145      	bne.n	4057b0 <__sfvwrite_r+0x110>
  405724:	464f      	mov	r7, r9
  405726:	9601      	str	r6, [sp, #4]
  405728:	b337      	cbz	r7, 405778 <__sfvwrite_r+0xd8>
  40572a:	059a      	lsls	r2, r3, #22
  40572c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  405730:	f140 8083 	bpl.w	40583a <__sfvwrite_r+0x19a>
  405734:	4547      	cmp	r7, r8
  405736:	46c3      	mov	fp, r8
  405738:	f0c0 80ab 	bcc.w	405892 <__sfvwrite_r+0x1f2>
  40573c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405740:	f040 80ac 	bne.w	40589c <__sfvwrite_r+0x1fc>
  405744:	6820      	ldr	r0, [r4, #0]
  405746:	46ba      	mov	sl, r7
  405748:	465a      	mov	r2, fp
  40574a:	4649      	mov	r1, r9
  40574c:	f000 fa40 	bl	405bd0 <memmove>
  405750:	68a2      	ldr	r2, [r4, #8]
  405752:	6823      	ldr	r3, [r4, #0]
  405754:	eba2 0208 	sub.w	r2, r2, r8
  405758:	445b      	add	r3, fp
  40575a:	60a2      	str	r2, [r4, #8]
  40575c:	6023      	str	r3, [r4, #0]
  40575e:	9a01      	ldr	r2, [sp, #4]
  405760:	6893      	ldr	r3, [r2, #8]
  405762:	eba3 030a 	sub.w	r3, r3, sl
  405766:	44d1      	add	r9, sl
  405768:	eba7 070a 	sub.w	r7, r7, sl
  40576c:	6093      	str	r3, [r2, #8]
  40576e:	2b00      	cmp	r3, #0
  405770:	d0c5      	beq.n	4056fe <__sfvwrite_r+0x5e>
  405772:	89a3      	ldrh	r3, [r4, #12]
  405774:	2f00      	cmp	r7, #0
  405776:	d1d8      	bne.n	40572a <__sfvwrite_r+0x8a>
  405778:	f8d5 9000 	ldr.w	r9, [r5]
  40577c:	686f      	ldr	r7, [r5, #4]
  40577e:	3508      	adds	r5, #8
  405780:	e7d2      	b.n	405728 <__sfvwrite_r+0x88>
  405782:	f8d5 9000 	ldr.w	r9, [r5]
  405786:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40578a:	3508      	adds	r5, #8
  40578c:	e79f      	b.n	4056ce <__sfvwrite_r+0x2e>
  40578e:	2000      	movs	r0, #0
  405790:	4770      	bx	lr
  405792:	4621      	mov	r1, r4
  405794:	9800      	ldr	r0, [sp, #0]
  405796:	f7ff fd1f 	bl	4051d8 <_fflush_r>
  40579a:	b370      	cbz	r0, 4057fa <__sfvwrite_r+0x15a>
  40579c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4057a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4057a4:	f04f 30ff 	mov.w	r0, #4294967295
  4057a8:	81a3      	strh	r3, [r4, #12]
  4057aa:	b003      	add	sp, #12
  4057ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4057b0:	4681      	mov	r9, r0
  4057b2:	4633      	mov	r3, r6
  4057b4:	464e      	mov	r6, r9
  4057b6:	46a8      	mov	r8, r5
  4057b8:	469a      	mov	sl, r3
  4057ba:	464d      	mov	r5, r9
  4057bc:	b34e      	cbz	r6, 405812 <__sfvwrite_r+0x172>
  4057be:	b380      	cbz	r0, 405822 <__sfvwrite_r+0x182>
  4057c0:	6820      	ldr	r0, [r4, #0]
  4057c2:	6923      	ldr	r3, [r4, #16]
  4057c4:	6962      	ldr	r2, [r4, #20]
  4057c6:	45b1      	cmp	r9, r6
  4057c8:	46cb      	mov	fp, r9
  4057ca:	bf28      	it	cs
  4057cc:	46b3      	movcs	fp, r6
  4057ce:	4298      	cmp	r0, r3
  4057d0:	465f      	mov	r7, fp
  4057d2:	d904      	bls.n	4057de <__sfvwrite_r+0x13e>
  4057d4:	68a3      	ldr	r3, [r4, #8]
  4057d6:	4413      	add	r3, r2
  4057d8:	459b      	cmp	fp, r3
  4057da:	f300 80a6 	bgt.w	40592a <__sfvwrite_r+0x28a>
  4057de:	4593      	cmp	fp, r2
  4057e0:	db4b      	blt.n	40587a <__sfvwrite_r+0x1da>
  4057e2:	4613      	mov	r3, r2
  4057e4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4057e6:	69e1      	ldr	r1, [r4, #28]
  4057e8:	9800      	ldr	r0, [sp, #0]
  4057ea:	462a      	mov	r2, r5
  4057ec:	47b8      	blx	r7
  4057ee:	1e07      	subs	r7, r0, #0
  4057f0:	ddd4      	ble.n	40579c <__sfvwrite_r+0xfc>
  4057f2:	ebb9 0907 	subs.w	r9, r9, r7
  4057f6:	d0cc      	beq.n	405792 <__sfvwrite_r+0xf2>
  4057f8:	2001      	movs	r0, #1
  4057fa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4057fe:	1bdb      	subs	r3, r3, r7
  405800:	443d      	add	r5, r7
  405802:	1bf6      	subs	r6, r6, r7
  405804:	f8ca 3008 	str.w	r3, [sl, #8]
  405808:	2b00      	cmp	r3, #0
  40580a:	f43f af78 	beq.w	4056fe <__sfvwrite_r+0x5e>
  40580e:	2e00      	cmp	r6, #0
  405810:	d1d5      	bne.n	4057be <__sfvwrite_r+0x11e>
  405812:	f108 0308 	add.w	r3, r8, #8
  405816:	e913 0060 	ldmdb	r3, {r5, r6}
  40581a:	4698      	mov	r8, r3
  40581c:	3308      	adds	r3, #8
  40581e:	2e00      	cmp	r6, #0
  405820:	d0f9      	beq.n	405816 <__sfvwrite_r+0x176>
  405822:	4632      	mov	r2, r6
  405824:	210a      	movs	r1, #10
  405826:	4628      	mov	r0, r5
  405828:	f000 f982 	bl	405b30 <memchr>
  40582c:	2800      	cmp	r0, #0
  40582e:	f000 80a1 	beq.w	405974 <__sfvwrite_r+0x2d4>
  405832:	3001      	adds	r0, #1
  405834:	eba0 0905 	sub.w	r9, r0, r5
  405838:	e7c2      	b.n	4057c0 <__sfvwrite_r+0x120>
  40583a:	6820      	ldr	r0, [r4, #0]
  40583c:	6923      	ldr	r3, [r4, #16]
  40583e:	4298      	cmp	r0, r3
  405840:	d802      	bhi.n	405848 <__sfvwrite_r+0x1a8>
  405842:	6963      	ldr	r3, [r4, #20]
  405844:	429f      	cmp	r7, r3
  405846:	d25d      	bcs.n	405904 <__sfvwrite_r+0x264>
  405848:	45b8      	cmp	r8, r7
  40584a:	bf28      	it	cs
  40584c:	46b8      	movcs	r8, r7
  40584e:	4642      	mov	r2, r8
  405850:	4649      	mov	r1, r9
  405852:	f000 f9bd 	bl	405bd0 <memmove>
  405856:	68a3      	ldr	r3, [r4, #8]
  405858:	6822      	ldr	r2, [r4, #0]
  40585a:	eba3 0308 	sub.w	r3, r3, r8
  40585e:	4442      	add	r2, r8
  405860:	60a3      	str	r3, [r4, #8]
  405862:	6022      	str	r2, [r4, #0]
  405864:	b10b      	cbz	r3, 40586a <__sfvwrite_r+0x1ca>
  405866:	46c2      	mov	sl, r8
  405868:	e779      	b.n	40575e <__sfvwrite_r+0xbe>
  40586a:	4621      	mov	r1, r4
  40586c:	9800      	ldr	r0, [sp, #0]
  40586e:	f7ff fcb3 	bl	4051d8 <_fflush_r>
  405872:	2800      	cmp	r0, #0
  405874:	d192      	bne.n	40579c <__sfvwrite_r+0xfc>
  405876:	46c2      	mov	sl, r8
  405878:	e771      	b.n	40575e <__sfvwrite_r+0xbe>
  40587a:	465a      	mov	r2, fp
  40587c:	4629      	mov	r1, r5
  40587e:	f000 f9a7 	bl	405bd0 <memmove>
  405882:	68a2      	ldr	r2, [r4, #8]
  405884:	6823      	ldr	r3, [r4, #0]
  405886:	eba2 020b 	sub.w	r2, r2, fp
  40588a:	445b      	add	r3, fp
  40588c:	60a2      	str	r2, [r4, #8]
  40588e:	6023      	str	r3, [r4, #0]
  405890:	e7af      	b.n	4057f2 <__sfvwrite_r+0x152>
  405892:	6820      	ldr	r0, [r4, #0]
  405894:	46b8      	mov	r8, r7
  405896:	46ba      	mov	sl, r7
  405898:	46bb      	mov	fp, r7
  40589a:	e755      	b.n	405748 <__sfvwrite_r+0xa8>
  40589c:	6962      	ldr	r2, [r4, #20]
  40589e:	6820      	ldr	r0, [r4, #0]
  4058a0:	6921      	ldr	r1, [r4, #16]
  4058a2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4058a6:	eba0 0a01 	sub.w	sl, r0, r1
  4058aa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4058ae:	f10a 0001 	add.w	r0, sl, #1
  4058b2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4058b6:	4438      	add	r0, r7
  4058b8:	4540      	cmp	r0, r8
  4058ba:	4642      	mov	r2, r8
  4058bc:	bf84      	itt	hi
  4058be:	4680      	movhi	r8, r0
  4058c0:	4642      	movhi	r2, r8
  4058c2:	055b      	lsls	r3, r3, #21
  4058c4:	d544      	bpl.n	405950 <__sfvwrite_r+0x2b0>
  4058c6:	4611      	mov	r1, r2
  4058c8:	9800      	ldr	r0, [sp, #0]
  4058ca:	f7fd ff9b 	bl	403804 <_malloc_r>
  4058ce:	4683      	mov	fp, r0
  4058d0:	2800      	cmp	r0, #0
  4058d2:	d055      	beq.n	405980 <__sfvwrite_r+0x2e0>
  4058d4:	4652      	mov	r2, sl
  4058d6:	6921      	ldr	r1, [r4, #16]
  4058d8:	f7fe fa44 	bl	403d64 <memcpy>
  4058dc:	89a3      	ldrh	r3, [r4, #12]
  4058de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4058e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4058e6:	81a3      	strh	r3, [r4, #12]
  4058e8:	eb0b 000a 	add.w	r0, fp, sl
  4058ec:	eba8 030a 	sub.w	r3, r8, sl
  4058f0:	f8c4 b010 	str.w	fp, [r4, #16]
  4058f4:	f8c4 8014 	str.w	r8, [r4, #20]
  4058f8:	6020      	str	r0, [r4, #0]
  4058fa:	60a3      	str	r3, [r4, #8]
  4058fc:	46b8      	mov	r8, r7
  4058fe:	46ba      	mov	sl, r7
  405900:	46bb      	mov	fp, r7
  405902:	e721      	b.n	405748 <__sfvwrite_r+0xa8>
  405904:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  405908:	42b9      	cmp	r1, r7
  40590a:	bf28      	it	cs
  40590c:	4639      	movcs	r1, r7
  40590e:	464a      	mov	r2, r9
  405910:	fb91 f1f3 	sdiv	r1, r1, r3
  405914:	9800      	ldr	r0, [sp, #0]
  405916:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405918:	fb03 f301 	mul.w	r3, r3, r1
  40591c:	69e1      	ldr	r1, [r4, #28]
  40591e:	47b0      	blx	r6
  405920:	f1b0 0a00 	subs.w	sl, r0, #0
  405924:	f73f af1b 	bgt.w	40575e <__sfvwrite_r+0xbe>
  405928:	e738      	b.n	40579c <__sfvwrite_r+0xfc>
  40592a:	461a      	mov	r2, r3
  40592c:	4629      	mov	r1, r5
  40592e:	9301      	str	r3, [sp, #4]
  405930:	f000 f94e 	bl	405bd0 <memmove>
  405934:	6822      	ldr	r2, [r4, #0]
  405936:	9b01      	ldr	r3, [sp, #4]
  405938:	9800      	ldr	r0, [sp, #0]
  40593a:	441a      	add	r2, r3
  40593c:	6022      	str	r2, [r4, #0]
  40593e:	4621      	mov	r1, r4
  405940:	f7ff fc4a 	bl	4051d8 <_fflush_r>
  405944:	9b01      	ldr	r3, [sp, #4]
  405946:	2800      	cmp	r0, #0
  405948:	f47f af28 	bne.w	40579c <__sfvwrite_r+0xfc>
  40594c:	461f      	mov	r7, r3
  40594e:	e750      	b.n	4057f2 <__sfvwrite_r+0x152>
  405950:	9800      	ldr	r0, [sp, #0]
  405952:	f000 f9a1 	bl	405c98 <_realloc_r>
  405956:	4683      	mov	fp, r0
  405958:	2800      	cmp	r0, #0
  40595a:	d1c5      	bne.n	4058e8 <__sfvwrite_r+0x248>
  40595c:	9d00      	ldr	r5, [sp, #0]
  40595e:	6921      	ldr	r1, [r4, #16]
  405960:	4628      	mov	r0, r5
  405962:	f7ff fdb7 	bl	4054d4 <_free_r>
  405966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40596a:	220c      	movs	r2, #12
  40596c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  405970:	602a      	str	r2, [r5, #0]
  405972:	e715      	b.n	4057a0 <__sfvwrite_r+0x100>
  405974:	f106 0901 	add.w	r9, r6, #1
  405978:	e722      	b.n	4057c0 <__sfvwrite_r+0x120>
  40597a:	f04f 30ff 	mov.w	r0, #4294967295
  40597e:	e6bf      	b.n	405700 <__sfvwrite_r+0x60>
  405980:	9a00      	ldr	r2, [sp, #0]
  405982:	230c      	movs	r3, #12
  405984:	6013      	str	r3, [r2, #0]
  405986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40598a:	e709      	b.n	4057a0 <__sfvwrite_r+0x100>
  40598c:	7ffffc00 	.word	0x7ffffc00

00405990 <_fwalk_reent>:
  405990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405994:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  405998:	d01f      	beq.n	4059da <_fwalk_reent+0x4a>
  40599a:	4688      	mov	r8, r1
  40599c:	4606      	mov	r6, r0
  40599e:	f04f 0900 	mov.w	r9, #0
  4059a2:	687d      	ldr	r5, [r7, #4]
  4059a4:	68bc      	ldr	r4, [r7, #8]
  4059a6:	3d01      	subs	r5, #1
  4059a8:	d411      	bmi.n	4059ce <_fwalk_reent+0x3e>
  4059aa:	89a3      	ldrh	r3, [r4, #12]
  4059ac:	2b01      	cmp	r3, #1
  4059ae:	f105 35ff 	add.w	r5, r5, #4294967295
  4059b2:	d908      	bls.n	4059c6 <_fwalk_reent+0x36>
  4059b4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4059b8:	3301      	adds	r3, #1
  4059ba:	4621      	mov	r1, r4
  4059bc:	4630      	mov	r0, r6
  4059be:	d002      	beq.n	4059c6 <_fwalk_reent+0x36>
  4059c0:	47c0      	blx	r8
  4059c2:	ea49 0900 	orr.w	r9, r9, r0
  4059c6:	1c6b      	adds	r3, r5, #1
  4059c8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4059cc:	d1ed      	bne.n	4059aa <_fwalk_reent+0x1a>
  4059ce:	683f      	ldr	r7, [r7, #0]
  4059d0:	2f00      	cmp	r7, #0
  4059d2:	d1e6      	bne.n	4059a2 <_fwalk_reent+0x12>
  4059d4:	4648      	mov	r0, r9
  4059d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4059da:	46b9      	mov	r9, r7
  4059dc:	4648      	mov	r0, r9
  4059de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4059e2:	bf00      	nop

004059e4 <__locale_mb_cur_max>:
  4059e4:	4b04      	ldr	r3, [pc, #16]	; (4059f8 <__locale_mb_cur_max+0x14>)
  4059e6:	4a05      	ldr	r2, [pc, #20]	; (4059fc <__locale_mb_cur_max+0x18>)
  4059e8:	681b      	ldr	r3, [r3, #0]
  4059ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4059ec:	2b00      	cmp	r3, #0
  4059ee:	bf08      	it	eq
  4059f0:	4613      	moveq	r3, r2
  4059f2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4059f6:	4770      	bx	lr
  4059f8:	20400014 	.word	0x20400014
  4059fc:	20400854 	.word	0x20400854

00405a00 <__retarget_lock_init_recursive>:
  405a00:	4770      	bx	lr
  405a02:	bf00      	nop

00405a04 <__retarget_lock_close_recursive>:
  405a04:	4770      	bx	lr
  405a06:	bf00      	nop

00405a08 <__retarget_lock_acquire_recursive>:
  405a08:	4770      	bx	lr
  405a0a:	bf00      	nop

00405a0c <__retarget_lock_release_recursive>:
  405a0c:	4770      	bx	lr
  405a0e:	bf00      	nop

00405a10 <__swhatbuf_r>:
  405a10:	b570      	push	{r4, r5, r6, lr}
  405a12:	460c      	mov	r4, r1
  405a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405a18:	2900      	cmp	r1, #0
  405a1a:	b090      	sub	sp, #64	; 0x40
  405a1c:	4615      	mov	r5, r2
  405a1e:	461e      	mov	r6, r3
  405a20:	db14      	blt.n	405a4c <__swhatbuf_r+0x3c>
  405a22:	aa01      	add	r2, sp, #4
  405a24:	f000 fc9e 	bl	406364 <_fstat_r>
  405a28:	2800      	cmp	r0, #0
  405a2a:	db0f      	blt.n	405a4c <__swhatbuf_r+0x3c>
  405a2c:	9a02      	ldr	r2, [sp, #8]
  405a2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405a32:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  405a36:	fab2 f282 	clz	r2, r2
  405a3a:	0952      	lsrs	r2, r2, #5
  405a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405a40:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405a44:	6032      	str	r2, [r6, #0]
  405a46:	602b      	str	r3, [r5, #0]
  405a48:	b010      	add	sp, #64	; 0x40
  405a4a:	bd70      	pop	{r4, r5, r6, pc}
  405a4c:	89a2      	ldrh	r2, [r4, #12]
  405a4e:	2300      	movs	r3, #0
  405a50:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  405a54:	6033      	str	r3, [r6, #0]
  405a56:	d004      	beq.n	405a62 <__swhatbuf_r+0x52>
  405a58:	2240      	movs	r2, #64	; 0x40
  405a5a:	4618      	mov	r0, r3
  405a5c:	602a      	str	r2, [r5, #0]
  405a5e:	b010      	add	sp, #64	; 0x40
  405a60:	bd70      	pop	{r4, r5, r6, pc}
  405a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405a66:	602b      	str	r3, [r5, #0]
  405a68:	b010      	add	sp, #64	; 0x40
  405a6a:	bd70      	pop	{r4, r5, r6, pc}

00405a6c <__smakebuf_r>:
  405a6c:	898a      	ldrh	r2, [r1, #12]
  405a6e:	0792      	lsls	r2, r2, #30
  405a70:	460b      	mov	r3, r1
  405a72:	d506      	bpl.n	405a82 <__smakebuf_r+0x16>
  405a74:	f101 0243 	add.w	r2, r1, #67	; 0x43
  405a78:	2101      	movs	r1, #1
  405a7a:	601a      	str	r2, [r3, #0]
  405a7c:	611a      	str	r2, [r3, #16]
  405a7e:	6159      	str	r1, [r3, #20]
  405a80:	4770      	bx	lr
  405a82:	b5f0      	push	{r4, r5, r6, r7, lr}
  405a84:	b083      	sub	sp, #12
  405a86:	ab01      	add	r3, sp, #4
  405a88:	466a      	mov	r2, sp
  405a8a:	460c      	mov	r4, r1
  405a8c:	4606      	mov	r6, r0
  405a8e:	f7ff ffbf 	bl	405a10 <__swhatbuf_r>
  405a92:	9900      	ldr	r1, [sp, #0]
  405a94:	4605      	mov	r5, r0
  405a96:	4630      	mov	r0, r6
  405a98:	f7fd feb4 	bl	403804 <_malloc_r>
  405a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405aa0:	b1d8      	cbz	r0, 405ada <__smakebuf_r+0x6e>
  405aa2:	9a01      	ldr	r2, [sp, #4]
  405aa4:	4f15      	ldr	r7, [pc, #84]	; (405afc <__smakebuf_r+0x90>)
  405aa6:	9900      	ldr	r1, [sp, #0]
  405aa8:	63f7      	str	r7, [r6, #60]	; 0x3c
  405aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405aae:	81a3      	strh	r3, [r4, #12]
  405ab0:	6020      	str	r0, [r4, #0]
  405ab2:	6120      	str	r0, [r4, #16]
  405ab4:	6161      	str	r1, [r4, #20]
  405ab6:	b91a      	cbnz	r2, 405ac0 <__smakebuf_r+0x54>
  405ab8:	432b      	orrs	r3, r5
  405aba:	81a3      	strh	r3, [r4, #12]
  405abc:	b003      	add	sp, #12
  405abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405ac0:	4630      	mov	r0, r6
  405ac2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405ac6:	f000 fc61 	bl	40638c <_isatty_r>
  405aca:	b1a0      	cbz	r0, 405af6 <__smakebuf_r+0x8a>
  405acc:	89a3      	ldrh	r3, [r4, #12]
  405ace:	f023 0303 	bic.w	r3, r3, #3
  405ad2:	f043 0301 	orr.w	r3, r3, #1
  405ad6:	b21b      	sxth	r3, r3
  405ad8:	e7ee      	b.n	405ab8 <__smakebuf_r+0x4c>
  405ada:	059a      	lsls	r2, r3, #22
  405adc:	d4ee      	bmi.n	405abc <__smakebuf_r+0x50>
  405ade:	f023 0303 	bic.w	r3, r3, #3
  405ae2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405ae6:	f043 0302 	orr.w	r3, r3, #2
  405aea:	2101      	movs	r1, #1
  405aec:	81a3      	strh	r3, [r4, #12]
  405aee:	6022      	str	r2, [r4, #0]
  405af0:	6122      	str	r2, [r4, #16]
  405af2:	6161      	str	r1, [r4, #20]
  405af4:	e7e2      	b.n	405abc <__smakebuf_r+0x50>
  405af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405afa:	e7dd      	b.n	405ab8 <__smakebuf_r+0x4c>
  405afc:	0040522d 	.word	0x0040522d

00405b00 <__ascii_mbtowc>:
  405b00:	b082      	sub	sp, #8
  405b02:	b149      	cbz	r1, 405b18 <__ascii_mbtowc+0x18>
  405b04:	b15a      	cbz	r2, 405b1e <__ascii_mbtowc+0x1e>
  405b06:	b16b      	cbz	r3, 405b24 <__ascii_mbtowc+0x24>
  405b08:	7813      	ldrb	r3, [r2, #0]
  405b0a:	600b      	str	r3, [r1, #0]
  405b0c:	7812      	ldrb	r2, [r2, #0]
  405b0e:	1c10      	adds	r0, r2, #0
  405b10:	bf18      	it	ne
  405b12:	2001      	movne	r0, #1
  405b14:	b002      	add	sp, #8
  405b16:	4770      	bx	lr
  405b18:	a901      	add	r1, sp, #4
  405b1a:	2a00      	cmp	r2, #0
  405b1c:	d1f3      	bne.n	405b06 <__ascii_mbtowc+0x6>
  405b1e:	4610      	mov	r0, r2
  405b20:	b002      	add	sp, #8
  405b22:	4770      	bx	lr
  405b24:	f06f 0001 	mvn.w	r0, #1
  405b28:	e7f4      	b.n	405b14 <__ascii_mbtowc+0x14>
  405b2a:	bf00      	nop
  405b2c:	0000      	movs	r0, r0
	...

00405b30 <memchr>:
  405b30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405b34:	2a10      	cmp	r2, #16
  405b36:	db2b      	blt.n	405b90 <memchr+0x60>
  405b38:	f010 0f07 	tst.w	r0, #7
  405b3c:	d008      	beq.n	405b50 <memchr+0x20>
  405b3e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405b42:	3a01      	subs	r2, #1
  405b44:	428b      	cmp	r3, r1
  405b46:	d02d      	beq.n	405ba4 <memchr+0x74>
  405b48:	f010 0f07 	tst.w	r0, #7
  405b4c:	b342      	cbz	r2, 405ba0 <memchr+0x70>
  405b4e:	d1f6      	bne.n	405b3e <memchr+0xe>
  405b50:	b4f0      	push	{r4, r5, r6, r7}
  405b52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405b56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405b5a:	f022 0407 	bic.w	r4, r2, #7
  405b5e:	f07f 0700 	mvns.w	r7, #0
  405b62:	2300      	movs	r3, #0
  405b64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405b68:	3c08      	subs	r4, #8
  405b6a:	ea85 0501 	eor.w	r5, r5, r1
  405b6e:	ea86 0601 	eor.w	r6, r6, r1
  405b72:	fa85 f547 	uadd8	r5, r5, r7
  405b76:	faa3 f587 	sel	r5, r3, r7
  405b7a:	fa86 f647 	uadd8	r6, r6, r7
  405b7e:	faa5 f687 	sel	r6, r5, r7
  405b82:	b98e      	cbnz	r6, 405ba8 <memchr+0x78>
  405b84:	d1ee      	bne.n	405b64 <memchr+0x34>
  405b86:	bcf0      	pop	{r4, r5, r6, r7}
  405b88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405b8c:	f002 0207 	and.w	r2, r2, #7
  405b90:	b132      	cbz	r2, 405ba0 <memchr+0x70>
  405b92:	f810 3b01 	ldrb.w	r3, [r0], #1
  405b96:	3a01      	subs	r2, #1
  405b98:	ea83 0301 	eor.w	r3, r3, r1
  405b9c:	b113      	cbz	r3, 405ba4 <memchr+0x74>
  405b9e:	d1f8      	bne.n	405b92 <memchr+0x62>
  405ba0:	2000      	movs	r0, #0
  405ba2:	4770      	bx	lr
  405ba4:	3801      	subs	r0, #1
  405ba6:	4770      	bx	lr
  405ba8:	2d00      	cmp	r5, #0
  405baa:	bf06      	itte	eq
  405bac:	4635      	moveq	r5, r6
  405bae:	3803      	subeq	r0, #3
  405bb0:	3807      	subne	r0, #7
  405bb2:	f015 0f01 	tst.w	r5, #1
  405bb6:	d107      	bne.n	405bc8 <memchr+0x98>
  405bb8:	3001      	adds	r0, #1
  405bba:	f415 7f80 	tst.w	r5, #256	; 0x100
  405bbe:	bf02      	ittt	eq
  405bc0:	3001      	addeq	r0, #1
  405bc2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405bc6:	3001      	addeq	r0, #1
  405bc8:	bcf0      	pop	{r4, r5, r6, r7}
  405bca:	3801      	subs	r0, #1
  405bcc:	4770      	bx	lr
  405bce:	bf00      	nop

00405bd0 <memmove>:
  405bd0:	4288      	cmp	r0, r1
  405bd2:	b5f0      	push	{r4, r5, r6, r7, lr}
  405bd4:	d90d      	bls.n	405bf2 <memmove+0x22>
  405bd6:	188b      	adds	r3, r1, r2
  405bd8:	4298      	cmp	r0, r3
  405bda:	d20a      	bcs.n	405bf2 <memmove+0x22>
  405bdc:	1884      	adds	r4, r0, r2
  405bde:	2a00      	cmp	r2, #0
  405be0:	d051      	beq.n	405c86 <memmove+0xb6>
  405be2:	4622      	mov	r2, r4
  405be4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405be8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  405bec:	4299      	cmp	r1, r3
  405bee:	d1f9      	bne.n	405be4 <memmove+0x14>
  405bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405bf2:	2a0f      	cmp	r2, #15
  405bf4:	d948      	bls.n	405c88 <memmove+0xb8>
  405bf6:	ea41 0300 	orr.w	r3, r1, r0
  405bfa:	079b      	lsls	r3, r3, #30
  405bfc:	d146      	bne.n	405c8c <memmove+0xbc>
  405bfe:	f100 0410 	add.w	r4, r0, #16
  405c02:	f101 0310 	add.w	r3, r1, #16
  405c06:	4615      	mov	r5, r2
  405c08:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405c0c:	f844 6c10 	str.w	r6, [r4, #-16]
  405c10:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405c14:	f844 6c0c 	str.w	r6, [r4, #-12]
  405c18:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405c1c:	f844 6c08 	str.w	r6, [r4, #-8]
  405c20:	3d10      	subs	r5, #16
  405c22:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405c26:	f844 6c04 	str.w	r6, [r4, #-4]
  405c2a:	2d0f      	cmp	r5, #15
  405c2c:	f103 0310 	add.w	r3, r3, #16
  405c30:	f104 0410 	add.w	r4, r4, #16
  405c34:	d8e8      	bhi.n	405c08 <memmove+0x38>
  405c36:	f1a2 0310 	sub.w	r3, r2, #16
  405c3a:	f023 030f 	bic.w	r3, r3, #15
  405c3e:	f002 0e0f 	and.w	lr, r2, #15
  405c42:	3310      	adds	r3, #16
  405c44:	f1be 0f03 	cmp.w	lr, #3
  405c48:	4419      	add	r1, r3
  405c4a:	4403      	add	r3, r0
  405c4c:	d921      	bls.n	405c92 <memmove+0xc2>
  405c4e:	1f1e      	subs	r6, r3, #4
  405c50:	460d      	mov	r5, r1
  405c52:	4674      	mov	r4, lr
  405c54:	3c04      	subs	r4, #4
  405c56:	f855 7b04 	ldr.w	r7, [r5], #4
  405c5a:	f846 7f04 	str.w	r7, [r6, #4]!
  405c5e:	2c03      	cmp	r4, #3
  405c60:	d8f8      	bhi.n	405c54 <memmove+0x84>
  405c62:	f1ae 0404 	sub.w	r4, lr, #4
  405c66:	f024 0403 	bic.w	r4, r4, #3
  405c6a:	3404      	adds	r4, #4
  405c6c:	4421      	add	r1, r4
  405c6e:	4423      	add	r3, r4
  405c70:	f002 0203 	and.w	r2, r2, #3
  405c74:	b162      	cbz	r2, 405c90 <memmove+0xc0>
  405c76:	3b01      	subs	r3, #1
  405c78:	440a      	add	r2, r1
  405c7a:	f811 4b01 	ldrb.w	r4, [r1], #1
  405c7e:	f803 4f01 	strb.w	r4, [r3, #1]!
  405c82:	428a      	cmp	r2, r1
  405c84:	d1f9      	bne.n	405c7a <memmove+0xaa>
  405c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405c88:	4603      	mov	r3, r0
  405c8a:	e7f3      	b.n	405c74 <memmove+0xa4>
  405c8c:	4603      	mov	r3, r0
  405c8e:	e7f2      	b.n	405c76 <memmove+0xa6>
  405c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405c92:	4672      	mov	r2, lr
  405c94:	e7ee      	b.n	405c74 <memmove+0xa4>
  405c96:	bf00      	nop

00405c98 <_realloc_r>:
  405c98:	2900      	cmp	r1, #0
  405c9a:	f000 8095 	beq.w	405dc8 <_realloc_r+0x130>
  405c9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405ca2:	460d      	mov	r5, r1
  405ca4:	4616      	mov	r6, r2
  405ca6:	b083      	sub	sp, #12
  405ca8:	4680      	mov	r8, r0
  405caa:	f106 070b 	add.w	r7, r6, #11
  405cae:	f7fe f941 	bl	403f34 <__malloc_lock>
  405cb2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  405cb6:	2f16      	cmp	r7, #22
  405cb8:	f02e 0403 	bic.w	r4, lr, #3
  405cbc:	f1a5 0908 	sub.w	r9, r5, #8
  405cc0:	d83c      	bhi.n	405d3c <_realloc_r+0xa4>
  405cc2:	2210      	movs	r2, #16
  405cc4:	4617      	mov	r7, r2
  405cc6:	42be      	cmp	r6, r7
  405cc8:	d83d      	bhi.n	405d46 <_realloc_r+0xae>
  405cca:	4294      	cmp	r4, r2
  405ccc:	da43      	bge.n	405d56 <_realloc_r+0xbe>
  405cce:	4bc4      	ldr	r3, [pc, #784]	; (405fe0 <_realloc_r+0x348>)
  405cd0:	6899      	ldr	r1, [r3, #8]
  405cd2:	eb09 0004 	add.w	r0, r9, r4
  405cd6:	4288      	cmp	r0, r1
  405cd8:	f000 80b4 	beq.w	405e44 <_realloc_r+0x1ac>
  405cdc:	6843      	ldr	r3, [r0, #4]
  405cde:	f023 0101 	bic.w	r1, r3, #1
  405ce2:	4401      	add	r1, r0
  405ce4:	6849      	ldr	r1, [r1, #4]
  405ce6:	07c9      	lsls	r1, r1, #31
  405ce8:	d54c      	bpl.n	405d84 <_realloc_r+0xec>
  405cea:	f01e 0f01 	tst.w	lr, #1
  405cee:	f000 809b 	beq.w	405e28 <_realloc_r+0x190>
  405cf2:	4631      	mov	r1, r6
  405cf4:	4640      	mov	r0, r8
  405cf6:	f7fd fd85 	bl	403804 <_malloc_r>
  405cfa:	4606      	mov	r6, r0
  405cfc:	2800      	cmp	r0, #0
  405cfe:	d03a      	beq.n	405d76 <_realloc_r+0xde>
  405d00:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405d04:	f023 0301 	bic.w	r3, r3, #1
  405d08:	444b      	add	r3, r9
  405d0a:	f1a0 0208 	sub.w	r2, r0, #8
  405d0e:	429a      	cmp	r2, r3
  405d10:	f000 8121 	beq.w	405f56 <_realloc_r+0x2be>
  405d14:	1f22      	subs	r2, r4, #4
  405d16:	2a24      	cmp	r2, #36	; 0x24
  405d18:	f200 8107 	bhi.w	405f2a <_realloc_r+0x292>
  405d1c:	2a13      	cmp	r2, #19
  405d1e:	f200 80db 	bhi.w	405ed8 <_realloc_r+0x240>
  405d22:	4603      	mov	r3, r0
  405d24:	462a      	mov	r2, r5
  405d26:	6811      	ldr	r1, [r2, #0]
  405d28:	6019      	str	r1, [r3, #0]
  405d2a:	6851      	ldr	r1, [r2, #4]
  405d2c:	6059      	str	r1, [r3, #4]
  405d2e:	6892      	ldr	r2, [r2, #8]
  405d30:	609a      	str	r2, [r3, #8]
  405d32:	4629      	mov	r1, r5
  405d34:	4640      	mov	r0, r8
  405d36:	f7ff fbcd 	bl	4054d4 <_free_r>
  405d3a:	e01c      	b.n	405d76 <_realloc_r+0xde>
  405d3c:	f027 0707 	bic.w	r7, r7, #7
  405d40:	2f00      	cmp	r7, #0
  405d42:	463a      	mov	r2, r7
  405d44:	dabf      	bge.n	405cc6 <_realloc_r+0x2e>
  405d46:	2600      	movs	r6, #0
  405d48:	230c      	movs	r3, #12
  405d4a:	4630      	mov	r0, r6
  405d4c:	f8c8 3000 	str.w	r3, [r8]
  405d50:	b003      	add	sp, #12
  405d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d56:	462e      	mov	r6, r5
  405d58:	1be3      	subs	r3, r4, r7
  405d5a:	2b0f      	cmp	r3, #15
  405d5c:	d81e      	bhi.n	405d9c <_realloc_r+0x104>
  405d5e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405d62:	f003 0301 	and.w	r3, r3, #1
  405d66:	4323      	orrs	r3, r4
  405d68:	444c      	add	r4, r9
  405d6a:	f8c9 3004 	str.w	r3, [r9, #4]
  405d6e:	6863      	ldr	r3, [r4, #4]
  405d70:	f043 0301 	orr.w	r3, r3, #1
  405d74:	6063      	str	r3, [r4, #4]
  405d76:	4640      	mov	r0, r8
  405d78:	f7fe f8e2 	bl	403f40 <__malloc_unlock>
  405d7c:	4630      	mov	r0, r6
  405d7e:	b003      	add	sp, #12
  405d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d84:	f023 0303 	bic.w	r3, r3, #3
  405d88:	18e1      	adds	r1, r4, r3
  405d8a:	4291      	cmp	r1, r2
  405d8c:	db1f      	blt.n	405dce <_realloc_r+0x136>
  405d8e:	68c3      	ldr	r3, [r0, #12]
  405d90:	6882      	ldr	r2, [r0, #8]
  405d92:	462e      	mov	r6, r5
  405d94:	60d3      	str	r3, [r2, #12]
  405d96:	460c      	mov	r4, r1
  405d98:	609a      	str	r2, [r3, #8]
  405d9a:	e7dd      	b.n	405d58 <_realloc_r+0xc0>
  405d9c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  405da0:	eb09 0107 	add.w	r1, r9, r7
  405da4:	f002 0201 	and.w	r2, r2, #1
  405da8:	444c      	add	r4, r9
  405daa:	f043 0301 	orr.w	r3, r3, #1
  405dae:	4317      	orrs	r7, r2
  405db0:	f8c9 7004 	str.w	r7, [r9, #4]
  405db4:	604b      	str	r3, [r1, #4]
  405db6:	6863      	ldr	r3, [r4, #4]
  405db8:	f043 0301 	orr.w	r3, r3, #1
  405dbc:	3108      	adds	r1, #8
  405dbe:	6063      	str	r3, [r4, #4]
  405dc0:	4640      	mov	r0, r8
  405dc2:	f7ff fb87 	bl	4054d4 <_free_r>
  405dc6:	e7d6      	b.n	405d76 <_realloc_r+0xde>
  405dc8:	4611      	mov	r1, r2
  405dca:	f7fd bd1b 	b.w	403804 <_malloc_r>
  405dce:	f01e 0f01 	tst.w	lr, #1
  405dd2:	d18e      	bne.n	405cf2 <_realloc_r+0x5a>
  405dd4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405dd8:	eba9 0a01 	sub.w	sl, r9, r1
  405ddc:	f8da 1004 	ldr.w	r1, [sl, #4]
  405de0:	f021 0103 	bic.w	r1, r1, #3
  405de4:	440b      	add	r3, r1
  405de6:	4423      	add	r3, r4
  405de8:	4293      	cmp	r3, r2
  405dea:	db25      	blt.n	405e38 <_realloc_r+0x1a0>
  405dec:	68c2      	ldr	r2, [r0, #12]
  405dee:	6881      	ldr	r1, [r0, #8]
  405df0:	4656      	mov	r6, sl
  405df2:	60ca      	str	r2, [r1, #12]
  405df4:	6091      	str	r1, [r2, #8]
  405df6:	f8da 100c 	ldr.w	r1, [sl, #12]
  405dfa:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405dfe:	1f22      	subs	r2, r4, #4
  405e00:	2a24      	cmp	r2, #36	; 0x24
  405e02:	60c1      	str	r1, [r0, #12]
  405e04:	6088      	str	r0, [r1, #8]
  405e06:	f200 8094 	bhi.w	405f32 <_realloc_r+0x29a>
  405e0a:	2a13      	cmp	r2, #19
  405e0c:	d96f      	bls.n	405eee <_realloc_r+0x256>
  405e0e:	6829      	ldr	r1, [r5, #0]
  405e10:	f8ca 1008 	str.w	r1, [sl, #8]
  405e14:	6869      	ldr	r1, [r5, #4]
  405e16:	f8ca 100c 	str.w	r1, [sl, #12]
  405e1a:	2a1b      	cmp	r2, #27
  405e1c:	f200 80a2 	bhi.w	405f64 <_realloc_r+0x2cc>
  405e20:	3508      	adds	r5, #8
  405e22:	f10a 0210 	add.w	r2, sl, #16
  405e26:	e063      	b.n	405ef0 <_realloc_r+0x258>
  405e28:	f855 3c08 	ldr.w	r3, [r5, #-8]
  405e2c:	eba9 0a03 	sub.w	sl, r9, r3
  405e30:	f8da 1004 	ldr.w	r1, [sl, #4]
  405e34:	f021 0103 	bic.w	r1, r1, #3
  405e38:	1863      	adds	r3, r4, r1
  405e3a:	4293      	cmp	r3, r2
  405e3c:	f6ff af59 	blt.w	405cf2 <_realloc_r+0x5a>
  405e40:	4656      	mov	r6, sl
  405e42:	e7d8      	b.n	405df6 <_realloc_r+0x15e>
  405e44:	6841      	ldr	r1, [r0, #4]
  405e46:	f021 0b03 	bic.w	fp, r1, #3
  405e4a:	44a3      	add	fp, r4
  405e4c:	f107 0010 	add.w	r0, r7, #16
  405e50:	4583      	cmp	fp, r0
  405e52:	da56      	bge.n	405f02 <_realloc_r+0x26a>
  405e54:	f01e 0f01 	tst.w	lr, #1
  405e58:	f47f af4b 	bne.w	405cf2 <_realloc_r+0x5a>
  405e5c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405e60:	eba9 0a01 	sub.w	sl, r9, r1
  405e64:	f8da 1004 	ldr.w	r1, [sl, #4]
  405e68:	f021 0103 	bic.w	r1, r1, #3
  405e6c:	448b      	add	fp, r1
  405e6e:	4558      	cmp	r0, fp
  405e70:	dce2      	bgt.n	405e38 <_realloc_r+0x1a0>
  405e72:	4656      	mov	r6, sl
  405e74:	f8da 100c 	ldr.w	r1, [sl, #12]
  405e78:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405e7c:	1f22      	subs	r2, r4, #4
  405e7e:	2a24      	cmp	r2, #36	; 0x24
  405e80:	60c1      	str	r1, [r0, #12]
  405e82:	6088      	str	r0, [r1, #8]
  405e84:	f200 808f 	bhi.w	405fa6 <_realloc_r+0x30e>
  405e88:	2a13      	cmp	r2, #19
  405e8a:	f240 808a 	bls.w	405fa2 <_realloc_r+0x30a>
  405e8e:	6829      	ldr	r1, [r5, #0]
  405e90:	f8ca 1008 	str.w	r1, [sl, #8]
  405e94:	6869      	ldr	r1, [r5, #4]
  405e96:	f8ca 100c 	str.w	r1, [sl, #12]
  405e9a:	2a1b      	cmp	r2, #27
  405e9c:	f200 808a 	bhi.w	405fb4 <_realloc_r+0x31c>
  405ea0:	3508      	adds	r5, #8
  405ea2:	f10a 0210 	add.w	r2, sl, #16
  405ea6:	6829      	ldr	r1, [r5, #0]
  405ea8:	6011      	str	r1, [r2, #0]
  405eaa:	6869      	ldr	r1, [r5, #4]
  405eac:	6051      	str	r1, [r2, #4]
  405eae:	68a9      	ldr	r1, [r5, #8]
  405eb0:	6091      	str	r1, [r2, #8]
  405eb2:	eb0a 0107 	add.w	r1, sl, r7
  405eb6:	ebab 0207 	sub.w	r2, fp, r7
  405eba:	f042 0201 	orr.w	r2, r2, #1
  405ebe:	6099      	str	r1, [r3, #8]
  405ec0:	604a      	str	r2, [r1, #4]
  405ec2:	f8da 3004 	ldr.w	r3, [sl, #4]
  405ec6:	f003 0301 	and.w	r3, r3, #1
  405eca:	431f      	orrs	r7, r3
  405ecc:	4640      	mov	r0, r8
  405ece:	f8ca 7004 	str.w	r7, [sl, #4]
  405ed2:	f7fe f835 	bl	403f40 <__malloc_unlock>
  405ed6:	e751      	b.n	405d7c <_realloc_r+0xe4>
  405ed8:	682b      	ldr	r3, [r5, #0]
  405eda:	6003      	str	r3, [r0, #0]
  405edc:	686b      	ldr	r3, [r5, #4]
  405ede:	6043      	str	r3, [r0, #4]
  405ee0:	2a1b      	cmp	r2, #27
  405ee2:	d82d      	bhi.n	405f40 <_realloc_r+0x2a8>
  405ee4:	f100 0308 	add.w	r3, r0, #8
  405ee8:	f105 0208 	add.w	r2, r5, #8
  405eec:	e71b      	b.n	405d26 <_realloc_r+0x8e>
  405eee:	4632      	mov	r2, r6
  405ef0:	6829      	ldr	r1, [r5, #0]
  405ef2:	6011      	str	r1, [r2, #0]
  405ef4:	6869      	ldr	r1, [r5, #4]
  405ef6:	6051      	str	r1, [r2, #4]
  405ef8:	68a9      	ldr	r1, [r5, #8]
  405efa:	6091      	str	r1, [r2, #8]
  405efc:	461c      	mov	r4, r3
  405efe:	46d1      	mov	r9, sl
  405f00:	e72a      	b.n	405d58 <_realloc_r+0xc0>
  405f02:	eb09 0107 	add.w	r1, r9, r7
  405f06:	ebab 0b07 	sub.w	fp, fp, r7
  405f0a:	f04b 0201 	orr.w	r2, fp, #1
  405f0e:	6099      	str	r1, [r3, #8]
  405f10:	604a      	str	r2, [r1, #4]
  405f12:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405f16:	f003 0301 	and.w	r3, r3, #1
  405f1a:	431f      	orrs	r7, r3
  405f1c:	4640      	mov	r0, r8
  405f1e:	f845 7c04 	str.w	r7, [r5, #-4]
  405f22:	f7fe f80d 	bl	403f40 <__malloc_unlock>
  405f26:	462e      	mov	r6, r5
  405f28:	e728      	b.n	405d7c <_realloc_r+0xe4>
  405f2a:	4629      	mov	r1, r5
  405f2c:	f7ff fe50 	bl	405bd0 <memmove>
  405f30:	e6ff      	b.n	405d32 <_realloc_r+0x9a>
  405f32:	4629      	mov	r1, r5
  405f34:	4630      	mov	r0, r6
  405f36:	461c      	mov	r4, r3
  405f38:	46d1      	mov	r9, sl
  405f3a:	f7ff fe49 	bl	405bd0 <memmove>
  405f3e:	e70b      	b.n	405d58 <_realloc_r+0xc0>
  405f40:	68ab      	ldr	r3, [r5, #8]
  405f42:	6083      	str	r3, [r0, #8]
  405f44:	68eb      	ldr	r3, [r5, #12]
  405f46:	60c3      	str	r3, [r0, #12]
  405f48:	2a24      	cmp	r2, #36	; 0x24
  405f4a:	d017      	beq.n	405f7c <_realloc_r+0x2e4>
  405f4c:	f100 0310 	add.w	r3, r0, #16
  405f50:	f105 0210 	add.w	r2, r5, #16
  405f54:	e6e7      	b.n	405d26 <_realloc_r+0x8e>
  405f56:	f850 3c04 	ldr.w	r3, [r0, #-4]
  405f5a:	f023 0303 	bic.w	r3, r3, #3
  405f5e:	441c      	add	r4, r3
  405f60:	462e      	mov	r6, r5
  405f62:	e6f9      	b.n	405d58 <_realloc_r+0xc0>
  405f64:	68a9      	ldr	r1, [r5, #8]
  405f66:	f8ca 1010 	str.w	r1, [sl, #16]
  405f6a:	68e9      	ldr	r1, [r5, #12]
  405f6c:	f8ca 1014 	str.w	r1, [sl, #20]
  405f70:	2a24      	cmp	r2, #36	; 0x24
  405f72:	d00c      	beq.n	405f8e <_realloc_r+0x2f6>
  405f74:	3510      	adds	r5, #16
  405f76:	f10a 0218 	add.w	r2, sl, #24
  405f7a:	e7b9      	b.n	405ef0 <_realloc_r+0x258>
  405f7c:	692b      	ldr	r3, [r5, #16]
  405f7e:	6103      	str	r3, [r0, #16]
  405f80:	696b      	ldr	r3, [r5, #20]
  405f82:	6143      	str	r3, [r0, #20]
  405f84:	f105 0218 	add.w	r2, r5, #24
  405f88:	f100 0318 	add.w	r3, r0, #24
  405f8c:	e6cb      	b.n	405d26 <_realloc_r+0x8e>
  405f8e:	692a      	ldr	r2, [r5, #16]
  405f90:	f8ca 2018 	str.w	r2, [sl, #24]
  405f94:	696a      	ldr	r2, [r5, #20]
  405f96:	f8ca 201c 	str.w	r2, [sl, #28]
  405f9a:	3518      	adds	r5, #24
  405f9c:	f10a 0220 	add.w	r2, sl, #32
  405fa0:	e7a6      	b.n	405ef0 <_realloc_r+0x258>
  405fa2:	4632      	mov	r2, r6
  405fa4:	e77f      	b.n	405ea6 <_realloc_r+0x20e>
  405fa6:	4629      	mov	r1, r5
  405fa8:	4630      	mov	r0, r6
  405faa:	9301      	str	r3, [sp, #4]
  405fac:	f7ff fe10 	bl	405bd0 <memmove>
  405fb0:	9b01      	ldr	r3, [sp, #4]
  405fb2:	e77e      	b.n	405eb2 <_realloc_r+0x21a>
  405fb4:	68a9      	ldr	r1, [r5, #8]
  405fb6:	f8ca 1010 	str.w	r1, [sl, #16]
  405fba:	68e9      	ldr	r1, [r5, #12]
  405fbc:	f8ca 1014 	str.w	r1, [sl, #20]
  405fc0:	2a24      	cmp	r2, #36	; 0x24
  405fc2:	d003      	beq.n	405fcc <_realloc_r+0x334>
  405fc4:	3510      	adds	r5, #16
  405fc6:	f10a 0218 	add.w	r2, sl, #24
  405fca:	e76c      	b.n	405ea6 <_realloc_r+0x20e>
  405fcc:	692a      	ldr	r2, [r5, #16]
  405fce:	f8ca 2018 	str.w	r2, [sl, #24]
  405fd2:	696a      	ldr	r2, [r5, #20]
  405fd4:	f8ca 201c 	str.w	r2, [sl, #28]
  405fd8:	3518      	adds	r5, #24
  405fda:	f10a 0220 	add.w	r2, sl, #32
  405fde:	e762      	b.n	405ea6 <_realloc_r+0x20e>
  405fe0:	20400440 	.word	0x20400440

00405fe4 <__sread>:
  405fe4:	b510      	push	{r4, lr}
  405fe6:	460c      	mov	r4, r1
  405fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405fec:	f000 f9f6 	bl	4063dc <_read_r>
  405ff0:	2800      	cmp	r0, #0
  405ff2:	db03      	blt.n	405ffc <__sread+0x18>
  405ff4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  405ff6:	4403      	add	r3, r0
  405ff8:	6523      	str	r3, [r4, #80]	; 0x50
  405ffa:	bd10      	pop	{r4, pc}
  405ffc:	89a3      	ldrh	r3, [r4, #12]
  405ffe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406002:	81a3      	strh	r3, [r4, #12]
  406004:	bd10      	pop	{r4, pc}
  406006:	bf00      	nop

00406008 <__swrite>:
  406008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40600c:	4616      	mov	r6, r2
  40600e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406012:	461f      	mov	r7, r3
  406014:	05d3      	lsls	r3, r2, #23
  406016:	460c      	mov	r4, r1
  406018:	4605      	mov	r5, r0
  40601a:	d507      	bpl.n	40602c <__swrite+0x24>
  40601c:	2200      	movs	r2, #0
  40601e:	2302      	movs	r3, #2
  406020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406024:	f000 f9c4 	bl	4063b0 <_lseek_r>
  406028:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40602c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406030:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406034:	81a2      	strh	r2, [r4, #12]
  406036:	463b      	mov	r3, r7
  406038:	4632      	mov	r2, r6
  40603a:	4628      	mov	r0, r5
  40603c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406040:	f000 b8a4 	b.w	40618c <_write_r>

00406044 <__sseek>:
  406044:	b510      	push	{r4, lr}
  406046:	460c      	mov	r4, r1
  406048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40604c:	f000 f9b0 	bl	4063b0 <_lseek_r>
  406050:	89a3      	ldrh	r3, [r4, #12]
  406052:	1c42      	adds	r2, r0, #1
  406054:	bf0e      	itee	eq
  406056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40605a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40605e:	6520      	strne	r0, [r4, #80]	; 0x50
  406060:	81a3      	strh	r3, [r4, #12]
  406062:	bd10      	pop	{r4, pc}

00406064 <__sclose>:
  406064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406068:	f000 b908 	b.w	40627c <_close_r>

0040606c <__swbuf_r>:
  40606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40606e:	460d      	mov	r5, r1
  406070:	4614      	mov	r4, r2
  406072:	4606      	mov	r6, r0
  406074:	b110      	cbz	r0, 40607c <__swbuf_r+0x10>
  406076:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406078:	2b00      	cmp	r3, #0
  40607a:	d04b      	beq.n	406114 <__swbuf_r+0xa8>
  40607c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406080:	69a3      	ldr	r3, [r4, #24]
  406082:	60a3      	str	r3, [r4, #8]
  406084:	b291      	uxth	r1, r2
  406086:	0708      	lsls	r0, r1, #28
  406088:	d539      	bpl.n	4060fe <__swbuf_r+0x92>
  40608a:	6923      	ldr	r3, [r4, #16]
  40608c:	2b00      	cmp	r3, #0
  40608e:	d036      	beq.n	4060fe <__swbuf_r+0x92>
  406090:	b2ed      	uxtb	r5, r5
  406092:	0489      	lsls	r1, r1, #18
  406094:	462f      	mov	r7, r5
  406096:	d515      	bpl.n	4060c4 <__swbuf_r+0x58>
  406098:	6822      	ldr	r2, [r4, #0]
  40609a:	6961      	ldr	r1, [r4, #20]
  40609c:	1ad3      	subs	r3, r2, r3
  40609e:	428b      	cmp	r3, r1
  4060a0:	da1c      	bge.n	4060dc <__swbuf_r+0x70>
  4060a2:	3301      	adds	r3, #1
  4060a4:	68a1      	ldr	r1, [r4, #8]
  4060a6:	1c50      	adds	r0, r2, #1
  4060a8:	3901      	subs	r1, #1
  4060aa:	60a1      	str	r1, [r4, #8]
  4060ac:	6020      	str	r0, [r4, #0]
  4060ae:	7015      	strb	r5, [r2, #0]
  4060b0:	6962      	ldr	r2, [r4, #20]
  4060b2:	429a      	cmp	r2, r3
  4060b4:	d01a      	beq.n	4060ec <__swbuf_r+0x80>
  4060b6:	89a3      	ldrh	r3, [r4, #12]
  4060b8:	07db      	lsls	r3, r3, #31
  4060ba:	d501      	bpl.n	4060c0 <__swbuf_r+0x54>
  4060bc:	2d0a      	cmp	r5, #10
  4060be:	d015      	beq.n	4060ec <__swbuf_r+0x80>
  4060c0:	4638      	mov	r0, r7
  4060c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4060c4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4060c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4060ca:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4060ce:	81a2      	strh	r2, [r4, #12]
  4060d0:	6822      	ldr	r2, [r4, #0]
  4060d2:	6661      	str	r1, [r4, #100]	; 0x64
  4060d4:	6961      	ldr	r1, [r4, #20]
  4060d6:	1ad3      	subs	r3, r2, r3
  4060d8:	428b      	cmp	r3, r1
  4060da:	dbe2      	blt.n	4060a2 <__swbuf_r+0x36>
  4060dc:	4621      	mov	r1, r4
  4060de:	4630      	mov	r0, r6
  4060e0:	f7ff f87a 	bl	4051d8 <_fflush_r>
  4060e4:	b940      	cbnz	r0, 4060f8 <__swbuf_r+0x8c>
  4060e6:	6822      	ldr	r2, [r4, #0]
  4060e8:	2301      	movs	r3, #1
  4060ea:	e7db      	b.n	4060a4 <__swbuf_r+0x38>
  4060ec:	4621      	mov	r1, r4
  4060ee:	4630      	mov	r0, r6
  4060f0:	f7ff f872 	bl	4051d8 <_fflush_r>
  4060f4:	2800      	cmp	r0, #0
  4060f6:	d0e3      	beq.n	4060c0 <__swbuf_r+0x54>
  4060f8:	f04f 37ff 	mov.w	r7, #4294967295
  4060fc:	e7e0      	b.n	4060c0 <__swbuf_r+0x54>
  4060fe:	4621      	mov	r1, r4
  406100:	4630      	mov	r0, r6
  406102:	f7fe ff55 	bl	404fb0 <__swsetup_r>
  406106:	2800      	cmp	r0, #0
  406108:	d1f6      	bne.n	4060f8 <__swbuf_r+0x8c>
  40610a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40610e:	6923      	ldr	r3, [r4, #16]
  406110:	b291      	uxth	r1, r2
  406112:	e7bd      	b.n	406090 <__swbuf_r+0x24>
  406114:	f7ff f8b8 	bl	405288 <__sinit>
  406118:	e7b0      	b.n	40607c <__swbuf_r+0x10>
  40611a:	bf00      	nop

0040611c <_wcrtomb_r>:
  40611c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40611e:	4606      	mov	r6, r0
  406120:	b085      	sub	sp, #20
  406122:	461f      	mov	r7, r3
  406124:	b189      	cbz	r1, 40614a <_wcrtomb_r+0x2e>
  406126:	4c10      	ldr	r4, [pc, #64]	; (406168 <_wcrtomb_r+0x4c>)
  406128:	4d10      	ldr	r5, [pc, #64]	; (40616c <_wcrtomb_r+0x50>)
  40612a:	6824      	ldr	r4, [r4, #0]
  40612c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40612e:	2c00      	cmp	r4, #0
  406130:	bf08      	it	eq
  406132:	462c      	moveq	r4, r5
  406134:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406138:	47a0      	blx	r4
  40613a:	1c43      	adds	r3, r0, #1
  40613c:	d103      	bne.n	406146 <_wcrtomb_r+0x2a>
  40613e:	2200      	movs	r2, #0
  406140:	238a      	movs	r3, #138	; 0x8a
  406142:	603a      	str	r2, [r7, #0]
  406144:	6033      	str	r3, [r6, #0]
  406146:	b005      	add	sp, #20
  406148:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40614a:	460c      	mov	r4, r1
  40614c:	4906      	ldr	r1, [pc, #24]	; (406168 <_wcrtomb_r+0x4c>)
  40614e:	4a07      	ldr	r2, [pc, #28]	; (40616c <_wcrtomb_r+0x50>)
  406150:	6809      	ldr	r1, [r1, #0]
  406152:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406154:	2900      	cmp	r1, #0
  406156:	bf08      	it	eq
  406158:	4611      	moveq	r1, r2
  40615a:	4622      	mov	r2, r4
  40615c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  406160:	a901      	add	r1, sp, #4
  406162:	47a0      	blx	r4
  406164:	e7e9      	b.n	40613a <_wcrtomb_r+0x1e>
  406166:	bf00      	nop
  406168:	20400014 	.word	0x20400014
  40616c:	20400854 	.word	0x20400854

00406170 <__ascii_wctomb>:
  406170:	b121      	cbz	r1, 40617c <__ascii_wctomb+0xc>
  406172:	2aff      	cmp	r2, #255	; 0xff
  406174:	d804      	bhi.n	406180 <__ascii_wctomb+0x10>
  406176:	700a      	strb	r2, [r1, #0]
  406178:	2001      	movs	r0, #1
  40617a:	4770      	bx	lr
  40617c:	4608      	mov	r0, r1
  40617e:	4770      	bx	lr
  406180:	238a      	movs	r3, #138	; 0x8a
  406182:	6003      	str	r3, [r0, #0]
  406184:	f04f 30ff 	mov.w	r0, #4294967295
  406188:	4770      	bx	lr
  40618a:	bf00      	nop

0040618c <_write_r>:
  40618c:	b570      	push	{r4, r5, r6, lr}
  40618e:	460d      	mov	r5, r1
  406190:	4c08      	ldr	r4, [pc, #32]	; (4061b4 <_write_r+0x28>)
  406192:	4611      	mov	r1, r2
  406194:	4606      	mov	r6, r0
  406196:	461a      	mov	r2, r3
  406198:	4628      	mov	r0, r5
  40619a:	2300      	movs	r3, #0
  40619c:	6023      	str	r3, [r4, #0]
  40619e:	f7fa f8c7 	bl	400330 <_write>
  4061a2:	1c43      	adds	r3, r0, #1
  4061a4:	d000      	beq.n	4061a8 <_write_r+0x1c>
  4061a6:	bd70      	pop	{r4, r5, r6, pc}
  4061a8:	6823      	ldr	r3, [r4, #0]
  4061aa:	2b00      	cmp	r3, #0
  4061ac:	d0fb      	beq.n	4061a6 <_write_r+0x1a>
  4061ae:	6033      	str	r3, [r6, #0]
  4061b0:	bd70      	pop	{r4, r5, r6, pc}
  4061b2:	bf00      	nop
  4061b4:	20400d14 	.word	0x20400d14

004061b8 <__register_exitproc>:
  4061b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4061bc:	4d2c      	ldr	r5, [pc, #176]	; (406270 <__register_exitproc+0xb8>)
  4061be:	4606      	mov	r6, r0
  4061c0:	6828      	ldr	r0, [r5, #0]
  4061c2:	4698      	mov	r8, r3
  4061c4:	460f      	mov	r7, r1
  4061c6:	4691      	mov	r9, r2
  4061c8:	f7ff fc1e 	bl	405a08 <__retarget_lock_acquire_recursive>
  4061cc:	4b29      	ldr	r3, [pc, #164]	; (406274 <__register_exitproc+0xbc>)
  4061ce:	681c      	ldr	r4, [r3, #0]
  4061d0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4061d4:	2b00      	cmp	r3, #0
  4061d6:	d03e      	beq.n	406256 <__register_exitproc+0x9e>
  4061d8:	685a      	ldr	r2, [r3, #4]
  4061da:	2a1f      	cmp	r2, #31
  4061dc:	dc1c      	bgt.n	406218 <__register_exitproc+0x60>
  4061de:	f102 0e01 	add.w	lr, r2, #1
  4061e2:	b176      	cbz	r6, 406202 <__register_exitproc+0x4a>
  4061e4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4061e8:	2401      	movs	r4, #1
  4061ea:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4061ee:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4061f2:	4094      	lsls	r4, r2
  4061f4:	4320      	orrs	r0, r4
  4061f6:	2e02      	cmp	r6, #2
  4061f8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4061fc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406200:	d023      	beq.n	40624a <__register_exitproc+0x92>
  406202:	3202      	adds	r2, #2
  406204:	f8c3 e004 	str.w	lr, [r3, #4]
  406208:	6828      	ldr	r0, [r5, #0]
  40620a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40620e:	f7ff fbfd 	bl	405a0c <__retarget_lock_release_recursive>
  406212:	2000      	movs	r0, #0
  406214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406218:	4b17      	ldr	r3, [pc, #92]	; (406278 <__register_exitproc+0xc0>)
  40621a:	b30b      	cbz	r3, 406260 <__register_exitproc+0xa8>
  40621c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406220:	f7fd fae0 	bl	4037e4 <malloc>
  406224:	4603      	mov	r3, r0
  406226:	b1d8      	cbz	r0, 406260 <__register_exitproc+0xa8>
  406228:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40622c:	6002      	str	r2, [r0, #0]
  40622e:	2100      	movs	r1, #0
  406230:	6041      	str	r1, [r0, #4]
  406232:	460a      	mov	r2, r1
  406234:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406238:	f04f 0e01 	mov.w	lr, #1
  40623c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406240:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406244:	2e00      	cmp	r6, #0
  406246:	d0dc      	beq.n	406202 <__register_exitproc+0x4a>
  406248:	e7cc      	b.n	4061e4 <__register_exitproc+0x2c>
  40624a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40624e:	430c      	orrs	r4, r1
  406250:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406254:	e7d5      	b.n	406202 <__register_exitproc+0x4a>
  406256:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40625a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40625e:	e7bb      	b.n	4061d8 <__register_exitproc+0x20>
  406260:	6828      	ldr	r0, [r5, #0]
  406262:	f7ff fbd3 	bl	405a0c <__retarget_lock_release_recursive>
  406266:	f04f 30ff 	mov.w	r0, #4294967295
  40626a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40626e:	bf00      	nop
  406270:	20400850 	.word	0x20400850
  406274:	0040653c 	.word	0x0040653c
  406278:	004037e5 	.word	0x004037e5

0040627c <_close_r>:
  40627c:	b538      	push	{r3, r4, r5, lr}
  40627e:	4c07      	ldr	r4, [pc, #28]	; (40629c <_close_r+0x20>)
  406280:	2300      	movs	r3, #0
  406282:	4605      	mov	r5, r0
  406284:	4608      	mov	r0, r1
  406286:	6023      	str	r3, [r4, #0]
  406288:	f7fa fefc 	bl	401084 <_close>
  40628c:	1c43      	adds	r3, r0, #1
  40628e:	d000      	beq.n	406292 <_close_r+0x16>
  406290:	bd38      	pop	{r3, r4, r5, pc}
  406292:	6823      	ldr	r3, [r4, #0]
  406294:	2b00      	cmp	r3, #0
  406296:	d0fb      	beq.n	406290 <_close_r+0x14>
  406298:	602b      	str	r3, [r5, #0]
  40629a:	bd38      	pop	{r3, r4, r5, pc}
  40629c:	20400d14 	.word	0x20400d14

004062a0 <_fclose_r>:
  4062a0:	b570      	push	{r4, r5, r6, lr}
  4062a2:	b159      	cbz	r1, 4062bc <_fclose_r+0x1c>
  4062a4:	4605      	mov	r5, r0
  4062a6:	460c      	mov	r4, r1
  4062a8:	b110      	cbz	r0, 4062b0 <_fclose_r+0x10>
  4062aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4062ac:	2b00      	cmp	r3, #0
  4062ae:	d03c      	beq.n	40632a <_fclose_r+0x8a>
  4062b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4062b2:	07d8      	lsls	r0, r3, #31
  4062b4:	d505      	bpl.n	4062c2 <_fclose_r+0x22>
  4062b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4062ba:	b92b      	cbnz	r3, 4062c8 <_fclose_r+0x28>
  4062bc:	2600      	movs	r6, #0
  4062be:	4630      	mov	r0, r6
  4062c0:	bd70      	pop	{r4, r5, r6, pc}
  4062c2:	89a3      	ldrh	r3, [r4, #12]
  4062c4:	0599      	lsls	r1, r3, #22
  4062c6:	d53c      	bpl.n	406342 <_fclose_r+0xa2>
  4062c8:	4621      	mov	r1, r4
  4062ca:	4628      	mov	r0, r5
  4062cc:	f7fe fee4 	bl	405098 <__sflush_r>
  4062d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4062d2:	4606      	mov	r6, r0
  4062d4:	b133      	cbz	r3, 4062e4 <_fclose_r+0x44>
  4062d6:	69e1      	ldr	r1, [r4, #28]
  4062d8:	4628      	mov	r0, r5
  4062da:	4798      	blx	r3
  4062dc:	2800      	cmp	r0, #0
  4062de:	bfb8      	it	lt
  4062e0:	f04f 36ff 	movlt.w	r6, #4294967295
  4062e4:	89a3      	ldrh	r3, [r4, #12]
  4062e6:	061a      	lsls	r2, r3, #24
  4062e8:	d422      	bmi.n	406330 <_fclose_r+0x90>
  4062ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4062ec:	b141      	cbz	r1, 406300 <_fclose_r+0x60>
  4062ee:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4062f2:	4299      	cmp	r1, r3
  4062f4:	d002      	beq.n	4062fc <_fclose_r+0x5c>
  4062f6:	4628      	mov	r0, r5
  4062f8:	f7ff f8ec 	bl	4054d4 <_free_r>
  4062fc:	2300      	movs	r3, #0
  4062fe:	6323      	str	r3, [r4, #48]	; 0x30
  406300:	6c61      	ldr	r1, [r4, #68]	; 0x44
  406302:	b121      	cbz	r1, 40630e <_fclose_r+0x6e>
  406304:	4628      	mov	r0, r5
  406306:	f7ff f8e5 	bl	4054d4 <_free_r>
  40630a:	2300      	movs	r3, #0
  40630c:	6463      	str	r3, [r4, #68]	; 0x44
  40630e:	f7fe ffe7 	bl	4052e0 <__sfp_lock_acquire>
  406312:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406314:	2200      	movs	r2, #0
  406316:	07db      	lsls	r3, r3, #31
  406318:	81a2      	strh	r2, [r4, #12]
  40631a:	d50e      	bpl.n	40633a <_fclose_r+0x9a>
  40631c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40631e:	f7ff fb71 	bl	405a04 <__retarget_lock_close_recursive>
  406322:	f7fe ffe3 	bl	4052ec <__sfp_lock_release>
  406326:	4630      	mov	r0, r6
  406328:	bd70      	pop	{r4, r5, r6, pc}
  40632a:	f7fe ffad 	bl	405288 <__sinit>
  40632e:	e7bf      	b.n	4062b0 <_fclose_r+0x10>
  406330:	6921      	ldr	r1, [r4, #16]
  406332:	4628      	mov	r0, r5
  406334:	f7ff f8ce 	bl	4054d4 <_free_r>
  406338:	e7d7      	b.n	4062ea <_fclose_r+0x4a>
  40633a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40633c:	f7ff fb66 	bl	405a0c <__retarget_lock_release_recursive>
  406340:	e7ec      	b.n	40631c <_fclose_r+0x7c>
  406342:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406344:	f7ff fb60 	bl	405a08 <__retarget_lock_acquire_recursive>
  406348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40634c:	2b00      	cmp	r3, #0
  40634e:	d1bb      	bne.n	4062c8 <_fclose_r+0x28>
  406350:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406352:	f016 0601 	ands.w	r6, r6, #1
  406356:	d1b1      	bne.n	4062bc <_fclose_r+0x1c>
  406358:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40635a:	f7ff fb57 	bl	405a0c <__retarget_lock_release_recursive>
  40635e:	4630      	mov	r0, r6
  406360:	bd70      	pop	{r4, r5, r6, pc}
  406362:	bf00      	nop

00406364 <_fstat_r>:
  406364:	b538      	push	{r3, r4, r5, lr}
  406366:	460b      	mov	r3, r1
  406368:	4c07      	ldr	r4, [pc, #28]	; (406388 <_fstat_r+0x24>)
  40636a:	4605      	mov	r5, r0
  40636c:	4611      	mov	r1, r2
  40636e:	4618      	mov	r0, r3
  406370:	2300      	movs	r3, #0
  406372:	6023      	str	r3, [r4, #0]
  406374:	f7fa fe89 	bl	40108a <_fstat>
  406378:	1c43      	adds	r3, r0, #1
  40637a:	d000      	beq.n	40637e <_fstat_r+0x1a>
  40637c:	bd38      	pop	{r3, r4, r5, pc}
  40637e:	6823      	ldr	r3, [r4, #0]
  406380:	2b00      	cmp	r3, #0
  406382:	d0fb      	beq.n	40637c <_fstat_r+0x18>
  406384:	602b      	str	r3, [r5, #0]
  406386:	bd38      	pop	{r3, r4, r5, pc}
  406388:	20400d14 	.word	0x20400d14

0040638c <_isatty_r>:
  40638c:	b538      	push	{r3, r4, r5, lr}
  40638e:	4c07      	ldr	r4, [pc, #28]	; (4063ac <_isatty_r+0x20>)
  406390:	2300      	movs	r3, #0
  406392:	4605      	mov	r5, r0
  406394:	4608      	mov	r0, r1
  406396:	6023      	str	r3, [r4, #0]
  406398:	f7fa fe7c 	bl	401094 <_isatty>
  40639c:	1c43      	adds	r3, r0, #1
  40639e:	d000      	beq.n	4063a2 <_isatty_r+0x16>
  4063a0:	bd38      	pop	{r3, r4, r5, pc}
  4063a2:	6823      	ldr	r3, [r4, #0]
  4063a4:	2b00      	cmp	r3, #0
  4063a6:	d0fb      	beq.n	4063a0 <_isatty_r+0x14>
  4063a8:	602b      	str	r3, [r5, #0]
  4063aa:	bd38      	pop	{r3, r4, r5, pc}
  4063ac:	20400d14 	.word	0x20400d14

004063b0 <_lseek_r>:
  4063b0:	b570      	push	{r4, r5, r6, lr}
  4063b2:	460d      	mov	r5, r1
  4063b4:	4c08      	ldr	r4, [pc, #32]	; (4063d8 <_lseek_r+0x28>)
  4063b6:	4611      	mov	r1, r2
  4063b8:	4606      	mov	r6, r0
  4063ba:	461a      	mov	r2, r3
  4063bc:	4628      	mov	r0, r5
  4063be:	2300      	movs	r3, #0
  4063c0:	6023      	str	r3, [r4, #0]
  4063c2:	f7fa fe69 	bl	401098 <_lseek>
  4063c6:	1c43      	adds	r3, r0, #1
  4063c8:	d000      	beq.n	4063cc <_lseek_r+0x1c>
  4063ca:	bd70      	pop	{r4, r5, r6, pc}
  4063cc:	6823      	ldr	r3, [r4, #0]
  4063ce:	2b00      	cmp	r3, #0
  4063d0:	d0fb      	beq.n	4063ca <_lseek_r+0x1a>
  4063d2:	6033      	str	r3, [r6, #0]
  4063d4:	bd70      	pop	{r4, r5, r6, pc}
  4063d6:	bf00      	nop
  4063d8:	20400d14 	.word	0x20400d14

004063dc <_read_r>:
  4063dc:	b570      	push	{r4, r5, r6, lr}
  4063de:	460d      	mov	r5, r1
  4063e0:	4c08      	ldr	r4, [pc, #32]	; (406404 <_read_r+0x28>)
  4063e2:	4611      	mov	r1, r2
  4063e4:	4606      	mov	r6, r0
  4063e6:	461a      	mov	r2, r3
  4063e8:	4628      	mov	r0, r5
  4063ea:	2300      	movs	r3, #0
  4063ec:	6023      	str	r3, [r4, #0]
  4063ee:	f7f9 ff81 	bl	4002f4 <_read>
  4063f2:	1c43      	adds	r3, r0, #1
  4063f4:	d000      	beq.n	4063f8 <_read_r+0x1c>
  4063f6:	bd70      	pop	{r4, r5, r6, pc}
  4063f8:	6823      	ldr	r3, [r4, #0]
  4063fa:	2b00      	cmp	r3, #0
  4063fc:	d0fb      	beq.n	4063f6 <_read_r+0x1a>
  4063fe:	6033      	str	r3, [r6, #0]
  406400:	bd70      	pop	{r4, r5, r6, pc}
  406402:	bf00      	nop
  406404:	20400d14 	.word	0x20400d14
  406408:	454c4449 	.word	0x454c4449
  40640c:	00000000 	.word	0x00000000
  406410:	51726d54 	.word	0x51726d54
  406414:	00000000 	.word	0x00000000
  406418:	20726d54 	.word	0x20726d54
  40641c:	00637653 	.word	0x00637653
  406420:	00005441 	.word	0x00005441
  406424:	4e2b5441 	.word	0x4e2b5441
  406428:	46454d41 	.word	0x46454d41
  40642c:	6f436c6f 	.word	0x6f436c6f
  406430:	00000073 	.word	0x00000073
  406434:	502b5441 	.word	0x502b5441
  406438:	33314e49 	.word	0x33314e49
  40643c:	00003733 	.word	0x00003733
  406440:	00544c42 	.word	0x00544c42
  406444:	63656661 	.word	0x63656661
  406448:	00000000 	.word	0x00000000
  40644c:	6c696146 	.word	0x6c696146
  406450:	74206465 	.word	0x74206465
  406454:	7263206f 	.word	0x7263206f
  406458:	65746165 	.word	0x65746165
  40645c:	73657420 	.word	0x73657420
  406460:	66612074 	.word	0x66612074
  406464:	74206365 	.word	0x74206365
  406468:	0d6b7361 	.word	0x0d6b7361
  40646c:	0000000a 	.word	0x0000000a
  406470:	65756c42 	.word	0x65756c42
  406474:	746f6f74 	.word	0x746f6f74
  406478:	6e692068 	.word	0x6e692068
  40647c:	61697469 	.word	0x61697469
  406480:	697a696c 	.word	0x697a696c
  406484:	0a20676e 	.word	0x0a20676e
  406488:	00000000 	.word	0x00000000
  40648c:	74696e69 	.word	0x74696e69
  406490:	00000000 	.word	0x00000000
  406494:	74747542 	.word	0x74747542
  406498:	203a6e6f 	.word	0x203a6e6f
  40649c:	20206425 	.word	0x20206425
  4064a0:	61745320 	.word	0x61745320
  4064a4:	3a737574 	.word	0x3a737574
  4064a8:	0a642520 	.word	0x0a642520
  4064ac:	00000000 	.word	0x00000000
  4064b0:	6f702058 	.word	0x6f702058
  4064b4:	69746973 	.word	0x69746973
  4064b8:	0a206f76 	.word	0x0a206f76
  4064bc:	00000000 	.word	0x00000000
  4064c0:	656e2058 	.word	0x656e2058
  4064c4:	69746167 	.word	0x69746167
  4064c8:	0a206f76 	.word	0x0a206f76
  4064cc:	00000000 	.word	0x00000000
  4064d0:	61702058 	.word	0x61702058
  4064d4:	6f646172 	.word	0x6f646172
  4064d8:	00000a20 	.word	0x00000a20
  4064dc:	6f702059 	.word	0x6f702059
  4064e0:	69746973 	.word	0x69746973
  4064e4:	0a206f76 	.word	0x0a206f76
  4064e8:	00000000 	.word	0x00000000
  4064ec:	20494156 	.word	0x20494156
  4064f0:	46204553 	.word	0x46204553
  4064f4:	52454455 	.word	0x52454455
  4064f8:	4d544120 	.word	0x4d544120
  4064fc:	532f4c45 	.word	0x532f4c45
  406500:	20454d41 	.word	0x20454d41
  406504:	0000000a 	.word	0x0000000a
  406508:	656e2059 	.word	0x656e2059
  40650c:	69746167 	.word	0x69746167
  406510:	0a206f76 	.word	0x0a206f76
  406514:	00000000 	.word	0x00000000
  406518:	61702059 	.word	0x61702059
  40651c:	6f646172 	.word	0x6f646172
  406520:	00000a20 	.word	0x00000a20
  406524:	63617473 	.word	0x63617473
  406528:	766f206b 	.word	0x766f206b
  40652c:	6c667265 	.word	0x6c667265
  406530:	2520776f 	.word	0x2520776f
  406534:	73252078 	.word	0x73252078
  406538:	00000a0d 	.word	0x00000a0d

0040653c <_global_impure_ptr>:
  40653c:	20400018 33323130 37363534 42413938     ..@ 0123456789AB
  40654c:	46454443 00000000 33323130 37363534     CDEF....01234567
  40655c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40656c:	0000296c                                l)..

00406570 <blanks.7217>:
  406570:	20202020 20202020 20202020 20202020                     

00406580 <zeroes.7218>:
  406580:	30303030 30303030 30303030 30303030     0000000000000000
  406590:	00000043 49534f50 00000058 0000002e     C...POSIX.......

004065a0 <_ctype_>:
  4065a0:	20202000 20202020 28282020 20282828     .         ((((( 
  4065b0:	20202020 20202020 20202020 20202020                     
  4065c0:	10108820 10101010 10101010 10101010      ...............
  4065d0:	04040410 04040404 10040404 10101010     ................
  4065e0:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4065f0:	01010101 01010101 01010101 10101010     ................
  406600:	42421010 42424242 02020202 02020202     ..BBBBBB........
  406610:	02020202 02020202 02020202 10101010     ................
  406620:	00000020 00000000 00000000 00000000      ...............
	...

004066a4 <_init>:
  4066a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4066a6:	bf00      	nop
  4066a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4066aa:	bc08      	pop	{r3}
  4066ac:	469e      	mov	lr, r3
  4066ae:	4770      	bx	lr

004066b0 <__init_array_start>:
  4066b0:	00405079 	.word	0x00405079

004066b4 <__frame_dummy_init_array_entry>:
  4066b4:	00400165                                e.@.

004066b8 <_fini>:
  4066b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4066ba:	bf00      	nop
  4066bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4066be:	bc08      	pop	{r3}
  4066c0:	469e      	mov	lr, r3
  4066c2:	4770      	bx	lr

004066c4 <__fini_array_start>:
  4066c4:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <uxCriticalNesting>:
20400010:	aaaa aaaa                                   ....

20400014 <_impure_ptr>:
20400014:	0018 2040                                   ..@ 

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__malloc_av_>:
	...
20400448:	0440 2040 0440 2040 0448 2040 0448 2040     @.@ @.@ H.@ H.@ 
20400458:	0450 2040 0450 2040 0458 2040 0458 2040     P.@ P.@ X.@ X.@ 
20400468:	0460 2040 0460 2040 0468 2040 0468 2040     `.@ `.@ h.@ h.@ 
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 

20400848 <__malloc_sbrk_base>:
20400848:	ffff ffff                                   ....

2040084c <__malloc_trim_threshold>:
2040084c:	0000 0002                                   ....

20400850 <__atexit_recursive_mutex>:
20400850:	0cf0 2040                                   ..@ 

20400854 <__global_locale>:
20400854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400934:	6171 0040 5b01 0040 0000 0000 65a0 0040     qa@..[@......e@.
20400944:	659c 0040 6488 0040 6488 0040 6488 0040     .e@..d@..d@..d@.
20400954:	6488 0040 6488 0040 6488 0040 6488 0040     .d@..d@..d@..d@.
20400964:	6488 0040 6488 0040 ffff ffff ffff ffff     .d@..d@.........
20400974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
